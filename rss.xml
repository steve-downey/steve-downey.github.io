<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>What Comes to Mind</title><link>https://sdowney.org/</link><description>Stuff, and more stuff</description><atom:link href="https://sdowney.org/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:sdowney@sdowney.dev"&gt;Steve Downey&lt;/a&gt; 
 &lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;
 &lt;img alt="Creative Commons License BY-NC-SA"
 style="border-width:0; margin-bottom:12px;"
 src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"&gt;&lt;/a&gt;</copyright><lastBuildDate>Mon, 23 Dec 2024 18:11:45 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>All Syntax Example</title><link>https://sdowney.org/posts/all-syntax-example/</link><dc:creator>Steve Downey</dc:creator><description>&lt;nav id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#orgd5934e1"&gt;1. Basics&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#orgaafecc2"&gt;1.1. Biggest heading&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org006f008"&gt;1.1.1. Bigger heading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#orgf792bd8"&gt;1.1.2. Text width&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org125dae6"&gt;1.2. Lists&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#orgbb1d466"&gt;1.2.1. Unordered lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org2076a6f"&gt;1.2.2. Ordered lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#orgb47c057"&gt;1.2.3. Definition lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org2870a34"&gt;1.2.4. Checkboxes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#orgcdf1fd7"&gt;1.3. Miscellaneous effects&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#orgfd423e2"&gt;1.3.1. Include Org files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org296196f"&gt;1.3.2. Inline HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#orgad31c92"&gt;1.3.3. Inline LaTeX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org1726cd5"&gt;1.3.4. Centered text&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org485564b"&gt;1.4. Code blocks&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#orgaece81a"&gt;1.4.1. Syntax highlighting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#orgb5da4b7"&gt;1.4.2. Line numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#orgc8e266e"&gt;1.4.3. Output&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org4ceed87"&gt;1.5. Inline code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#orgf37bbb5"&gt;1.6. Notes at the footer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#orgac54222"&gt;1.7. Formatting text&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org76888b1"&gt;1.7.1. Text effects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org4a14988"&gt;1.7.2. Quotations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org65e0460"&gt;1.7.3. Spaces&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org3166733"&gt;1.8. Mathematical formulae&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#orgf8aebba"&gt;1.9. Special characters&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org652cae6"&gt;1.9.1. Accents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#orgee7fabd"&gt;1.9.2. Punctuation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org039bc45"&gt;1.9.3. Commercial symbols&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#orgec4495f"&gt;1.9.4. Greek characters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org5f72d03"&gt;1.9.5. Math characters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org650e7e7"&gt;1.9.6. Misc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org034bf07"&gt;1.10. Comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#orge1d901e"&gt;1.11. Tables&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org96e9f7b"&gt;1.11.1. Align tables on the page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org7c63968"&gt;1.12. Images, video and audio&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#orgd3077a6"&gt;1.12.1. Images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org03167d2"&gt;1.12.2. Video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#orgee53945"&gt;1.12.3. Sounds&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org32c9dab"&gt;1.13. Special text boxes&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org09e90e1"&gt;1.13.1. Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#orgba11987"&gt;1.13.2. Info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org02a0d33"&gt;1.13.3. Tip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org06d1def"&gt;1.13.4. Note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#orge24fa81"&gt;1.13.5. Warning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#links"&gt;1.14. Links&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#orgff263ee"&gt;1.14.1. Anchors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#orge2ada58"&gt;1.14.2. Hyperlinks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org5b16762"&gt;2. Org miscellaneous&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#orga26f86d"&gt;2.1. Dates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org12ab715"&gt;2.2. &lt;span class="done DONE"&gt;DONE&lt;/span&gt; Buy GTD book   &lt;span class="tag"&gt;&lt;span class="online"&gt;online&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#orgca1e021"&gt;2.3. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; Read GTD book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org2797a16"&gt;2.4. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; Apply GTD methodoloy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#orgd73e541"&gt;2.5. Some note   &lt;span class="tag"&gt;&lt;span class="computer"&gt;computer&lt;/span&gt; &lt;span class="write"&gt;write&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org6074e10"&gt;2.6. Weekly review   &lt;span class="tag"&gt;&lt;span class="computer"&gt;computer&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org6b83ace"&gt;3. Org macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#orgc266123"&gt;4. BigBlow addons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/nav&gt;
&lt;p&gt;
This is an Org mode document.
&lt;/p&gt;

&lt;p&gt;
This is the export time: 2024-12-22 22:03:18
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Org mode&lt;/b&gt; is a easy-to-write &lt;i&gt;plain text&lt;/i&gt; formatting syntax for authoring LaTeX
documents, creating Web pages and much more!
&lt;/p&gt;
&lt;div id="outline-container-orgd5934e1" class="outline-2"&gt;
&lt;h2 id="orgd5934e1"&gt;&lt;span class="section-number-2"&gt;1.&lt;/span&gt; Basics&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgaafecc2" class="outline-3"&gt;
&lt;h3 id="orgaafecc2"&gt;&lt;span class="section-number-3"&gt;1.1.&lt;/span&gt; Biggest heading&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
New chapter.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org006f008" class="outline-4"&gt;
&lt;h4 id="org006f008"&gt;&lt;span class="section-number-4"&gt;1.1.1.&lt;/span&gt; Bigger heading&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-1-1"&gt;
&lt;p&gt;
New section.
&lt;/p&gt;
&lt;/div&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;a id="orge4dd1dd"&gt;&lt;/a&gt;Big heading&lt;br&gt;
&lt;div class="outline-text-5" id="text-1-1-1-1"&gt;
&lt;p&gt;
New sub-section.
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="orge837cc7"&gt;&lt;/a&gt;Text breaks&lt;br&gt;
&lt;div class="outline-text-5" id="text-1-1-1-2"&gt;
&lt;p&gt;
A single newline has no effect.
This line is part of the same paragraph.
&lt;/p&gt;

&lt;p&gt;
But an empty line
&lt;/p&gt;

&lt;p&gt;
demarcates paragraphs.
&lt;/p&gt;

&lt;p&gt;
By entering two consecutive backslashes,
you can force to break lines &lt;br&gt;
without starting a new paragraph.
&lt;/p&gt;

&lt;p&gt;
For an horizontal line, insert at least 5 dashes: this is some text above an
horizontal rule
&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;
and some text below it.
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="org635016c"&gt;&lt;/a&gt;Numbered headings&lt;br&gt;
&lt;div class="outline-text-5" id="text-1-1-1-3"&gt;
&lt;p&gt;
You can create numbered headings up to a certain level by setting an option:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-org"&gt;&lt;span class="org-org-meta-line"&gt;#+OPTIONS: H:4&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf792bd8" class="outline-4"&gt;
&lt;h4 id="orgf792bd8"&gt;&lt;span class="section-number-4"&gt;1.1.2.&lt;/span&gt; Text width&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-1-2"&gt;
&lt;p&gt;
One morning, when Gregor Samsa woke from troubled dreams, he found himself
transformed in his bed into a horrible vermin. He lay on his armour-like back,
and if he lifted his head a little he could see his brown belly, slightly domed
and divided by arches into stiff sections. The bedding was hardly able to cover
it and seemed ready to slide off any moment. His many legs, pitifully thin
compared with the size of the rest of him, waved about helplessly as he looked.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org125dae6" class="outline-3"&gt;
&lt;h3 id="org125dae6"&gt;&lt;span class="section-number-3"&gt;1.2.&lt;/span&gt; Lists&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
Org markup allows you to create bulleted or numbered lists. It allows any
combination of the two list types.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgbb1d466" class="outline-4"&gt;
&lt;h4 id="orgbb1d466"&gt;&lt;span class="section-number-4"&gt;1.2.1.&lt;/span&gt; Unordered lists&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-2-1"&gt;
&lt;p&gt;
Itemized lists are marked with bullets. They are convenient to:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;organize data, and&lt;/li&gt;
&lt;li&gt;make the document
&lt;ul class="org-ul"&gt;
&lt;li&gt;prettier, and&lt;/li&gt;
&lt;li&gt;easier to read.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Create them with a minus or a plus sign.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2076a6f" class="outline-4"&gt;
&lt;h4 id="org2076a6f"&gt;&lt;span class="section-number-4"&gt;1.2.2.&lt;/span&gt; Ordered lists&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-2-2"&gt;
&lt;p&gt;
Enumerated lists are marked with numbers or letters:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;First element
&lt;ol class="org-ol"&gt;
&lt;li&gt;First sub-item&lt;/li&gt;
&lt;li&gt;Last sub-item&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Second element&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
You can have ordered lists with jumping numbers:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li value="1"&gt;First&lt;/li&gt;
&lt;li value="2"&gt;Second&lt;/li&gt;
&lt;li value="5"&gt;Jump to 5th&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb47c057" class="outline-4"&gt;
&lt;h4 id="orgb47c057"&gt;&lt;span class="section-number-4"&gt;1.2.3.&lt;/span&gt; Definition lists&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-2-3"&gt;
&lt;dl class="org-dl"&gt;
&lt;dt&gt;Definition list&lt;/dt&gt;&lt;dd&gt;List containing definitions.&lt;/dd&gt;

&lt;dt&gt;Term to define&lt;/dt&gt;&lt;dd&gt;Explication of the term.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2870a34" class="outline-4"&gt;
&lt;h4 id="org2870a34"&gt;&lt;span class="section-number-4"&gt;1.2.4.&lt;/span&gt; Checkboxes&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-2-4"&gt;
&lt;ul class="org-ul"&gt;
&lt;li class="off"&gt;&lt;code&gt;[ ]&lt;/code&gt; First item not checked&lt;/li&gt;
&lt;li class="trans"&gt;&lt;code&gt;[-]&lt;/code&gt; Second item half done
&lt;ul class="org-ul"&gt;
&lt;li class="off"&gt;&lt;code&gt;[ ]&lt;/code&gt; Another first&lt;/li&gt;
&lt;li class="off"&gt;&lt;code&gt;[ ]&lt;/code&gt; Another second&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class="on"&gt;&lt;code&gt;[X]&lt;/code&gt; Third item checked&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgcdf1fd7" class="outline-3"&gt;
&lt;h3 id="orgcdf1fd7"&gt;&lt;span class="section-number-3"&gt;1.3.&lt;/span&gt; Miscellaneous effects&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgfd423e2" class="outline-4"&gt;
&lt;h4 id="orgfd423e2"&gt;&lt;span class="section-number-4"&gt;1.3.1.&lt;/span&gt; Include Org files&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-3-1"&gt;
&lt;p&gt;
You can include another Org file and skip its title by using the &lt;code&gt;:lines&lt;/code&gt; argument
to &lt;code&gt;#+INCLUDE&lt;/code&gt;:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-org"&gt;&lt;span class="org-org-meta-line"&gt;#+INCLUDE: chapter1.org :lines "2-"&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="note" id="orgc929a3f"&gt;
&lt;p&gt;
File inclusion, through INCLUDE keywords, is an &lt;b&gt;export-only feature&lt;/b&gt;.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org296196f" class="outline-4"&gt;
&lt;h4 id="org296196f"&gt;&lt;span class="section-number-4"&gt;1.3.2.&lt;/span&gt; Inline HTML&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-3-2"&gt;
&lt;p&gt;
You can include raw HTML in your Org documents and it will get kept as HTML
when it's exported. XXX
&lt;/p&gt;

&lt;p&gt;
Text can be preformatted (in a fixed-width font).
&lt;/p&gt;
&lt;p&gt;
It is especially useful for more advanced stuff like images or tables where you
need more control of the HTML options than Org mode actually gives you.
&lt;/p&gt;

&lt;p&gt;
Similarly, you can incorporate JS or do anything else you can do in a Web page
(such as importing a CSS file).
&lt;/p&gt;

&lt;p&gt;
You can create named classes (to get style control from your CSS) with:
&lt;/p&gt;

&lt;pre class="example" id="org346ecc5"&gt;
#+begin_info
*Info example* \\
Did you know...
#+end_info
&lt;/pre&gt;

&lt;p&gt;
You can also add interactive elements to the HTML such as interactive R plots.
&lt;/p&gt;

&lt;p&gt;
Finally, you can include an HTML file verbatim (during export) with:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-org"&gt;&lt;span class="org-org-meta-line"&gt;#+INCLUDE: file.html html&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Don't edit the exported HTML file!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgad31c92" class="outline-4"&gt;
&lt;h4 id="orgad31c92"&gt;&lt;span class="section-number-4"&gt;1.3.3.&lt;/span&gt; Inline LaTeX&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-3-3"&gt;
&lt;p&gt;
You can also use raw LaTeX. XXX
&lt;/p&gt;

&lt;p&gt;
Text can be preformatted (in a fixed-width font).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1726cd5" class="outline-4"&gt;
&lt;h4 id="org1726cd5"&gt;&lt;span class="section-number-4"&gt;1.3.4.&lt;/span&gt; Centered text&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-3-4"&gt;
&lt;div class="org-center"&gt;
&lt;p&gt;
This text is centered!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org485564b" class="outline-3"&gt;
&lt;h3 id="org485564b"&gt;&lt;span class="section-number-3"&gt;1.4.&lt;/span&gt; Code blocks&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-4"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgaece81a" class="outline-4"&gt;
&lt;h4 id="orgaece81a"&gt;&lt;span class="section-number-4"&gt;1.4.1.&lt;/span&gt; Syntax highlighting&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-4-1"&gt;
&lt;p&gt;
The source code blocks support syntax highlighting:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-cpp"&gt;&lt;span class="org-comment-delimiter"&gt;/*&lt;/span&gt;
&lt;span class="org-comment"&gt; * Application that displays a "Hello" message to the standard output.&lt;/span&gt;
&lt;span class="org-comment-delimiter"&gt; */&lt;/span&gt;
&lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-function-name"&gt;main&lt;/span&gt;(&lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;arc&lt;/span&gt;, &lt;span class="org-type"&gt;char&lt;/span&gt; **&lt;span class="org-variable-name"&gt;argv&lt;/span&gt;)
{
  printf(&lt;span class="org-string"&gt;"Hello, %s!\n"&lt;/span&gt;, (argc&amp;gt;1) ? argv[1] : &lt;span class="org-string"&gt;"World"&lt;/span&gt;);
  &lt;span class="org-keyword"&gt;return&lt;/span&gt; 0;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The following language strings are currently recognized:
&lt;/p&gt;

&lt;p&gt;
Awk, C, D, C++, and cpp, R, Calc, Clojure and ClojureScript, CSS, Ditaa, Dot, Emacs Lisp, Eshell, Forth, Fortran, GnuPlot, Groovy, Haskell, Java, JavaScript, Julia, LaTeX, LilyPond, Lisp, Lua, Makefile, Maxima, OCaml, Octave and MatLab, Org, Perl, Processing, PlantUML, Python, Ruby, Sass, Scheme, Screen, Sed, Shell Script, Sql, Sqlite.
&lt;/p&gt;

&lt;p&gt;
Code block with long lines:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;testing testing testing testing testing testing testing testing testing testing
0        1         2         3         4         5         6         7         8         9
123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
For PDF (LaTeX), one  solution is to surround the code  block such as:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-R"&gt;print("This block is in scriptsize")
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb5da4b7" class="outline-4"&gt;
&lt;h4 id="orgb5da4b7"&gt;&lt;span class="section-number-4"&gt;1.4.2.&lt;/span&gt; Line numbers&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-4-2"&gt;
&lt;p&gt;
Both in &lt;code&gt;example&lt;/code&gt; and in &lt;code&gt;src&lt;/code&gt; snippets, you can add a &lt;code&gt;-n&lt;/code&gt; switch to the end of the
&lt;code&gt;begin&lt;/code&gt; line, to get the lines of the example numbered.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;&lt;span class="linenr"&gt;1: &lt;/span&gt;(&lt;span class="org-keyword"&gt;defun&lt;/span&gt; &lt;span class="org-function-name"&gt;org-xor&lt;/span&gt; (a b)
&lt;span class="linenr"&gt;2: &lt;/span&gt;  &lt;span class="org-doc"&gt;"Exclusive or."&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
If you use a &lt;code&gt;+n&lt;/code&gt; switch, the numbering from the previous numbered snippet will
be continued in the current one:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;&lt;span class="linenr"&gt;3: &lt;/span&gt;  (&lt;span class="org-keyword"&gt;if&lt;/span&gt; a (not b) b))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
In literal examples, Org will interpret strings like &lt;code&gt;(ref:name)&lt;/code&gt; as labels, and
use them as targets for special hyperlinks like &lt;code&gt;[[(name)]]&lt;/code&gt; (i.e., the reference
name enclosed in single parenthesis).  In HTML, hovering the mouse over such
a link will remote-highlight the corresponding code line, which is kind of
cool.
&lt;/p&gt;

&lt;p&gt;
You can also add a &lt;code&gt;-r&lt;/code&gt; switch which removes the labels from the source code.
With the &lt;code&gt;-n&lt;/code&gt; switch, links to these references will be labeled by the line
numbers from the code listing, otherwise links will use the labels with no
parentheses.  Here is an example:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;&lt;span id="coderef-sc" class="coderef-off"&gt;&lt;span class="linenr"&gt;1: &lt;/span&gt;(&lt;span class="org-keyword"&gt;save-excursion&lt;/span&gt;                  &lt;span class="org-comment-delimiter"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="coderef-jump" class="coderef-off"&gt;&lt;span class="linenr"&gt;2: &lt;/span&gt;  (goto-char (point-min)))       &lt;span class="org-comment-delimiter"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
In line &lt;a href="https://sdowney.org/posts/all-syntax-example/#coderef-sc" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-sc');" onmouseout="CodeHighlightOff(this, 'coderef-sc');"&gt;1&lt;/a&gt;, we remember the current position.  &lt;a href="https://sdowney.org/posts/all-syntax-example/#coderef-jump" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-jump');" onmouseout="CodeHighlightOff(this, 'coderef-jump');"&gt;Line 2&lt;/a&gt; jumps to
&lt;code&gt;point-min&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc8e266e" class="outline-4"&gt;
&lt;h4 id="orgc8e266e"&gt;&lt;span class="section-number-4"&gt;1.4.3.&lt;/span&gt; Output&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-4-3"&gt;
&lt;p&gt;
The output from the &lt;b&gt;execution&lt;/b&gt; of programs, scripts or commands can be inserted
in the document itself, allowing you to work in the &lt;i&gt;reproducible research&lt;/i&gt;
mindset.
&lt;/p&gt;
&lt;/div&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;a id="org89eb07f"&gt;&lt;/a&gt;Text&lt;br&gt;
&lt;div class="outline-text-5" id="text-1-4-3-1"&gt;
&lt;p&gt;
A one-liner result:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;date +&lt;span class="org-string"&gt;"%Y-%m-%d"&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
2024-12-22
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="org59e9cfc"&gt;&lt;/a&gt;Graphics&lt;br&gt;
&lt;div class="outline-text-5" id="text-1-4-3-2"&gt;
&lt;p&gt;
Data to be charted:
&lt;/p&gt;

&lt;table id="orgdfe63d0"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;Month&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Degrees&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;3.8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;4.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;td class="org-right"&gt;6.3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;td class="org-right"&gt;9.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;5&lt;/td&gt;
&lt;td class="org-right"&gt;11.9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;6&lt;/td&gt;
&lt;td class="org-right"&gt;15.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;7&lt;/td&gt;
&lt;td class="org-right"&gt;17.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;8&lt;/td&gt;
&lt;td class="org-right"&gt;17.4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;9&lt;/td&gt;
&lt;td class="org-right"&gt;15.7&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;10&lt;/td&gt;
&lt;td class="org-right"&gt;11.8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;11&lt;/td&gt;
&lt;td class="org-right"&gt;7.7&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;12&lt;/td&gt;
&lt;td class="org-right"&gt;4.8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Code:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-R" id="orgb4e7537"&gt;plot(data, type="b", bty="l", col=c("#ABD249"), las=1, lwd=4)
grid(nx=NULL, ny=NULL, col=c("#E8E8E8"), lwd=1)
legend("bottom", legend=c("Degrees"), col=c("#ABD249"), pch=c(19))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The resulting chart:
&lt;/p&gt;


&lt;figure id="orgb9fe109"&gt;
&lt;img src="https://sdowney.org/images/Rplot.png" alt="Rplot.png"&gt;

&lt;/figure&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="org1f93c41"&gt;&lt;/a&gt;R code block&lt;br&gt;
&lt;div class="outline-text-5" id="text-1-4-3-3"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-R"&gt;library(ggplot2)
summary(cars)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Plot:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-R"&gt;library(ggplot2)
qplot(speed, dist, data = cars) + geom_smooth()
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4ceed87" class="outline-3"&gt;
&lt;h3 id="org4ceed87"&gt;&lt;span class="section-number-3"&gt;1.5.&lt;/span&gt; Inline code&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-5"&gt;
&lt;p&gt;
You can also evaluate code inline as follows: 1 + 1 is .
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf37bbb5" class="outline-3"&gt;
&lt;h3 id="orgf37bbb5"&gt;&lt;span class="section-number-3"&gt;1.6.&lt;/span&gt; Notes at the footer&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-6"&gt;
&lt;p&gt;
It is possible to define named footnotes&lt;sup&gt;&lt;a id="fnr.myfootnote" class="footref" href="https://sdowney.org/posts/all-syntax-example/#fn.myfootnote" role="doc-backlink"&gt;1&lt;/a&gt;&lt;/sup&gt;, or ones with
automatic anchors&lt;sup&gt;&lt;a id="fnr.2" class="footref" href="https://sdowney.org/posts/all-syntax-example/#fn.2" role="doc-backlink"&gt;2&lt;/a&gt;&lt;/sup&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgac54222" class="outline-3"&gt;
&lt;h3 id="orgac54222"&gt;&lt;span class="section-number-3"&gt;1.7.&lt;/span&gt; Formatting text&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-7"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org76888b1" class="outline-4"&gt;
&lt;h4 id="org76888b1"&gt;&lt;span class="section-number-4"&gt;1.7.1.&lt;/span&gt; Text effects&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-7-1"&gt;
&lt;p&gt;
&lt;i&gt;Emphasize&lt;/i&gt; (italics), &lt;b&gt;strongly&lt;/b&gt; (bold), and &lt;b&gt;&lt;i&gt;very strongly&lt;/i&gt;&lt;/b&gt; (bold italics).
&lt;/p&gt;

&lt;p&gt;
Markup elements could be nested: this is &lt;i&gt;italic text which contains
&lt;span class="underline"&gt;underlined text&lt;/span&gt; within it&lt;/i&gt;, whereas &lt;span class="underline"&gt;this is normal underlined text&lt;/span&gt;.
&lt;/p&gt;

&lt;p&gt;
Markup can span across multiple lines, by default &lt;b&gt;no more than 2&lt;/b&gt;:
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;This
is not
bold&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
Other elements to use sparingly are:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;monospaced typewriter font for &lt;code&gt;inline code&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;monospaced typewriter font for &lt;code&gt;verbatim text&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;deleted&lt;/del&gt; text (vs. &lt;span class="underline"&gt;inserted&lt;/span&gt; text)&lt;/li&gt;
&lt;li&gt;text with&lt;sup&gt;superscript&lt;/sup&gt; (for example: &lt;code&gt;m/s^{2}&lt;/code&gt; gives m/s&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;text with&lt;sub&gt;subscript&lt;/sub&gt; (for example: &lt;code&gt;H_{2}O&lt;/code&gt; gives H&lt;sub&gt;2&lt;/sub&gt;O)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4a14988" class="outline-4"&gt;
&lt;h4 id="org4a14988"&gt;&lt;span class="section-number-4"&gt;1.7.2.&lt;/span&gt; Quotations&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-7-2"&gt;
&lt;p&gt;
Use the &lt;code&gt;quote&lt;/code&gt; block to typeset quoted text.
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Let us change our traditional attitude to the construction of programs:
Instead of imagining that our main task is to instruct a computer what to do,
let us concentrate rather on explaining to human beings what we want a
computer to do.
&lt;/p&gt;

&lt;p&gt;
The practitioner of literate programming can be regarded as an essayist, whose
main concern is with exposition and excellence of style. Such an author, with
thesaurus in hand, chooses the names of variables carefully and explains what
each variable means. He or she strives for a program that is comprehensible
because its concepts have been introduced in an order that is best for human
understanding, using a mixture of formal and informal methods that reinforce
each other.
&lt;/p&gt;

&lt;p&gt;
— Donald Knuth
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
A short one:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Everything should be made as simple as possible,
but not any simpler – Albert Einstein
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
In a &lt;code&gt;verse&lt;/code&gt; environment, there is an implicit line break at the end of each
line, and indentation and vertical space are preserved:
&lt;/p&gt;

&lt;p class="verse"&gt;
Everything should be made as simple as possible,&lt;br&gt;
but not any simpler – Albert Einstein&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
Typically used for quoting passages of an email message:
&lt;/p&gt;

&lt;p class="verse"&gt;
&amp;gt;&amp;gt; This is an email message with "nested" quoting. Lorem ipsum dolor sit amet,&lt;br&gt;
&amp;gt;&amp;gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.&lt;br&gt;
&amp;gt;&amp;gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&lt;br&gt;
&amp;gt;&lt;br&gt;
&amp;gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem&lt;br&gt;
&amp;gt; consectetuer libero luctus adipiscing.&lt;br&gt;
&lt;br&gt;
Itemized or unordered lists (&lt;code&gt;ul&lt;/code&gt;):&lt;br&gt;
- This is the first list item.&lt;br&gt;
- This is the second list item.&lt;br&gt;
&lt;br&gt;
Enumerated or ordered Lists (&lt;code&gt;ol&lt;/code&gt;):&lt;br&gt;
1. This is the first list item.&lt;br&gt;
2. This is the second list item.&lt;br&gt;
&lt;br&gt;
Maybe an equation here?&lt;br&gt;
&lt;br&gt;
See &lt;a href="http://www.google.com/"&gt;http://www.google.com/&lt;/a&gt; for more information…&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org65e0460" class="outline-4"&gt;
&lt;h4 id="org65e0460"&gt;&lt;span class="section-number-4"&gt;1.7.3.&lt;/span&gt; Spaces&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-7-3"&gt;
&lt;p&gt;
Using non-breaking spaces.
&lt;/p&gt;

&lt;p&gt;
Insert the Unicode character &lt;code&gt;00A0&lt;/code&gt; to add a non-breaking space. FIXME
Or add/use an Org entity?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3166733" class="outline-3"&gt;
&lt;h3 id="org3166733"&gt;&lt;span class="section-number-3"&gt;1.8.&lt;/span&gt; Mathematical formulae&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-8"&gt;
&lt;p&gt;
You can embed LaTeX math formatting in Org mode files using the following
syntax:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
For &lt;b&gt;inline math&lt;/b&gt; expressions, use &lt;code&gt;\(...\)&lt;/code&gt;: \(x^2\) or \(1 &amp;lt; 2\).
&lt;/p&gt;

&lt;p&gt;
It's &lt;i&gt;not&lt;/i&gt; advised to use the constructs &lt;code&gt;$...$&lt;/code&gt; (both for Org and MathJax).
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
Centered display equation (the &lt;i&gt;Euler theorem&lt;/i&gt;):
&lt;/p&gt;

&lt;p&gt;
\[
  \int_0^\infty e^{-x^2} dx = {{\sqrt{\pi}} \over {2}}
  \]
&lt;/p&gt;

&lt;p&gt;
The use of &lt;code&gt;\[...\]&lt;/code&gt; is for mathematical expressions which you want to make
&lt;b&gt;stand out, on their own lines&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
LaTeX allows to inline such &lt;code&gt;\[...\]&lt;/code&gt; constructs (&lt;i&gt;quadratic formula&lt;/i&gt;):
\[ \frac{-b \pm \sqrt{b^2 - 4 a c}}{2a} \]
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Double dollar signs (&lt;code&gt;$$&lt;/code&gt;) should not be used&lt;/b&gt;.
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
The &lt;i&gt;sinus theorem&lt;/i&gt; can then be written as the equation:
&lt;/p&gt;

\begin{equation}
\label{eqn:sinalpha}
\frac{\sin\alpha}{a}=\frac{\sin\beta}{b}
\end{equation}&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
See Equation \eqref{org4ba5ecd},
&lt;/p&gt;

\begin{equation}
\label{org4ba5ecd}
n_{i+1} = \frac{n_{i} (d-i) (e-1)}{(i+1)}
\end{equation}

&lt;p&gt;
Only captioned equations are numbered
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;Other alternative: use \begin{equation*} or \begin{displaymath} (= the verbose
form of the &lt;code&gt;\[...\]&lt;/code&gt; construct). M-q does not fill those.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Differently from $…$ and \(...\), an equation environment produces a &lt;b&gt;numbered&lt;/b&gt;
equation to which you can add a label and reference the equation by (label)
name in other parts of the text. This is not possibly with unnumbered math
environments ($$, …).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf8aebba" class="outline-3"&gt;
&lt;h3 id="orgf8aebba"&gt;&lt;span class="section-number-3"&gt;1.9.&lt;/span&gt; Special characters&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-9"&gt;
&lt;p&gt;
Some of the widely used special characters (converted from text characters to
their typographically correct entitites):
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org652cae6" class="outline-4"&gt;
&lt;h4 id="org652cae6"&gt;&lt;span class="section-number-4"&gt;1.9.1.&lt;/span&gt; Accents&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-9-1"&gt;
&lt;p&gt;
À Á
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgee7fabd" class="outline-4"&gt;
&lt;h4 id="orgee7fabd"&gt;&lt;span class="section-number-4"&gt;1.9.2.&lt;/span&gt; Punctuation&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-9-2"&gt;
&lt;p&gt;
Dash: – —
&lt;/p&gt;

&lt;p&gt;
Marks: ¡ ¿
&lt;/p&gt;

&lt;p&gt;
Quotations: « »
&lt;/p&gt;

&lt;p&gt;
Miscellaneous: ¶ ª
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org039bc45" class="outline-4"&gt;
&lt;h4 id="org039bc45"&gt;&lt;span class="section-number-4"&gt;1.9.3.&lt;/span&gt; Commercial symbols&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-9-3"&gt;
&lt;p&gt;
Property marks: © ®
&lt;/p&gt;

&lt;p&gt;
Currency: ¢ € ¥ £
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgec4495f" class="outline-4"&gt;
&lt;h4 id="orgec4495f"&gt;&lt;span class="section-number-4"&gt;1.9.4.&lt;/span&gt; Greek characters&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-9-4"&gt;
&lt;p&gt;
The Greek letters α, β, and γ are used to denote angles.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5f72d03" class="outline-4"&gt;
&lt;h4 id="org5f72d03"&gt;&lt;span class="section-number-4"&gt;1.9.5.&lt;/span&gt; Math characters&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-9-5"&gt;
&lt;p&gt;
Science: ± ÷
&lt;/p&gt;

&lt;p&gt;
Arrows: → → ← ↔ ⇒ ⇐ ⇔
&lt;/p&gt;

&lt;p&gt;
Function names: arccos cos
&lt;/p&gt;

&lt;p&gt;
Signs and symbols: • *
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org650e7e7" class="outline-4"&gt;
&lt;h4 id="org650e7e7"&gt;&lt;span class="section-number-4"&gt;1.9.6.&lt;/span&gt; Misc&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-9-6"&gt;
&lt;p&gt;
Suits: ♣ ♠
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org034bf07" class="outline-3"&gt;
&lt;h3 id="org034bf07"&gt;&lt;span class="section-number-3"&gt;1.10.&lt;/span&gt; Comments&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-10"&gt;
&lt;p&gt;
It's possible to add comments in the document.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge1d901e" class="outline-3"&gt;
&lt;h3 id="orge1d901e"&gt;&lt;span class="section-number-3"&gt;1.11.&lt;/span&gt; Tables&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-11"&gt;
&lt;p&gt;
You can create tables with an optional header row (by using an horizontal line
of dashes to separate it from the rest of the table).
&lt;/p&gt;

&lt;table&gt;
&lt;caption class="t-above"&gt;&lt;span class="table-number"&gt;Table 1:&lt;/span&gt; An example of table&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Header 1&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Header 2&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Header 3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;Top left&lt;/td&gt;
&lt;td class="org-left"&gt;Top middle&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt;Right&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Bottom left&lt;/td&gt;
&lt;td class="org-left"&gt;Bottom middle&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Columns are automatically aligned:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Number-rich columns to the right, and&lt;/li&gt;
&lt;li&gt;String-rich columns to the left.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
If you want to override the automatic alignment, use &lt;code&gt;&amp;lt;r&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;c&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;l&amp;gt;&lt;/code&gt;.
&lt;/p&gt;

&lt;table&gt;
&lt;caption class="t-above"&gt;&lt;span class="table-number"&gt;Table 2:&lt;/span&gt; Table with alignment&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-center"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-center"&gt;2&lt;/td&gt;
&lt;td class="org-left"&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;right&lt;/td&gt;
&lt;td class="org-center"&gt;center&lt;/td&gt;
&lt;td class="org-left"&gt;left&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;xxxxxxxxxxxx&lt;/td&gt;
&lt;td class="org-center"&gt;xxxxxxxxxxxx&lt;/td&gt;
&lt;td class="org-left"&gt;xxxxxxxxxxxx&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Placement:
&lt;/p&gt;

&lt;table&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;a&lt;/td&gt;
&lt;td class="org-right"&gt;b&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
XXX
Different from the following:
&lt;/p&gt;

&lt;table&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;a&lt;/td&gt;
&lt;td class="org-right"&gt;b&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id="outline-container-org96e9f7b" class="outline-4"&gt;
&lt;h4 id="org96e9f7b"&gt;&lt;span class="section-number-4"&gt;1.11.1.&lt;/span&gt; Align tables on the page&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-11-1"&gt;
&lt;p&gt;
Here is a table on the left side:
&lt;/p&gt;

&lt;table&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;a&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;b&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;c&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;td class="org-right"&gt;5&lt;/td&gt;
&lt;td class="org-right"&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
The noindent just gets rid of the indentation of the first line of a paragraph
which in this case is the table. The hfill adds infinite stretch after the
table, so it pushes the table to the left.
&lt;/p&gt;

&lt;p&gt;
Here is a centered table:
&lt;/p&gt;

&lt;table&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;a&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;b&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;c&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;td class="org-right"&gt;5&lt;/td&gt;
&lt;td class="org-right"&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
And here's a table on the right side:
&lt;/p&gt;

&lt;table&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;a&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;b&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;c&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;td class="org-right"&gt;5&lt;/td&gt;
&lt;td class="org-right"&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Here the hfill adds infinite stretch before the table, so it pushes the table
to the right.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7c63968" class="outline-3"&gt;
&lt;h3 id="org7c63968"&gt;&lt;span class="section-number-3"&gt;1.12.&lt;/span&gt; Images, video and audio&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-12"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd3077a6" class="outline-4"&gt;
&lt;h4 id="orgd3077a6"&gt;&lt;span class="section-number-4"&gt;1.12.1.&lt;/span&gt; Images&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-12-1"&gt;
&lt;p&gt;
You can insert &lt;b&gt;image&lt;/b&gt; files of different &lt;b&gt;formats&lt;/b&gt; to a page:
&lt;/p&gt;

&lt;table&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt; &lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;HTML&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;PDF&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;gif&lt;/td&gt;
&lt;td class="org-left"&gt;yes&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;jpeg&lt;/td&gt;
&lt;td class="org-left"&gt;yes&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;png&lt;/td&gt;
&lt;td class="org-left"&gt;yes&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;bmp&lt;/td&gt;
&lt;td class="org-left"&gt;(depends on browser support)&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
In-line picture:
&lt;/p&gt;


&lt;figure id="org2d7fcf6"&gt;
&lt;img src="https://sdowney.org/images/org-mode-unicorn.png" alt="org-mode-unicorn.png"&gt;

&lt;figcaption&gt;&lt;span class="figure-number"&gt;Figure 1: &lt;/span&gt;Org mode logo&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;
Direct link to just the &lt;a href="https://sdowney.org/posts/all-syntax-example/org-mode-unicorn.png"&gt;Unicorn picture file&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
XXX Available HTML image tags include:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;align&lt;/li&gt;
&lt;li&gt;border&lt;/li&gt;
&lt;li&gt;bordercolor&lt;/li&gt;
&lt;li&gt;hspace&lt;/li&gt;
&lt;li&gt;vspace&lt;/li&gt;
&lt;li&gt;width&lt;/li&gt;
&lt;li&gt;height&lt;/li&gt;
&lt;li&gt;title&lt;/li&gt;
&lt;li&gt;alt&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Place images side by side: XXX
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org03167d2" class="outline-4"&gt;
&lt;h4 id="org03167d2"&gt;&lt;span class="section-number-4"&gt;1.12.2.&lt;/span&gt; Video&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-12-2"&gt;
&lt;p&gt;
Videos can't be added directly but you can add an image with a link to the video like this:
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg"&gt;http://www.youtube.com/watch?v=YOUTUBE&lt;sub&gt;VIDEO&lt;/sub&gt;&lt;sub&gt;ID&lt;/sub&gt;&lt;sub&gt;HERE&lt;/sub&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgee53945" class="outline-4"&gt;
&lt;h4 id="orgee53945"&gt;&lt;span class="section-number-4"&gt;1.12.3.&lt;/span&gt; Sounds&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org32c9dab" class="outline-3"&gt;
&lt;h3 id="org32c9dab"&gt;&lt;span class="section-number-3"&gt;1.13.&lt;/span&gt; Special text boxes&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-13"&gt;
&lt;p&gt;
Simple box ("inline task"): XXX
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org09e90e1" class="outline-4"&gt;
&lt;h4 id="org09e90e1"&gt;&lt;span class="section-number-4"&gt;1.13.1.&lt;/span&gt; Example&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-13-1"&gt;
&lt;p&gt;
You can have &lt;code&gt;example&lt;/code&gt; blocks.
&lt;/p&gt;

&lt;p&gt;
Find entries with an &lt;b&gt;exact phrase&lt;/b&gt; – To do this, put the phrase in quotes:
&lt;/p&gt;

&lt;pre class="example"&gt;
"hd ready"
&lt;/pre&gt;


&lt;p&gt;
You can create several other boxes (&lt;code&gt;info&lt;/code&gt;, &lt;code&gt;tip&lt;/code&gt;, &lt;code&gt;note&lt;/code&gt; or &lt;code&gt;warning&lt;/code&gt;) which all have
a different default image.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgba11987" class="outline-4"&gt;
&lt;h4 id="orgba11987"&gt;&lt;span class="section-number-4"&gt;1.13.2.&lt;/span&gt; Info&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-13-2"&gt;
&lt;p&gt;
An info box is displayed as follows:
&lt;/p&gt;

&lt;div class="info" id="org5c151f3"&gt;
&lt;p&gt;
&lt;b&gt;Info example&lt;/b&gt; &lt;br&gt;
Did you know…
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org02a0d33" class="outline-4"&gt;
&lt;h4 id="org02a0d33"&gt;&lt;span class="section-number-4"&gt;1.13.3.&lt;/span&gt; Tip&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-13-3"&gt;
&lt;p&gt;
A tip box is displayed as follows:
&lt;/p&gt;

&lt;div class="tip" id="org150ef15"&gt;
&lt;p&gt;
&lt;b&gt;Tip example&lt;/b&gt; &lt;br&gt;
Try doing it this way…
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org06d1def" class="outline-4"&gt;
&lt;h4 id="org06d1def"&gt;&lt;span class="section-number-4"&gt;1.13.4.&lt;/span&gt; Note&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-13-4"&gt;
&lt;p&gt;
A note box is displayed as follows:
&lt;/p&gt;

&lt;div class="note" id="orgb93c37e"&gt;
&lt;p&gt;
&lt;b&gt;Note example&lt;/b&gt; &lt;br&gt;
This is a useful note…
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge24fa81" class="outline-4"&gt;
&lt;h4 id="orge24fa81"&gt;&lt;span class="section-number-4"&gt;1.13.5.&lt;/span&gt; Warning&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-13-5"&gt;
&lt;p&gt;
A warning box is displayed as follows:
&lt;/p&gt;

&lt;div class="warning" id="org8180017"&gt;
&lt;p&gt;
&lt;b&gt;Warning example&lt;/b&gt; &lt;br&gt;
Be careful!  Check that you have…
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-links" class="outline-3"&gt;
&lt;h3 id="links"&gt;&lt;span class="section-number-3"&gt;1.14.&lt;/span&gt; Links&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-links"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgff263ee" class="outline-4"&gt;
&lt;h4 id="orgff263ee"&gt;&lt;span class="section-number-4"&gt;1.14.1.&lt;/span&gt; Anchors&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-14-1"&gt;
&lt;p&gt;
Links generally point to an headline.
&lt;/p&gt;

&lt;p&gt;
They can also point to a link anchor &lt;a id="org80de65e"&gt;&lt;/a&gt; in the current
document or in another document.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge2ada58" class="outline-4"&gt;
&lt;h4 id="orge2ada58"&gt;&lt;span class="section-number-4"&gt;1.14.2.&lt;/span&gt; Hyperlinks&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-14-2"&gt;
&lt;p&gt;
This document is available in &lt;a href="https://sdowney.org/posts/all-syntax-example/example.txt"&gt;plain text&lt;/a&gt;, &lt;a href="https://sdowney.org/posts/all-syntax-example/example.html"&gt;HTML&lt;/a&gt; and &lt;a href="https://sdowney.org/posts/all-syntax-example/example.pdf"&gt;PDF&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
The links are delimited by &lt;code&gt;[square brackets]&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;a id="org2bd5995"&gt;&lt;/a&gt;Internal links&lt;br&gt;
&lt;div class="outline-text-5" id="text-1-14-2-1"&gt;
&lt;p&gt;
See:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;chapter &lt;a href="https://sdowney.org/posts/all-syntax-example/#links"&gt;Links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;section &lt;a href="https://sdowney.org/posts/all-syntax-example/#orgff263ee"&gt;Anchors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/all-syntax-example/#org80de65e"&gt;target in the document&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="orgcf85519"&gt;&lt;/a&gt;External links&lt;br&gt;
&lt;div class="outline-text-5" id="text-1-14-2-2"&gt;
&lt;p&gt;
See the &lt;a href="http://orgmode.org/"&gt;Org mode Web site&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="mailto:concat.fni.at-sign.pirilampo.org"&gt;Mailto link&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5b16762" class="outline-2"&gt;
&lt;h2 id="org5b16762"&gt;&lt;span class="section-number-2"&gt;2.&lt;/span&gt; Org miscellaneous&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga26f86d" class="outline-3"&gt;
&lt;h3 id="orga26f86d"&gt;&lt;span class="section-number-3"&gt;2.1.&lt;/span&gt; Dates&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;p&gt;
Timestamps: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;[2014-01-16 Thu] &lt;/span&gt;&lt;/span&gt; and &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2014-01-16 Thu&amp;gt;&lt;/span&gt;&lt;/span&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org12ab715" class="outline-3"&gt;
&lt;h3 id="org12ab715"&gt;&lt;span class="section-number-3"&gt;2.2.&lt;/span&gt; &lt;span class="done DONE"&gt;DONE&lt;/span&gt; Buy GTD book   &lt;span class="tag"&gt;&lt;span class="online"&gt;online&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-2"&gt;
&lt;p&gt;
By default, &lt;code&gt;DONE&lt;/code&gt; actions will be collapsed.
&lt;/p&gt;

&lt;p&gt;
Note that I should probably implement that default behavior only for &lt;code&gt;ARCHIVE&lt;/code&gt;'d
items.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgca1e021" class="outline-3"&gt;
&lt;h3 id="orgca1e021"&gt;&lt;span class="section-number-3"&gt;2.3.&lt;/span&gt; &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; Read GTD book&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-3"&gt;
&lt;p&gt;
By default, &lt;b&gt;all&lt;/b&gt; (active) entries will be expanded at page load, so that their
contents is visible.
&lt;/p&gt;

&lt;p&gt;
That can be changed by adding such a line (into your Org document):
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-org"&gt;&lt;span class="org-org-meta-line"&gt;#+HTML_HEAD: &amp;lt;script&amp;gt; var HS_STARTUP_FOLDED = true; &amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2797a16" class="outline-3 hsCollapsed"&gt;
&lt;h3 id="org2797a16"&gt;&lt;span class="section-number-3"&gt;2.4.&lt;/span&gt; &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; Apply GTD methodoloy&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-4"&gt;
&lt;p&gt;
This section will be collapsed when loading the page because the entry has the
value &lt;code&gt;hsCollapsed&lt;/code&gt; for the property &lt;code&gt;:HTML_CONTAINER_CLASS:&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Powerful, no?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd73e541" class="outline-3"&gt;
&lt;h3 id="orgd73e541"&gt;&lt;span class="section-number-3"&gt;2.5.&lt;/span&gt; Some note   &lt;span class="tag"&gt;&lt;span class="computer"&gt;computer&lt;/span&gt; &lt;span class="write"&gt;write&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-5"&gt;
&lt;p&gt;
You can add tags to any entry, and hightlight all entries having some specific
tag by clicking on the buttons made accessible to you in the "Dashboard".
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6074e10" class="outline-3"&gt;
&lt;h3 id="org6074e10"&gt;&lt;span class="section-number-3"&gt;2.6.&lt;/span&gt; Weekly review   &lt;span class="tag"&gt;&lt;span class="computer"&gt;computer&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-6"&gt;
&lt;p&gt;
Now, you can even make your weekly review in the HTML export… Press the &lt;code&gt;r&lt;/code&gt; key
to start entering the "review mode" where all but one active entry are
collapsed, so that you can really focus on one item at a time!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6b83ace" class="outline-2"&gt;
&lt;h2 id="org6b83ace"&gt;&lt;span class="section-number-2"&gt;3.&lt;/span&gt; Org macros&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
&lt;span style="color: blue"&gt; This text is colored in blue.&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;span style="color: red"&gt; This other text is in red.&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
Find more macros on &lt;a href="https://github.com/fniessen/org-macros"&gt;GitHub&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc266123" class="outline-2"&gt;
&lt;h2 id="orgc266123"&gt;&lt;span class="section-number-2"&gt;4.&lt;/span&gt; BigBlow addons&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
The string &lt;code&gt;fixme&lt;/code&gt; (in &lt;b&gt;upper case&lt;/b&gt;) gets replaced by a "Fix Me!" image:
&lt;/p&gt;

&lt;p&gt;
FIXME Delete this…
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.myfootnote" class="footnum" href="https://sdowney.org/posts/all-syntax-example/#fnr.myfootnote" role="doc-backlink"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara" role="doc-footnote"&gt;&lt;p class="footpara"&gt;
Extensively used in large documents.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.2" class="footnum" href="https://sdowney.org/posts/all-syntax-example/#fnr.2" role="doc-backlink"&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara" role="doc-footnote"&gt;&lt;p class="footpara"&gt;
Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do
eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit
esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat
non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</description><guid>https://sdowney.org/posts/all-syntax-example/</guid><pubDate>Sun, 22 Dec 2024 21:27:04 GMT</pubDate></item><item><title>Empty Product Ranges</title><link>https://sdowney.org/posts/empty-product-ranges/</link><dc:creator>Steve Downey</dc:creator><description>&lt;ul class="org-ul"&gt;
&lt;li&gt;Document number: P2540R1&lt;/li&gt;
&lt;li&gt;Date:  2022-02-06&lt;/li&gt;
&lt;li&gt;Author: Steve Downey &amp;lt;sdowney2@bloomberg.net&amp;gt;, &amp;lt;sdowney@gmail.com&amp;gt;&lt;/li&gt;
&lt;li&gt;Audience: SG9, LEWG&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="ABSTRACT" id="orgae7fdbb"&gt;
&lt;p&gt;
Abstract: This paper argues that the Cartesian product of no ranges should be a single empty tuple, which is the identity element for Cartesian products. Other product-like views, however, should not automatically have their identity be the result, and in particular for &lt;code&gt;zip&lt;/code&gt;, as it would introduce unsound inconsistencies.
&lt;/p&gt;

&lt;/div&gt;
&lt;div id="outline-container-org6c64515" class="outline-2"&gt;
&lt;h2 id="org6c64515"&gt;&lt;span class="section-number-2"&gt;1.&lt;/span&gt; Motivation&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
A natural extension of a product of two things is to a product of \(n\) things, that is from \(P = A \times B\) to \(P = \prod_{i=1}^n a_i = a_1 \cdots  a_n\), where the \(\prod\) symbol stands for a repeated product, the same way that \(\sum\) stands for a repeated sum.
For \(n=1\), the expansion immediately suggests that \(P=a_1\), but the \(n=0\) case requires more care.
From the general rule that \(P_n a_{n+1}=P_{n+1}\), we have that \(P_0 a_1=a_1\), so \(P_0\) is the identity for the product.
This convention simplifies induction arguments and sometimes improves consistency with other well defined operations.
For example, having \(0^{0} = 1\), just as \(n^{0} = 1\) for all non-zero numbers, greatly simplifies Taylor series notation.
&lt;/p&gt;

&lt;p&gt;
Also note that we are assuming up to isomorphism for types, and in particular that \((a, b, c)\) is isomorphic to \(((a, b), c)\), and \((a, (b, c))\), and further that the unit type \(()\) does not contribute, so that \(((), a) \equiv (a) \equiv (a, ())\). That is there exists a simple and mechanical bijective mapping, one-to-one and onto, between the types.
&lt;/p&gt;

&lt;p&gt;
Making the empty product the identity element also puts &lt;code&gt;fold0&lt;/code&gt; on a sounder footing. We don't have to supply an identity element because the base case gives it to us automatically.
&lt;/p&gt;

&lt;p&gt;
The Cartesian product can also be viewed as the union of all relations between sets.
Any subset of the Cartesian product is a relation among the sets.
For any number of sets, there are always the trivial relations of \(\top\) (every combination is in the relation) and \(\bot\) (the relation is empty).
With zero sets, those are the only two relations, since there is no input variation on which the value might depend.
Accordingly, the Cartesian product of zero sets must have exactly one element (which is the empty tuple \(()\)) so as to have exactly the empty set and the whole set as relations.
&lt;/p&gt;

&lt;p&gt;
The most general definition of product comes from Category Theory, of course, where it is well studied. And an important result is that for a Category, such as sets, there is one universal operation that is the product. This should make us suspicious of extending the empty product ≡ identity rule to other operations.
&lt;/p&gt;

&lt;p&gt;
In particular, &lt;code&gt;zip&lt;/code&gt; has the property that it is the inner join of the indexed sets, and is the main diagonal of the Cartesian product. However, the identity element for &lt;code&gt;zip&lt;/code&gt; is &lt;code&gt;repeat(tuple&amp;lt;&amp;gt;)&lt;/code&gt;, the infinite range of repeated empty tuples. If we allowed &lt;code&gt;zip&lt;/code&gt; of an empty range of ranges to be its identity element, we would be introducing an inconsistency into the system, where two different formulations of notionally the same thing produces different answers. That would be bad.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0456b32" class="outline-2"&gt;
&lt;h2 id="org0456b32"&gt;&lt;span class="section-number-2"&gt;2.&lt;/span&gt; Proposal&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Specify that the Cartesian product of an empty range of ranges is a range of one element, which is the empty tuple, &lt;code&gt;std::tuple&amp;lt;&amp;gt;&lt;/code&gt;. The type &lt;code&gt;std::tuple&amp;lt;&amp;gt;&lt;/code&gt; is a monostate type, consisting of one element.
This design should &lt;b&gt;not&lt;/b&gt; be extended to zip. If it were to be defined, the zip of an empty range of ranges should be the diagonal of the Cartesian product, but this is not actually useful, since that is annihilating for &lt;code&gt;zip&lt;/code&gt;. It should be left undefined, as most operations on empty ranges are.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3072040" class="outline-2"&gt;
&lt;h2 id="org3072040"&gt;&lt;span class="section-number-2"&gt;3.&lt;/span&gt; Wording&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Wording is relative to p2374r3
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgdcc5b14" class="outline-3"&gt;
&lt;h3 id="orgdcc5b14"&gt;&lt;span class="section-number-3"&gt;3.1.&lt;/span&gt; Overview [range.cartesian.overview]&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-1"&gt;
&lt;p&gt;
&lt;code&gt;cartesian_product_view&lt;/code&gt; presents a view with a value type that represents the cartesian product of the adapted ranges.
&lt;/p&gt;

&lt;p&gt;
The name &lt;code&gt;views::cartesian_product&lt;/code&gt; denotes a customization point object. Given a pack of subexpressions &lt;code&gt;Es...&lt;/code&gt;, the expression &lt;code&gt;views::cartesian_product(Es...)&lt;/code&gt; is expression-equivalent to
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;del&gt;*decay-copy*(views::empty&amp;lt;tuple&amp;lt;&amp;gt;&amp;gt;)&lt;/del&gt; &lt;span class="underline"&gt;views::single(tuple())&lt;/span&gt; if Es is an empty pack,&lt;/li&gt;
&lt;li&gt;otherwise, cartesian_product_view&amp;lt;views::all_t&amp;lt;decltype((Es))&amp;gt;…&amp;gt;(Es…).&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8d79fdd" class="outline-2"&gt;
&lt;h2 id="org8d79fdd"&gt;&lt;span class="section-number-2"&gt;4.&lt;/span&gt; References&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
Reflector Discussion: [isocpp-lib-ext] zip and cartesian_product base case
&lt;a href="https://lists.isocpp.org/lib-ext/2022/01/22023.php"&gt;https://lists.isocpp.org/lib-ext/2022/01/22023.php&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Twitter: &lt;a href="https://twitter.com/sdowney/status/1482469504248598532"&gt;https://twitter.com/sdowney/status/1482469504248598532&lt;/a&gt; and ff
&lt;/p&gt;

&lt;p&gt;
Empty product - Wikipedia: &lt;a href="https://en.wikipedia.org/wiki/Empty_product"&gt;https://en.wikipedia.org/wiki/Empty_product&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
[P2374R3] Sy Brand, Michał Dominiak. 2021-12-13. views::cartesian_product
    &lt;a href="https://wg21.link/p2374r3"&gt;https://wg21.link/p2374r3&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://sdowney.org/posts/empty-product-ranges/</guid><pubDate>Sun, 22 Dec 2024 21:27:04 GMT</pubDate></item><item><title>Test two files</title><link>https://sdowney.org/posts/test-two-files/</link><dc:creator>Steve Downey</dc:creator><description>&lt;p&gt;
Write your post here.
&lt;/p&gt;</description><guid>https://sdowney.org/posts/test-two-files/</guid><pubDate>Sun, 22 Dec 2024 21:27:04 GMT</pubDate></item><item><title>Test base orgmode</title><link>https://sdowney.org/posts/test-base-orgmode/</link><dc:creator>Steve Downey</dc:creator><description>&lt;p&gt;
This is an Org mode document.
&lt;/p&gt;


&lt;p&gt;
&lt;b&gt;Org mode&lt;/b&gt; is a easy-to-write &lt;i&gt;plain text&lt;/i&gt; formatting syntax for authoring LaTeX
documents, creating Web pages and much more!
&lt;/p&gt;


&lt;div id="outline-container-orga571397" class="outline-2"&gt;
&lt;h2 id="orga571397"&gt;Basics&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga571397"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3def4f5" class="outline-3"&gt;
&lt;h3 id="org3def4f5"&gt;Biggest heading&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3def4f5"&gt;
&lt;p&gt;
New chapter.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1d9211b" class="outline-4"&gt;
&lt;h4 id="org1d9211b"&gt;Bigger heading&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org1d9211b"&gt;
&lt;p&gt;
New section.
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org16fa8c5"&gt;&lt;/a&gt;Big heading&lt;br&gt;
&lt;div class="outline-text-5" id="text-org16fa8c5"&gt;
&lt;p&gt;
New sub-section.
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="orgc9d9829"&gt;&lt;/a&gt;Text breaks&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgc9d9829"&gt;
&lt;p&gt;
A single newline has no effect.
This line is part of the same paragraph.
&lt;/p&gt;

&lt;p&gt;
But an empty line
&lt;/p&gt;

&lt;p&gt;
demarcates paragraphs.
&lt;/p&gt;

&lt;p&gt;
By entering two consecutive backslashes,
you can force to break lines &lt;br&gt;
without starting a new paragraph.
&lt;/p&gt;

&lt;p&gt;
For an horizontal line, insert at least 5 dashes: this is some text above an
horizontal rule
&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;
and some text below it.
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org365773b"&gt;&lt;/a&gt;Numbered headings&lt;br&gt;
&lt;div class="outline-text-5" id="text-org365773b"&gt;
&lt;p&gt;
You can create numbered headings up to a certain level by setting an option:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#+OPTIONS: H:4
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-org63a2986" class="outline-4"&gt;
&lt;h4 id="org63a2986"&gt;Text width&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org63a2986"&gt;
&lt;p&gt;
One morning, when Gregor Samsa woke from troubled dreams, he found himself
transformed in his bed into a horrible vermin. He lay on his armour-like back,
and if he lifted his head a little he could see his brown belly, slightly domed
and divided by arches into stiff sections. The bedding was hardly able to cover
it and seemed ready to slide off any moment. His many legs, pitifully thin
compared with the size of the rest of him, waved about helplessly as he looked.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6f1e6a9" class="outline-3"&gt;
&lt;h3 id="org6f1e6a9"&gt;Lists&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6f1e6a9"&gt;
&lt;p&gt;
Org markup allows you to create bulleted or numbered lists. It allows any
combination of the two list types.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgcbdd96c" class="outline-4"&gt;
&lt;h4 id="orgcbdd96c"&gt;Unordered lists&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgcbdd96c"&gt;
&lt;p&gt;
Itemized lists are marked with bullets. They are convenient to:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;organize data, and&lt;/li&gt;
&lt;li&gt;make the document
&lt;ul class="org-ul"&gt;
&lt;li&gt;prettier, and&lt;/li&gt;
&lt;li&gt;easier to read.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Create them with a minus or a plus sign.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6b23daa" class="outline-4"&gt;
&lt;h4 id="org6b23daa"&gt;Ordered lists&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org6b23daa"&gt;
&lt;p&gt;
Enumerated lists are marked with numbers or letters:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;First element
&lt;ol class="org-ol"&gt;
&lt;li&gt;First sub-item&lt;/li&gt;
&lt;li&gt;Last sub-item&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Second element&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
You can have ordered lists with jumping numbers:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li value="1"&gt;First&lt;/li&gt;
&lt;li value="2"&gt;Second&lt;/li&gt;
&lt;li value="5"&gt;Jump to 5th&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7f1c2b3" class="outline-4"&gt;
&lt;h4 id="org7f1c2b3"&gt;Definition lists&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org7f1c2b3"&gt;
&lt;dl class="org-dl"&gt;
&lt;dt&gt;Definition list&lt;/dt&gt;&lt;dd&gt;List containing definitions.&lt;/dd&gt;

&lt;dt&gt;Term to define&lt;/dt&gt;&lt;dd&gt;Explication of the term.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd60f1d7" class="outline-4"&gt;
&lt;h4 id="orgd60f1d7"&gt;Checkboxes&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgd60f1d7"&gt;
&lt;ul class="org-ul"&gt;
&lt;li class="off"&gt;&lt;code&gt;[ ]&lt;/code&gt; First item not checked&lt;/li&gt;
&lt;li class="trans"&gt;&lt;code&gt;[-]&lt;/code&gt; Second item half done
&lt;ul class="org-ul"&gt;
&lt;li class="off"&gt;&lt;code&gt;[ ]&lt;/code&gt; Another first&lt;/li&gt;
&lt;li class="off"&gt;&lt;code&gt;[ ]&lt;/code&gt; Another second&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class="on"&gt;&lt;code&gt;[X]&lt;/code&gt; Third item checked&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge6acec4" class="outline-3"&gt;
&lt;h3 id="orge6acec4"&gt;Miscellaneous effects&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge6acec4"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org40f84a9" class="outline-4"&gt;
&lt;h4 id="org40f84a9"&gt;Include Org files&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org40f84a9"&gt;
&lt;p&gt;
You can include another Org file and skip its title by using the &lt;code&gt;:lines&lt;/code&gt; argument
to &lt;code&gt;#+INCLUDE&lt;/code&gt;:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#+INCLUDE: chapter1.org :lines "2-"
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="note" id="org7c505be"&gt;
&lt;p&gt;
File inclusion, through INCLUDE keywords, is an &lt;b&gt;export-only feature&lt;/b&gt;.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1eee3dc" class="outline-4"&gt;
&lt;h4 id="org1eee3dc"&gt;Inline HTML&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org1eee3dc"&gt;
&lt;p&gt;
You can include raw HTML in your Org documents and it will get kept as HTML
when it's exported. XXX
&lt;/p&gt;

&lt;p&gt;
Text can be preformatted (in a fixed-width font).
&lt;/p&gt;
&lt;p&gt;
It is especially useful for more advanced stuff like images or tables where you
need more control of the HTML options than Org mode actually gives you.
&lt;/p&gt;

&lt;p&gt;
Similarly, you can incorporate JS or do anything else you can do in a Web page
(such as importing a CSS file).
&lt;/p&gt;

&lt;p&gt;
You can create named classes (to get style control from your CSS) with:
&lt;/p&gt;

&lt;pre class="example" id="org7390982"&gt;
#+begin_info
*Info example* \\
Did you know...
#+end_info
&lt;/pre&gt;

&lt;p&gt;
You can also add interactive elements to the HTML such as interactive R plots.
&lt;/p&gt;

&lt;p&gt;
Finally, you can include an HTML file verbatim (during export) with:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#+INCLUDE: file.html html
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Don't edit the exported HTML file!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbef490d" class="outline-4"&gt;
&lt;h4 id="orgbef490d"&gt;Inline LaTeX&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgbef490d"&gt;
&lt;p&gt;
You can also use raw LaTeX. XXX
&lt;/p&gt;

&lt;p&gt;
Text can be preformatted (in a fixed-width font).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org42f78aa" class="outline-4"&gt;
&lt;h4 id="org42f78aa"&gt;Centered text&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org42f78aa"&gt;
&lt;div class="org-center"&gt;
&lt;p&gt;
This text is centered!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb4cc92d" class="outline-3"&gt;
&lt;h3 id="orgb4cc92d"&gt;Code blocks&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb4cc92d"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org879b18f" class="outline-4"&gt;
&lt;h4 id="org879b18f"&gt;Syntax highlighting&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org879b18f"&gt;
&lt;p&gt;
The source code blocks support syntax highlighting:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * Application that displays a "Hello" message to the standard output.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;arc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, %s!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"World"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The following language strings are currently recognized:
&lt;/p&gt;

&lt;p&gt;
Awk, C, R, Asymptote, Calc, Clojure, CSS, Ditaa, Dot, Emacs Lisp, Fortran, Gnuplot, Haskell, IO, J, Java, Javascript, LaTeX, Ledger, Lilypond, Lisp, Makefile, Maxima, Matlab, Mscgen, Ocaml, Octave, Org, Perl, Pico Lisp, PlantUML, Python, Ruby, Sass, Scala, Scheme, Screen, Shell Script, Shen, Sql, Sqlite, ebnf2ps.
&lt;/p&gt;

&lt;p&gt;
Code block with long lines:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;testing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;testing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;testing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;testing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;testing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;testing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;testing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;testing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;testing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;testing&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="mi"&gt;123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
For PDF (LaTeX), one  solution is to surround the code  block such as:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This block is in scriptsize"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc0e2503" class="outline-4"&gt;
&lt;h4 id="orgc0e2503"&gt;Line numbers&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgc0e2503"&gt;
&lt;p&gt;
Both in &lt;code&gt;example&lt;/code&gt; and in &lt;code&gt;src&lt;/code&gt; snippets, you can add a &lt;code&gt;-n&lt;/code&gt; switch to the end of the
&lt;code&gt;begin&lt;/code&gt; line, to get the lines of the example numbered.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;org-xor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;"Exclusive or."&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
If you use a &lt;code&gt;+n&lt;/code&gt; switch, the numbering from the previous numbered snippet will
be continued in the current one:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
In literal examples, Org will interpret strings like &lt;code&gt;(ref:name)&lt;/code&gt; as labels, and
use them as targets for special hyperlinks like &lt;code&gt;[[(name)]]&lt;/code&gt; (i.e., the reference
name enclosed in single parenthesis).  In HTML, hovering the mouse over such
a link will remote-highlight the corresponding code line, which is kind of
cool.
&lt;/p&gt;

&lt;p&gt;
You can also add a &lt;code&gt;-r&lt;/code&gt; switch which removes the labels from the source code.
With the &lt;code&gt;-n&lt;/code&gt; switch, links to these references will be labeled by the line
numbers from the code listing, otherwise links will use the labels with no
parentheses.  Here is an example:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;save-excursion&lt;/span&gt;&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="c1"&gt;; (ref:sc)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;goto-char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point-min&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="c1"&gt;; (ref:jump)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
In line &lt;a href="https://sdowney.org/posts/test-base-orgmode/#coderef-sc" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-sc');" onmouseout="CodeHighlightOff(this, 'coderef-sc');"&gt;1&lt;/a&gt;, we remember the current position.  &lt;a href="https://sdowney.org/posts/test-base-orgmode/#coderef-jump" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-jump');" onmouseout="CodeHighlightOff(this, 'coderef-jump');"&gt;Line 2&lt;/a&gt; jumps to
&lt;code&gt;point-min&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org41e59e6" class="outline-4"&gt;
&lt;h4 id="org41e59e6"&gt;Output&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org41e59e6"&gt;
&lt;p&gt;
The output from the &lt;b&gt;execution&lt;/b&gt; of programs, scripts or commands can be inserted
in the document itself, allowing you to work in the &lt;i&gt;reproducible research&lt;/i&gt;
mindset.
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="orga69146f"&gt;&lt;/a&gt;Text&lt;br&gt;
&lt;div class="outline-text-5" id="text-orga69146f"&gt;
&lt;p&gt;
A one-liner result:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;date&lt;span class="w"&gt; &lt;/span&gt;+&lt;span class="s2"&gt;"%Y-%m-%d"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
2014-03-15
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org291df57"&gt;&lt;/a&gt;Graphics&lt;br&gt;
&lt;div class="outline-text-5" id="text-org291df57"&gt;
&lt;p&gt;
Data to be charted:
&lt;/p&gt;

&lt;table id="org231376c" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;Month&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Degrees&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;3.8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;4.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;td class="org-right"&gt;6.3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;td class="org-right"&gt;9.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;5&lt;/td&gt;
&lt;td class="org-right"&gt;11.9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;6&lt;/td&gt;
&lt;td class="org-right"&gt;15.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;7&lt;/td&gt;
&lt;td class="org-right"&gt;17.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;8&lt;/td&gt;
&lt;td class="org-right"&gt;17.4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;9&lt;/td&gt;
&lt;td class="org-right"&gt;15.7&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;10&lt;/td&gt;
&lt;td class="org-right"&gt;11.8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;11&lt;/td&gt;
&lt;td class="org-right"&gt;7.7&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;12&lt;/td&gt;
&lt;td class="org-right"&gt;4.8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Code:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"l"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"#ABD249"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;las&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ny&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"#E8E8E8"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"bottom"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Degrees"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"#ABD249"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;19&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The resulting chart:
&lt;/p&gt;


&lt;div id="org88d7ee1" class="figure"&gt;
&lt;p&gt;&lt;img src="https://sdowney.org/posts/test-base-orgmode/images/Rplot.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org446557a"&gt;&lt;/a&gt;R code block&lt;br&gt;
&lt;div class="outline-text-5" id="text-org446557a"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ggplot2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Plot:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ggplot2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;qplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;geom_smooth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb2c2660" class="outline-3"&gt;
&lt;h3 id="orgb2c2660"&gt;Inline code&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb2c2660"&gt;
&lt;p&gt;
You can also evaluate code inline as follows: 1 + 1 is .
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge0a67ac" class="outline-3"&gt;
&lt;h3 id="orge0a67ac"&gt;Notes at the footer&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge0a67ac"&gt;
&lt;p&gt;
It is possible to define named footnotes&lt;sup&gt;&lt;a id="fnr.1" class="footref" href="https://sdowney.org/posts/test-base-orgmode/#fn.1" role="doc-backlink"&gt;1&lt;/a&gt;&lt;/sup&gt;, or ones with
automatic anchors&lt;sup&gt;&lt;a id="fnr.2" class="footref" href="https://sdowney.org/posts/test-base-orgmode/#fn.2" role="doc-backlink"&gt;2&lt;/a&gt;&lt;/sup&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7680c85" class="outline-3"&gt;
&lt;h3 id="org7680c85"&gt;Formatting text&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7680c85"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgeb67d37" class="outline-4"&gt;
&lt;h4 id="orgeb67d37"&gt;Text effects&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgeb67d37"&gt;
&lt;p&gt;
&lt;i&gt;Emphasize&lt;/i&gt; (italics), &lt;b&gt;strongly&lt;/b&gt; (bold), and &lt;b&gt;&lt;i&gt;very strongly&lt;/i&gt;&lt;/b&gt; (bold italics).
&lt;/p&gt;

&lt;p&gt;
Markup elements could be nested: this is &lt;i&gt;italic text which contains
&lt;span class="underline"&gt;underlined text&lt;/span&gt; within it&lt;/i&gt;, whereas &lt;span class="underline"&gt;this is normal underlined text&lt;/span&gt;.
&lt;/p&gt;

&lt;p&gt;
Markup can span across multiple lines, by default &lt;b&gt;no more than 2&lt;/b&gt;:
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;This
is not
bold&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
Other elements to use sparingly are:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;monospaced typewriter font for &lt;code&gt;inline code&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;monospaced typewriter font for &lt;code&gt;verbatim text&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;deleted&lt;/del&gt; text (vs. &lt;span class="underline"&gt;inserted&lt;/span&gt; text)&lt;/li&gt;
&lt;li&gt;text with&lt;sup&gt;superscript&lt;/sup&gt; (for example: &lt;code&gt;m/s^{2}&lt;/code&gt; gives m/s&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;text with&lt;sub&gt;subscript&lt;/sub&gt; (for example: &lt;code&gt;H_{2}O&lt;/code&gt; gives H&lt;sub&gt;2&lt;/sub&gt;O)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4d54e98" class="outline-4"&gt;
&lt;h4 id="org4d54e98"&gt;Quotations&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org4d54e98"&gt;
&lt;p&gt;
Use the &lt;code&gt;quote&lt;/code&gt; block to typeset quoted text.
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Let us change our traditional attitude to the construction of programs:
Instead of imagining that our main task is to instruct a computer what to do,
let us concentrate rather on explaining to human beings what we want a
computer to do.
&lt;/p&gt;

&lt;p&gt;
The practitioner of literate programming can be regarded as an essayist, whose
main concern is with exposition and excellence of style. Such an author, with
thesaurus in hand, chooses the names of variables carefully and explains what
each variable means. He or she strives for a program that is comprehensible
because its concepts have been introduced in an order that is best for human
understanding, using a mixture of formal and informal methods that reinforce
each other.
&lt;/p&gt;

&lt;p&gt;
— Donald Knuth
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
A short one:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Everything should be made as simple as possible,
but not any simpler – Albert Einstein
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
In a &lt;code&gt;verse&lt;/code&gt; environment, there is an implicit line break at the end of each
line, and indentation and vertical space are preserved:
&lt;/p&gt;

&lt;p class="verse"&gt;
Everything should be made as simple as possible,&lt;br&gt;
but not any simpler – Albert Einstein&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
Typically used for quoting passages of an email message:
&lt;/p&gt;

&lt;p class="verse"&gt;
&amp;gt;&amp;gt; This is an email message with "nested" quoting. Lorem ipsum dolor sit amet,&lt;br&gt;
&amp;gt;&amp;gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.&lt;br&gt;
&amp;gt;&amp;gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&lt;br&gt;
&amp;gt;&lt;br&gt;
&amp;gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem&lt;br&gt;
&amp;gt; consectetuer libero luctus adipiscing.&lt;br&gt;
&lt;br&gt;
Itemized or unordered lists (&lt;code&gt;ul&lt;/code&gt;):&lt;br&gt;
- This is the first list item.&lt;br&gt;
- This is the second list item.&lt;br&gt;
&lt;br&gt;
Enumerated or ordered Lists (&lt;code&gt;ol&lt;/code&gt;):&lt;br&gt;
1. This is the first list item.&lt;br&gt;
2. This is the second list item.&lt;br&gt;
&lt;br&gt;
Maybe an equation here?&lt;br&gt;
&lt;br&gt;
See &lt;a href="http://www.google.com/"&gt;http://www.google.com/&lt;/a&gt; for more information…&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf3cf3ff" class="outline-4"&gt;
&lt;h4 id="orgf3cf3ff"&gt;Spaces&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgf3cf3ff"&gt;
&lt;p&gt;
Using non-breaking spaces.
&lt;/p&gt;

&lt;p&gt;
Insert the Unicode character &lt;code&gt;00A0&lt;/code&gt; to add a non-breaking space. FIXME
Or add/use an Org entity?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org16c2aa1" class="outline-3"&gt;
&lt;h3 id="org16c2aa1"&gt;Mathematical formulae&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org16c2aa1"&gt;
&lt;p&gt;
You can embed LaTeX math formatting in Org mode files using the following
syntax:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
For &lt;b&gt;inline math&lt;/b&gt; expressions, use &lt;code&gt;\(...\)&lt;/code&gt;: \(x^2\) or \(1 &amp;lt; 2\).
&lt;/p&gt;

&lt;p&gt;
It's &lt;i&gt;not&lt;/i&gt; advised to use the constructs &lt;code&gt;$...$&lt;/code&gt; (both for Org and MathJax).
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
Centered display equation (the &lt;i&gt;Euler theorem&lt;/i&gt;):
&lt;/p&gt;

&lt;p&gt;
\[
  \int_0^\infty e^{-x^2} dx = {{\sqrt{\pi}} \over {2}}
  \]
&lt;/p&gt;

&lt;p&gt;
The use of &lt;code&gt;\[...\]&lt;/code&gt; is for mathematical expressions which you want to make
&lt;b&gt;stand out, on their own lines&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
LaTeX allows to inline such &lt;code&gt;\[...\]&lt;/code&gt; constructs (&lt;i&gt;quadratic formula&lt;/i&gt;):
\[ \frac{-b \pm \sqrt{b^2 - 4 a c}}{2a} \]
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Double dollar signs (&lt;code&gt;$$&lt;/code&gt;) should not be used&lt;/b&gt;.
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
The &lt;i&gt;sinus theorem&lt;/i&gt; can then be written as the equation:
&lt;/p&gt;

\begin{equation}
\label{eqn:sinalpha}
\frac{\sin\alpha}{a}=\frac{\sin\beta}{b}
\end{equation}&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
See Equation \eqref{orgd3612df},
&lt;/p&gt;

\begin{equation}
\label{orgd3612df}
n_{i+1} = \frac{n_{i} (d-i) (e-1)}{(i+1)}
\end{equation}

&lt;p&gt;
Only captioned equations are numbered
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;Other alternative: use \begin{equation*} or \begin{displaymath} (= the verbose
form of the &lt;code&gt;\[...\]&lt;/code&gt; construct). M-q does not fill those.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Differently from $…$ and \(...\), an equation environment produces a &lt;b&gt;numbered&lt;/b&gt;
equation to which you can add a label and reference the equation by (label)
name in other parts of the text. This is not possibly with unnumbered math
environments ($$, …).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6c4e34a" class="outline-3"&gt;
&lt;h3 id="org6c4e34a"&gt;Special characters&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6c4e34a"&gt;
&lt;p&gt;
Some of the widely used special characters (converted from text characters to
their typographically correct entitites):
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2955c74" class="outline-4"&gt;
&lt;h4 id="org2955c74"&gt;Accents&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org2955c74"&gt;
&lt;p&gt;
À Á
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8a538ee" class="outline-4"&gt;
&lt;h4 id="org8a538ee"&gt;Punctuation&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org8a538ee"&gt;
&lt;p&gt;
Dash: – —
&lt;/p&gt;

&lt;p&gt;
Marks: ¡ ¿
&lt;/p&gt;

&lt;p&gt;
Quotations: « »
&lt;/p&gt;

&lt;p&gt;
Miscellaneous: ¶ ª
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9d1b281" class="outline-4"&gt;
&lt;h4 id="org9d1b281"&gt;Commercial symbols&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org9d1b281"&gt;
&lt;p&gt;
Property marks: © ®
&lt;/p&gt;

&lt;p&gt;
Currency: ¢ € ¥ £
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga1250e5" class="outline-4"&gt;
&lt;h4 id="orga1250e5"&gt;Greek characters&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orga1250e5"&gt;
&lt;p&gt;
The Greek letters α, β, and γ are used to denote angles.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2d501e2" class="outline-4"&gt;
&lt;h4 id="org2d501e2"&gt;Math characters&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org2d501e2"&gt;
&lt;p&gt;
Science: ± ÷
&lt;/p&gt;

&lt;p&gt;
Arrows: → → ← ↔ ⇒ ⇐ ⇔
&lt;/p&gt;

&lt;p&gt;
Function names: arccos cos
&lt;/p&gt;

&lt;p&gt;
Signs and symbols: • *
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4d7cc9c" class="outline-4"&gt;
&lt;h4 id="org4d7cc9c"&gt;Misc&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org4d7cc9c"&gt;
&lt;p&gt;
Suits: ♣ ♠
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf4bf3dd" class="outline-3"&gt;
&lt;h3 id="orgf4bf3dd"&gt;Comments&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf4bf3dd"&gt;
&lt;p&gt;
It's possible to add comments in the document.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7265397" class="outline-3"&gt;
&lt;h3 id="org7265397"&gt;Tables&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7265397"&gt;
&lt;p&gt;
You can create tables with an optional header row (by using an horizontal line
of dashes to separate it from the rest of the table).
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;
&lt;caption class="t-above"&gt;&lt;span class="table-number"&gt;Table 1:&lt;/span&gt; An example of table&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Header 1&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Header 2&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Header 3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;Top left&lt;/td&gt;
&lt;td class="org-left"&gt;Top middle&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;td class="org-left"&gt;Right&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Bottom left&lt;/td&gt;
&lt;td class="org-left"&gt;Bottom middle&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Columns are automatically aligned:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Number-rich columns to the right, and&lt;/li&gt;
&lt;li&gt;String-rich columns to the left.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
If you want to override the automatic alignment, use &lt;code&gt;&amp;lt;r&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;c&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;l&amp;gt;&lt;/code&gt;.
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;
&lt;caption class="t-above"&gt;&lt;span class="table-number"&gt;Table 2:&lt;/span&gt; Table with alignment&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-center"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-center"&gt;2&lt;/td&gt;
&lt;td class="org-left"&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;right&lt;/td&gt;
&lt;td class="org-center"&gt;center&lt;/td&gt;
&lt;td class="org-left"&gt;left&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;xxxxxxxxxxxx&lt;/td&gt;
&lt;td class="org-center"&gt;xxxxxxxxxxxx&lt;/td&gt;
&lt;td class="org-left"&gt;xxxxxxxxxxxx&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Placement:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;a&lt;/td&gt;
&lt;td class="org-right"&gt;b&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
XXX
Different from the following:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;a&lt;/td&gt;
&lt;td class="org-right"&gt;b&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgebd31da" class="outline-4"&gt;
&lt;h4 id="orgebd31da"&gt;Align tables on the page&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgebd31da"&gt;
&lt;p&gt;
Here is a table on the left side:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;a&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;b&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;c&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;td class="org-right"&gt;5&lt;/td&gt;
&lt;td class="org-right"&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
The noindent just gets rid of the indentation of the first line of a paragraph
which in this case is the table. The hfill adds infinite stretch after the
table, so it pushes the table to the left.
&lt;/p&gt;

&lt;p&gt;
Here is a centered table:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;a&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;b&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;c&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;td class="org-right"&gt;5&lt;/td&gt;
&lt;td class="org-right"&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
And here's a table on the right side:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;a&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;b&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;c&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;td class="org-right"&gt;5&lt;/td&gt;
&lt;td class="org-right"&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Here the hfill adds infinite stretch before the table, so it pushes the table
to the right.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org00ef275" class="outline-3"&gt;
&lt;h3 id="org00ef275"&gt;Images, video and audio&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org00ef275"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga9cb51a" class="outline-4"&gt;
&lt;h4 id="orga9cb51a"&gt;Images&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orga9cb51a"&gt;
&lt;p&gt;
You can insert &lt;b&gt;image&lt;/b&gt; files of different &lt;b&gt;formats&lt;/b&gt; to a page:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt; &lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;HTML&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;PDF&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;gif&lt;/td&gt;
&lt;td class="org-left"&gt;yes&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;jpeg&lt;/td&gt;
&lt;td class="org-left"&gt;yes&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;png&lt;/td&gt;
&lt;td class="org-left"&gt;yes&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;bmp&lt;/td&gt;
&lt;td class="org-left"&gt;(depends on browser support)&lt;/td&gt;
&lt;td class="org-left"&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
In-line picture:
&lt;/p&gt;


&lt;div id="orgeca0f9a" class="figure"&gt;
&lt;p&gt;&lt;img src="https://sdowney.org/posts/test-base-orgmode/images/org-mode-unicorn.png" alt="nil"&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 1: &lt;/span&gt;Org mode logo&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Direct link to just the &lt;img src="https://sdowney.org/org-mode-unicorn.png" alt="Unicorn picture file"&gt;.
&lt;/p&gt;

&lt;p&gt;
XXX Available HTML image tags include:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;align&lt;/li&gt;
&lt;li&gt;border&lt;/li&gt;
&lt;li&gt;bordercolor&lt;/li&gt;
&lt;li&gt;hspace&lt;/li&gt;
&lt;li&gt;vspace&lt;/li&gt;
&lt;li&gt;width&lt;/li&gt;
&lt;li&gt;height&lt;/li&gt;
&lt;li&gt;title&lt;/li&gt;
&lt;li&gt;alt&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Place images side by side: XXX
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org38065df" class="outline-4"&gt;
&lt;h4 id="org38065df"&gt;Video&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org38065df"&gt;
&lt;p&gt;
Videos can't be added directly but you can add an image with a link to the video like this:
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg"&gt;http://www.youtube.com/watch?v=YOUTUBE&lt;sub&gt;VIDEO&lt;/sub&gt;&lt;sub&gt;ID&lt;/sub&gt;&lt;sub&gt;HERE&lt;/sub&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org07b8206" class="outline-4"&gt;
&lt;h4 id="org07b8206"&gt;Sounds&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0a41d74" class="outline-3"&gt;
&lt;h3 id="org0a41d74"&gt;Special text boxes&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0a41d74"&gt;
&lt;p&gt;
Simple box ("inline task"): XXX
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb049199" class="outline-4"&gt;
&lt;h4 id="orgb049199"&gt;Example&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgb049199"&gt;
&lt;p&gt;
You can have &lt;code&gt;example&lt;/code&gt; blocks.
&lt;/p&gt;

&lt;p&gt;
Find entries with an &lt;b&gt;exact phrase&lt;/b&gt; – To do this, put the phrase in quotes:
&lt;/p&gt;

&lt;pre class="example"&gt;
"hd ready"
&lt;/pre&gt;


&lt;p&gt;
You can create several other boxes (&lt;code&gt;info&lt;/code&gt;, &lt;code&gt;tip&lt;/code&gt;, &lt;code&gt;note&lt;/code&gt; or &lt;code&gt;warning&lt;/code&gt;) which all have
a different default image.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7b29dd1" class="outline-4"&gt;
&lt;h4 id="org7b29dd1"&gt;Info&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org7b29dd1"&gt;
&lt;p&gt;
An info box is displayed as follows:
&lt;/p&gt;

&lt;div class="info" id="orgb35f84f"&gt;
&lt;p&gt;
&lt;b&gt;Info example&lt;/b&gt; &lt;br&gt;
Did you know…
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1224401" class="outline-4"&gt;
&lt;h4 id="org1224401"&gt;Tip&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org1224401"&gt;
&lt;p&gt;
A tip box is displayed as follows:
&lt;/p&gt;

&lt;div class="tip" id="orgfc14b12"&gt;
&lt;p&gt;
&lt;b&gt;Tip example&lt;/b&gt; &lt;br&gt;
Try doing it this way…
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org11091d5" class="outline-4"&gt;
&lt;h4 id="org11091d5"&gt;Note&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org11091d5"&gt;
&lt;p&gt;
A note box is displayed as follows:
&lt;/p&gt;

&lt;div class="note" id="org9346963"&gt;
&lt;p&gt;
&lt;b&gt;Note example&lt;/b&gt; &lt;br&gt;
This is a useful note…
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8e81d84" class="outline-4"&gt;
&lt;h4 id="org8e81d84"&gt;Warning&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org8e81d84"&gt;
&lt;p&gt;
A warning box is displayed as follows:
&lt;/p&gt;

&lt;div class="warning" id="org7bfef49"&gt;
&lt;p&gt;
&lt;b&gt;Warning example&lt;/b&gt; &lt;br&gt;
Be careful!  Check that you have…
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-links" class="outline-3"&gt;
&lt;h3 id="links"&gt;Links&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-links"&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3160b9b" class="outline-4"&gt;
&lt;h4 id="org3160b9b"&gt;Anchors&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org3160b9b"&gt;
&lt;p&gt;
Links generally point to an headline.
&lt;/p&gt;

&lt;p&gt;
They can also point to a link anchor &lt;a id="org8d2336a"&gt;&lt;/a&gt; in the current
document or in another document.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8c0256b" class="outline-4"&gt;
&lt;h4 id="org8c0256b"&gt;Hyperlinks&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org8c0256b"&gt;
&lt;p&gt;
This document is available in &lt;img src="https://sdowney.org/example.txt" alt="plain text"&gt;, &lt;img src="https://sdowney.org/example.html" alt="HTML"&gt; and &lt;img src="https://sdowney.org/example.pdf" alt="PDF"&gt;.
&lt;/p&gt;

&lt;p&gt;
The links are delimited by &lt;code&gt;[square brackets]&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org0034085"&gt;&lt;/a&gt;Internal links&lt;br&gt;
&lt;div class="outline-text-5" id="text-org0034085"&gt;
&lt;p&gt;
See:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;chapter &lt;a href="https://sdowney.org/posts/test-base-orgmode/#links"&gt;Links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;section &lt;a href="https://sdowney.org/posts/test-base-orgmode/#org3160b9b"&gt;Anchors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/test-base-orgmode/#org8d2336a"&gt;target in the document&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="orgb2d4083"&gt;&lt;/a&gt;External links&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgb2d4083"&gt;
&lt;p&gt;
See the &lt;a href="http://orgmode.org/"&gt;Org mode Web site&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="mailto:concat.fni.at-sign.pirilampo.org"&gt;Mailto link&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org75055b8" class="outline-2"&gt;
&lt;h2 id="org75055b8"&gt;Org miscellaneous&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org75055b8"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org250477a" class="outline-3"&gt;
&lt;h3 id="org250477a"&gt;Dates&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org250477a"&gt;
&lt;p&gt;
Timestamps: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;[2014-01-16 Thu] &lt;/span&gt;&lt;/span&gt; and &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2014-01-16 Thu&amp;gt;&lt;/span&gt;&lt;/span&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf703c9b" class="outline-3"&gt;
&lt;h3 id="orgf703c9b"&gt;&lt;span class="done DONE"&gt;DONE&lt;/span&gt; Buy GTD book   &lt;span class="tag"&gt;&lt;span class="online"&gt;online&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf703c9b"&gt;
&lt;p&gt;
By default, &lt;code&gt;DONE&lt;/code&gt; actions will be collapsed.
&lt;/p&gt;

&lt;p&gt;
Note that I should probably implement that default behavior only for &lt;code&gt;ARCHIVE&lt;/code&gt;'d
items.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org73e7e59" class="outline-3"&gt;
&lt;h3 id="org73e7e59"&gt;&lt;span class="todo TODO"&gt;TODO&lt;/span&gt; Read GTD book&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org73e7e59"&gt;
&lt;p&gt;
By default, &lt;b&gt;all&lt;/b&gt; (active) entries will be expanded at page load, so that their
contents is visible.
&lt;/p&gt;

&lt;p&gt;
That can be changed by adding such a line (into your Org document):
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#+HTML_HEAD: &amp;lt;script&amp;gt; var HS_STARTUP_FOLDED = true; &amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga22cd89" class="outline-3 hsCollapsed"&gt;
&lt;h3 id="orga22cd89"&gt;&lt;span class="todo TODO"&gt;TODO&lt;/span&gt; Apply GTD methodoloy&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga22cd89"&gt;
&lt;p&gt;
This section will be collapsed when loading the page because the entry has the
value &lt;code&gt;hsCollapsed&lt;/code&gt; for the property &lt;code&gt;:HTML_CONTAINER_CLASS:&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Powerful, no?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org469db4b" class="outline-3"&gt;
&lt;h3 id="org469db4b"&gt;Some note   &lt;span class="tag"&gt;&lt;span class="computer"&gt;computer&lt;/span&gt; &lt;span class="write"&gt;write&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org469db4b"&gt;
&lt;p&gt;
You can add tags to any entry, and hightlight all entries having some specific
tag by clicking on the buttons made accessible to you in the "Dashboard".
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org54ef24b" class="outline-3"&gt;
&lt;h3 id="org54ef24b"&gt;Weekly review   &lt;span class="tag"&gt;&lt;span class="computer"&gt;computer&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org54ef24b"&gt;
&lt;p&gt;
Now, you can even make your weekly review in the HTML export… Press the &lt;code&gt;r&lt;/code&gt; key
to start entering the "review mode" where all but one active entry are
collapsed, so that you can really focus on one item at a time!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6b140fa" class="outline-2"&gt;
&lt;h2 id="org6b140fa"&gt;Org macros&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6b140fa"&gt;
&lt;p&gt;
Find more macros on &lt;a href="https://github.com/fniessen/org-macros"&gt;GitHub&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb6e9da2" class="outline-2"&gt;
&lt;h2 id="orgb6e9da2"&gt;BigBlow addons&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb6e9da2"&gt;
&lt;p&gt;
The string &lt;code&gt;fixme&lt;/code&gt; (in &lt;b&gt;upper case&lt;/b&gt;) gets replaced by a "Fix Me!" image:
&lt;/p&gt;

&lt;p&gt;
FIXME Delete this…
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" class="footnum" href="https://sdowney.org/posts/test-base-orgmode/#fnr.1" role="doc-backlink"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara" role="doc-footnote"&gt;&lt;p class="footpara"&gt;
Extensively used in large documents.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.2" class="footnum" href="https://sdowney.org/posts/test-base-orgmode/#fnr.2" role="doc-backlink"&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara" role="doc-footnote"&gt;&lt;p class="footpara"&gt;
Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do
eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit
esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat
non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</description><guid>https://sdowney.org/posts/test-base-orgmode/</guid><pubDate>Wed, 18 Dec 2024 04:38:19 GMT</pubDate></item><item><title>Concept Maps using C++23 Library Tech</title><link>https://sdowney.org/posts/index.php/2024/05/19/concept-maps-using-c23-library-tech/</link><dc:creator>Steve Downey</dc:creator><description>&lt;div id="outline-container-orga2bfebe" class="outline-2"&gt;
&lt;h3 id="orga2bfebe"&gt;Abstract&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orga2bfebe"&gt;
&lt;p&gt; C++0x Concepts had a feature &lt;code&gt;Concept Maps&lt;/code&gt; that allowed a set of functions, types, and template definitions to be associated with a concept and the map to be specialized for types that meet the concept. &lt;/p&gt;

&lt;p&gt; This allowed open extension of a concept. &lt;/p&gt;

&lt;!-- TEASER_END --&gt;

&lt;p&gt; A definition could be provided that allows an algorithm to operate in terms of the API a concept presents and the map would define how those operations are implemented for a particular type. &lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;This is similar to how Haskell's &lt;code&gt;typeclass&lt;/code&gt; works.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="notes" id="orgfd6f34c"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org55a2fab" class="outline-3"&gt;
&lt;h4 id="org55a2fab"&gt;Lost with &lt;code&gt;Concepts-Lite&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org55a2fab"&gt;
&lt;div class="notes" id="org7de7f73"&gt;
&lt;p&gt; The feature was very general, and lost as part of the &lt;code&gt;Concepts-Lite&lt;/code&gt; proposal that was eventually adopted. &lt;/p&gt;

&lt;p&gt; This loss of a level of indirection means that the APIs for a concept must be implemented by those names for a type, even when those names are not particularly good choices in the natural domain of a type rather than in the domain as a concept. &lt;/p&gt;

&lt;p&gt; The proliferation of &lt;code&gt;transform&lt;/code&gt; functions for functorial &lt;code&gt;map&lt;/code&gt; is such a problem. &lt;/p&gt;

&lt;p&gt; It is also a problem when adapting types that are closed for extension or do not permit member functions. &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1170181" class="outline-2"&gt;
&lt;h3 id="org1170181"&gt;Why?&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org1170181"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt; Don't know if you should &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Need to know if you could first&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="notes" id="org00d3ad4"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgec4f485" class="outline-3"&gt;
&lt;h4 id="orgec4f485"&gt;Alternatives&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-orgec4f485"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt; Virtual Interface &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt; Adapters &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Collection of CPOs&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="notes" id="org1416f27"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org63dbb2f" class="outline-3"&gt;
&lt;h4 id="org63dbb2f"&gt;Hard to Support&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org63dbb2f"&gt;
&lt;div class="notes" id="org0c07886"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga340186" class="outline-2"&gt;
&lt;h3 id="orga340186"&gt;Example from C++0x Concepts&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orga340186"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org28ca89a" class="outline-3"&gt;
&lt;h4 id="org28ca89a"&gt;Student Record&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org28ca89a"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-C++" id="nil"&gt;&lt;span class="org-keyword"&gt;class&lt;/span&gt; &lt;span class="org-type"&gt;student&lt;/span&gt; &lt;span class="org-type"&gt;record&lt;/span&gt; {
&lt;span class="org-keyword"&gt;public&lt;/span&gt;:
  &lt;span class="org-type"&gt;string&lt;/span&gt; &lt;span class="org-variable-name"&gt;id&lt;/span&gt;;
  &lt;span class="org-type"&gt;string&lt;/span&gt; &lt;span class="org-variable-name"&gt;name&lt;/span&gt;;
  &lt;span class="org-type"&gt;string&lt;/span&gt; &lt;span class="org-variable-name"&gt;address&lt;/span&gt;;
  &lt;span class="org-type"&gt;bool&lt;/span&gt;   &lt;span class="org-function-name"&gt;id_equal&lt;/span&gt;(&lt;span class="org-keyword"&gt;const&lt;/span&gt; &lt;span class="org-type"&gt;student&lt;/span&gt; &lt;span class="org-type"&gt;record&lt;/span&gt;&amp;amp;);
  &lt;span class="org-type"&gt;bool&lt;/span&gt;   &lt;span class="org-function-name"&gt;name_equal&lt;/span&gt;(&lt;span class="org-keyword"&gt;const&lt;/span&gt; &lt;span class="org-type"&gt;student&lt;/span&gt; &lt;span class="org-type"&gt;record&lt;/span&gt;&amp;amp;);
  &lt;span class="org-type"&gt;bool&lt;/span&gt;   &lt;span class="org-function-name"&gt;address_equal&lt;/span&gt;(&lt;span class="org-keyword"&gt;const&lt;/span&gt; &lt;span class="org-type"&gt;student&lt;/span&gt; &lt;span class="org-type"&gt;record&lt;/span&gt;&amp;amp;);
};
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="notes" id="org3e8c3d9"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgaaad96e" class="outline-3"&gt;
&lt;h4 id="orgaaad96e"&gt;Equality Comparable&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-orgaaad96e"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="org-type"&gt;concept_map&lt;/span&gt; &lt;span class="org-type"&gt;EqualityComparable&lt;/span&gt;&lt;span class="org-variable-name"&gt;&amp;lt;student record&amp;gt;&lt;/span&gt;{
    &lt;span class="org-type"&gt;bool&lt;/span&gt; &lt;span class="org-keyword"&gt;operator&lt;/span&gt;&lt;span class="org-variable-name"&gt;==&lt;/span&gt;(&lt;span class="org-keyword"&gt;const&lt;/span&gt; &lt;span class="org-type"&gt;student&lt;/span&gt; &lt;span class="org-type"&gt;record&lt;/span&gt;&amp;amp; &lt;span class="org-variable-name"&gt;a&lt;/span&gt;,
                    &lt;span class="org-keyword"&gt;const&lt;/span&gt; &lt;span class="org-type"&gt;student&lt;/span&gt; &lt;span class="org-type"&gt;record&lt;/span&gt;&amp;amp; &lt;span class="org-variable-name"&gt;b&lt;/span&gt;){
        &lt;span class="org-keyword"&gt;return&lt;/span&gt; a.id_equal(b);
}
};
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="notes" id="orgc2f233f"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd6557c8" class="outline-3"&gt;
&lt;h4 id="orgd6557c8"&gt;Allow associated types&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-orgd6557c8"&gt;
&lt;p&gt; Very useful for pointers &lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="org-type"&gt;concept_map&lt;/span&gt; &lt;span class="org-type"&gt;BinaryFunction&lt;/span&gt;&lt;span class="org-variable-name"&gt;&amp;lt;int (*)(int, int), int, int&amp;gt;&lt;/span&gt;
{
    &lt;span class="org-keyword"&gt;typedef&lt;/span&gt; &lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-type"&gt;result_type&lt;/span&gt;;
};
&lt;/pre&gt;
&lt;/div&gt;


&lt;div class="notes" id="orgac26af1"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5b19f13" class="outline-3"&gt;
&lt;h4 id="org5b19f13"&gt;Why Didn't We Get Them?&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org5b19f13"&gt;
&lt;p&gt; Let's not go there right now. &lt;/p&gt;

&lt;div class="notes" id="orgcd8e7be"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5455e39" class="outline-2"&gt;
&lt;h3 id="org5455e39"&gt;State of the Art&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org5455e39"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2126bdf" class="outline-3"&gt;
&lt;h4 id="org2126bdf"&gt;Rust Traits&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org2126bdf"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-rust" id="nil"&gt;&lt;span class="org-keyword"&gt;trait&lt;/span&gt; &lt;span class="org-type"&gt;PartialEq&lt;/span&gt; {
    &lt;span class="org-keyword"&gt;fn&lt;/span&gt; &lt;span class="org-function-name"&gt;eq&lt;/span&gt;(&lt;span class="org-rust-ampersand"&gt;&amp;amp;&lt;/span&gt;&lt;span class="org-keyword"&gt;self&lt;/span&gt;, &lt;span class="org-variable-name"&gt;rhs&lt;/span&gt;: &lt;span class="org-rust-ampersand"&gt;&amp;amp;&lt;/span&gt;&lt;span class="org-type"&gt;Self&lt;/span&gt;) -&amp;gt; &lt;span class="org-type"&gt;bool&lt;/span&gt;;

    &lt;span class="org-keyword"&gt;fn&lt;/span&gt; &lt;span class="org-function-name"&gt;ne&lt;/span&gt;(&lt;span class="org-rust-ampersand"&gt;&amp;amp;&lt;/span&gt;&lt;span class="org-keyword"&gt;self&lt;/span&gt;, &lt;span class="org-variable-name"&gt;rhs&lt;/span&gt;: &lt;span class="org-rust-ampersand"&gt;&amp;amp;&lt;/span&gt;&lt;span class="org-type"&gt;Self&lt;/span&gt;) -&amp;gt; &lt;span class="org-type"&gt;bool&lt;/span&gt; {
        !&lt;span class="org-keyword"&gt;self&lt;/span&gt;.eq(rhs)
    }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="notes" id="org84edbf7"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0372946" class="outline-3"&gt;
&lt;h4 id="org0372946"&gt;C++ CPOs&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org0372946"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org38d8aac" class="outline-4"&gt;
&lt;h5 id="org38d8aac"&gt;Some Concepts and Types&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-org38d8aac"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-C++" id="nil"&gt;&lt;span class="org-keyword"&gt;namespace&lt;/span&gt; &lt;span class="org-constant"&gt;N&lt;/span&gt;::&lt;span class="org-constant"&gt;hidden&lt;/span&gt; {
&lt;span class="org-keyword"&gt;template&lt;/span&gt; &amp;lt;&lt;span class="org-keyword"&gt;typename&lt;/span&gt; &lt;span class="org-type"&gt;T&lt;/span&gt;&amp;gt;
&lt;span class="org-keyword"&gt;concept&lt;/span&gt; &lt;span class="org-type"&gt;has_eq&lt;/span&gt; = &lt;span class="org-keyword"&gt;requires&lt;/span&gt;(&lt;span class="org-type"&gt;T&lt;/span&gt; &lt;span class="org-keyword"&gt;const&lt;/span&gt;&amp;amp; &lt;span class="org-variable-name"&gt;v&lt;/span&gt;) {
  { eq(v, v) } -&amp;gt; &lt;span class="org-constant"&gt;std&lt;/span&gt;::&lt;span class="org-type"&gt;same_as&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;bool&lt;/span&gt;&amp;gt;;
};

&lt;span class="org-keyword"&gt;struct&lt;/span&gt; &lt;span class="org-type"&gt;eq_fn&lt;/span&gt; {
  &lt;span class="org-keyword"&gt;template&lt;/span&gt; &amp;lt;&lt;span class="org-type"&gt;has_eq&lt;/span&gt; &lt;span class="org-type"&gt;T&lt;/span&gt;&amp;gt;
  &lt;span class="org-keyword"&gt;constexpr&lt;/span&gt; &lt;span class="org-type"&gt;bool&lt;/span&gt; &lt;span class="org-keyword"&gt;operator&lt;/span&gt;&lt;span class="org-function-name"&gt;()&lt;/span&gt;(&lt;span class="org-type"&gt;T&lt;/span&gt; &lt;span class="org-keyword"&gt;const&lt;/span&gt;&amp;amp; &lt;span class="org-variable-name"&gt;x&lt;/span&gt;,
                            &lt;span class="org-type"&gt;T&lt;/span&gt; &lt;span class="org-keyword"&gt;const&lt;/span&gt;&amp;amp; &lt;span class="org-variable-name"&gt;y&lt;/span&gt;) &lt;span class="org-keyword"&gt;const&lt;/span&gt; {
    &lt;span class="org-keyword"&gt;return&lt;/span&gt; eq(x, y);
  }
};

&lt;span class="org-keyword"&gt;template&lt;/span&gt; &amp;lt;&lt;span class="org-type"&gt;has_eq&lt;/span&gt; &lt;span class="org-type"&gt;T&lt;/span&gt;&amp;gt;
&lt;span class="org-keyword"&gt;constexpr&lt;/span&gt; &lt;span class="org-type"&gt;bool&lt;/span&gt; &lt;span class="org-function-name"&gt;ne&lt;/span&gt;(&lt;span class="org-type"&gt;T&lt;/span&gt; &lt;span class="org-keyword"&gt;const&lt;/span&gt;&amp;amp; &lt;span class="org-variable-name"&gt;x&lt;/span&gt;, &lt;span class="org-type"&gt;T&lt;/span&gt; &lt;span class="org-keyword"&gt;const&lt;/span&gt;&amp;amp; &lt;span class="org-variable-name"&gt;y&lt;/span&gt;) {
  &lt;span class="org-keyword"&gt;return&lt;/span&gt; &lt;span class="org-keyword"&gt;not&lt;/span&gt; eq(x, y);
}

&lt;span class="org-keyword"&gt;template&lt;/span&gt; &amp;lt;&lt;span class="org-keyword"&gt;typename&lt;/span&gt; &lt;span class="org-type"&gt;T&lt;/span&gt;&amp;gt;
&lt;span class="org-keyword"&gt;concept&lt;/span&gt; &lt;span class="org-type"&gt;has_ne&lt;/span&gt; = &lt;span class="org-keyword"&gt;requires&lt;/span&gt;(&lt;span class="org-type"&gt;T&lt;/span&gt; &lt;span class="org-keyword"&gt;const&lt;/span&gt;&amp;amp; &lt;span class="org-variable-name"&gt;v&lt;/span&gt;) {
  { ne(v, v) } -&amp;gt; &lt;span class="org-constant"&gt;std&lt;/span&gt;::&lt;span class="org-type"&gt;same_as&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;bool&lt;/span&gt;&amp;gt;;
};

&lt;span class="org-keyword"&gt;struct&lt;/span&gt; &lt;span class="org-type"&gt;ne_fn&lt;/span&gt; {
  &lt;span class="org-keyword"&gt;template&lt;/span&gt; &amp;lt;&lt;span class="org-type"&gt;has_ne&lt;/span&gt; &lt;span class="org-type"&gt;T&lt;/span&gt;&amp;gt;
  &lt;span class="org-keyword"&gt;constexpr&lt;/span&gt; &lt;span class="org-type"&gt;bool&lt;/span&gt; &lt;span class="org-keyword"&gt;operator&lt;/span&gt;&lt;span class="org-function-name"&gt;()&lt;/span&gt;(&lt;span class="org-type"&gt;T&lt;/span&gt; &lt;span class="org-keyword"&gt;const&lt;/span&gt;&amp;amp; &lt;span class="org-variable-name"&gt;x&lt;/span&gt;,
                            &lt;span class="org-type"&gt;T&lt;/span&gt; &lt;span class="org-keyword"&gt;const&lt;/span&gt;&amp;amp; &lt;span class="org-variable-name"&gt;y&lt;/span&gt;) &lt;span class="org-keyword"&gt;const&lt;/span&gt; {
    &lt;span class="org-keyword"&gt;return&lt;/span&gt; ne(x, y);
  }
};
} &lt;span class="org-comment-delimiter"&gt;// &lt;/span&gt;&lt;span class="org-comment"&gt;namespace N::hidden&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt; See &lt;u&gt;Why tag_invoke is not the solution I want&lt;/u&gt; by Barry Revzin &lt;a href="https://brevzin.github.io/c++/2020/12/01/tag-invoke/"&gt;https://brevzin.github.io/c++/2020/12/01/tag-invoke/&lt;/a&gt; &lt;/p&gt;

&lt;div class="notes" id="org4ec3d03"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd9440f0" class="outline-4"&gt;
&lt;h5 id="orgd9440f0"&gt;C++ partial_equality&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-orgd9440f0"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-C++" id="nil"&gt;&lt;span class="org-keyword"&gt;namespace&lt;/span&gt; &lt;span class="org-constant"&gt;N&lt;/span&gt; {
&lt;span class="org-keyword"&gt;inline&lt;/span&gt; &lt;span class="org-keyword"&gt;namespace&lt;/span&gt; &lt;span class="org-constant"&gt;function_objects&lt;/span&gt; {
&lt;span class="org-keyword"&gt;inline&lt;/span&gt; &lt;span class="org-keyword"&gt;constexpr&lt;/span&gt; &lt;span class="org-constant"&gt;hidden&lt;/span&gt;::&lt;span class="org-type"&gt;eq_fn&lt;/span&gt; &lt;span class="org-variable-name"&gt;eq&lt;/span&gt;{};
&lt;span class="org-keyword"&gt;inline&lt;/span&gt; &lt;span class="org-keyword"&gt;constexpr&lt;/span&gt; &lt;span class="org-constant"&gt;hidden&lt;/span&gt;::&lt;span class="org-type"&gt;ne_fn&lt;/span&gt; &lt;span class="org-variable-name"&gt;ne&lt;/span&gt;{};
} &lt;span class="org-comment-delimiter"&gt;// &lt;/span&gt;&lt;span class="org-comment"&gt;namespace function_objects&lt;/span&gt;

&lt;span class="org-keyword"&gt;template&lt;/span&gt; &amp;lt;&lt;span class="org-keyword"&gt;typename&lt;/span&gt; &lt;span class="org-type"&gt;T&lt;/span&gt;&amp;gt;
&lt;span class="org-keyword"&gt;concept&lt;/span&gt; partial_equality
  &lt;span class="org-keyword"&gt;requires&lt;/span&gt;(&lt;span class="org-constant"&gt;std&lt;/span&gt;::&lt;span class="org-type"&gt;remove_reference_t&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;T&lt;/span&gt;&amp;gt; &lt;span class="org-keyword"&gt;const&lt;/span&gt;&amp;amp; &lt;span class="org-variable-name"&gt;t&lt;/span&gt;)
{
  eq(t, t);
  ne(t, t);
};
} &lt;span class="org-comment-delimiter"&gt;// &lt;/span&gt;&lt;span class="org-comment"&gt;namespace N&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt; See &lt;u&gt;Why tag_invoke is not the solution I want&lt;/u&gt; by Barry Revzin &lt;a href="https://brevzin.github.io/c++/2020/12/01/tag-invoke/"&gt;https://brevzin.github.io/c++/2020/12/01/tag-invoke/&lt;/a&gt; &lt;/p&gt;

&lt;div class="notes" id="orgdecd5c0"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5396b8f" class="outline-2"&gt;
&lt;h3 id="org5396b8f"&gt;Requirements for Solution&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org5396b8f"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt; Tied to the type system &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt; Automatable &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;"zero" overhead

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt; no virtual calls &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;no type erasure&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="notes" id="orgc4034ba"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgad4da33" class="outline-2"&gt;
&lt;h3 id="orgad4da33"&gt;What does typeclass do?&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orgad4da33"&gt;
&lt;p&gt; Adds a record to the function that defines the operations for the type. &lt;/p&gt;

&lt;p&gt; Can we do that? &lt;/p&gt;

&lt;div class="notes" id="org585f6ee"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3f6e803" class="outline-2"&gt;
&lt;h3 id="org3f6e803"&gt;Type-based lookup&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org3f6e803"&gt;
&lt;p&gt; Templates! &lt;/p&gt;

&lt;div class="notes" id="org887d83a"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgcf837b9" class="outline-2"&gt;
&lt;h3 id="orgcf837b9"&gt;Additional Requirements&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orgcf837b9"&gt;
&lt;p&gt; Avoid ADL &lt;/p&gt;

&lt;p&gt; Object Lookup rather than Overload Lookup &lt;/p&gt;

&lt;div class="notes" id="orgc8f05ae"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org43e91b6" class="outline-2"&gt;
&lt;h3 id="org43e91b6"&gt;Variable templates&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org43e91b6"&gt;
&lt;p&gt; Variable templates have become more powerful &lt;/p&gt;

&lt;p&gt; We can have entirely distinct specializations &lt;/p&gt;

&lt;div class="notes" id="org9184e90"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9b64424" class="outline-3"&gt;
&lt;h4 id="org9b64424"&gt;A Step Towards Implementation&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org9b64424"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-C++" id="nil"&gt;&lt;span class="org-keyword"&gt;template&lt;/span&gt; &amp;lt;&lt;span class="org-keyword"&gt;class&lt;/span&gt; &lt;span class="org-type"&gt;T&lt;/span&gt;&amp;gt;
&lt;span class="org-keyword"&gt;concept&lt;/span&gt; &lt;span class="org-type"&gt;partial_equality&lt;/span&gt; = &lt;span class="org-keyword"&gt;requires&lt;/span&gt;(
    &lt;span class="org-constant"&gt;std&lt;/span&gt;::&lt;span class="org-type"&gt;remove_reference_t&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;T&lt;/span&gt;&amp;gt; &lt;span class="org-keyword"&gt;const&lt;/span&gt;&amp;amp; &lt;span class="org-variable-name"&gt;t&lt;/span&gt;) {
  {
    &lt;span class="org-type"&gt;partial_eq&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;T&lt;/span&gt;&amp;gt;.eq(t, t)
  } -&amp;gt; &lt;span class="org-constant"&gt;std&lt;/span&gt;::&lt;span class="org-type"&gt;same_as&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;bool&lt;/span&gt;&amp;gt;;
  {
    &lt;span class="org-type"&gt;partial_eq&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;T&lt;/span&gt;&amp;gt;.ne(t, t)
  } -&amp;gt; &lt;span class="org-constant"&gt;std&lt;/span&gt;::&lt;span class="org-type"&gt;same_as&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;bool&lt;/span&gt;&amp;gt;;
};
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="notes" id="org679feb5"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf24cbc4" class="outline-3"&gt;
&lt;h4 id="orgf24cbc4"&gt;&lt;code&gt;partial_eq&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-orgf24cbc4"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga7f035c" class="outline-4"&gt;
&lt;h5 id="orga7f035c"&gt;An inline variable object&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-orga7f035c"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="org-keyword"&gt;template&lt;/span&gt;&amp;lt;&lt;span class="org-keyword"&gt;class&lt;/span&gt; &lt;span class="org-type"&gt;T&lt;/span&gt;&amp;gt;
&lt;span class="org-keyword"&gt;constexpr&lt;/span&gt; &lt;span class="org-keyword"&gt;inline&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;partial_eq&lt;/span&gt; = &lt;span class="org-constant"&gt;hidden&lt;/span&gt;::partial_eq_default;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="notes" id="org7617290"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd69f366" class="outline-4"&gt;
&lt;h5 id="orgd69f366"&gt;A default implementation&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-orgd69f366"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-C++" id="nil"&gt;&lt;span class="org-keyword"&gt;constexpr&lt;/span&gt; &lt;span class="org-keyword"&gt;inline&lt;/span&gt; &lt;span class="org-keyword"&gt;struct&lt;/span&gt; &lt;span class="org-type"&gt;partial_eq_default_t&lt;/span&gt; {
  &lt;span class="org-keyword"&gt;constexpr&lt;/span&gt; &lt;span class="org-type"&gt;bool&lt;/span&gt;
  &lt;span class="org-function-name"&gt;eq&lt;/span&gt;(&lt;span class="org-type"&gt;has_eq&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-keyword"&gt;const&lt;/span&gt;&amp;amp; &lt;span class="org-variable-name"&gt;rhs&lt;/span&gt;,
     &lt;span class="org-type"&gt;has_eq&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-keyword"&gt;const&lt;/span&gt;&amp;amp; &lt;span class="org-variable-name"&gt;lhs&lt;/span&gt;) &lt;span class="org-keyword"&gt;const&lt;/span&gt; {
    &lt;span class="org-keyword"&gt;return&lt;/span&gt; (rhs == lhs);
  }
  &lt;span class="org-keyword"&gt;constexpr&lt;/span&gt; &lt;span class="org-type"&gt;bool&lt;/span&gt;
  &lt;span class="org-function-name"&gt;ne&lt;/span&gt;(&lt;span class="org-type"&gt;has_eq&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-keyword"&gt;const&lt;/span&gt;&amp;amp; &lt;span class="org-variable-name"&gt;rhs&lt;/span&gt;,
     &lt;span class="org-type"&gt;has_eq&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-keyword"&gt;const&lt;/span&gt;&amp;amp; &lt;span class="org-variable-name"&gt;lhs&lt;/span&gt;) &lt;span class="org-keyword"&gt;const&lt;/span&gt; {
    &lt;span class="org-keyword"&gt;return&lt;/span&gt; (lhs != rhs);
  }
} &lt;span class="org-variable-name"&gt;partial_eq_default&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="notes" id="org73e4b81"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org07152f2" class="outline-4"&gt;
&lt;h5 id="org07152f2"&gt;New &lt;code&gt;has_eq&lt;/code&gt;&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-org07152f2"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="org-keyword"&gt;template&lt;/span&gt; &amp;lt;&lt;span class="org-keyword"&gt;typename&lt;/span&gt; &lt;span class="org-type"&gt;T&lt;/span&gt;&amp;gt;
&lt;span class="org-keyword"&gt;concept&lt;/span&gt; &lt;span class="org-type"&gt;has_eq&lt;/span&gt; = &lt;span class="org-keyword"&gt;requires&lt;/span&gt;(&lt;span class="org-type"&gt;T&lt;/span&gt; &lt;span class="org-keyword"&gt;const&lt;/span&gt;&amp;amp; &lt;span class="org-variable-name"&gt;v&lt;/span&gt;) {
  { &lt;span class="org-keyword"&gt;operator&lt;/span&gt;==(v, v) } -&amp;gt; &lt;span class="org-constant"&gt;std&lt;/span&gt;::&lt;span class="org-type"&gt;same_as&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;bool&lt;/span&gt;&amp;gt;;
};
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="notes" id="org40519d3"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org33fa324" class="outline-3"&gt;
&lt;h4 id="org33fa324"&gt;Will do better&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org33fa324"&gt;
&lt;p&gt; In a bit &lt;/p&gt;

&lt;div class="notes" id="orgd6431cd"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8851fb9" class="outline-2"&gt;
&lt;h3 id="org8851fb9"&gt;Monoid&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org8851fb9"&gt;
&lt;p&gt; A little more than you think. &lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;A type&lt;/li&gt;
&lt;li&gt;With an associative binary operation&lt;/li&gt;
&lt;li&gt;Which is closed&lt;/li&gt;
&lt;li&gt;And has an identity element&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb51a0c4" class="outline-3"&gt;
&lt;h4 id="orgb51a0c4"&gt;Maybe not a lot more&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-orgb51a0c4"&gt;
&lt;div class="notes" id="org0c44627"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org38e75f7" class="outline-3"&gt;
&lt;h4 id="org38e75f7"&gt;Math&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org38e75f7"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;\(\oplus: M \times M \rightarrow M\)&lt;/li&gt;
&lt;li&gt;\(x \oplus (y \oplus z) = (x \oplus y) \oplus z\)&lt;/li&gt;
&lt;li&gt;\(1_M \in M\) such that \(\forall m \in M : (1_M \oplus m) = m = (m \oplus 1_M)\)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="notes" id="org17705e7"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org38a2fc2" class="outline-3"&gt;
&lt;h4 id="org38a2fc2"&gt;Function form&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org38a2fc2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;\(f : M \times M \rightarrow M\)&lt;/li&gt;
&lt;li&gt;\(f(x, f(y, z)) = f(f(x, y), z)\)&lt;/li&gt;
&lt;li&gt;\(1_M \in M\) such that \(\forall m \in M : f(1_M, m) = m = f(m, 1_M)\)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; The similarity to left and right fold is &lt;b&gt;NOT&lt;/b&gt; an accident &lt;/p&gt;

&lt;div class="notes" id="org87b2c28"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge87a585" class="outline-3"&gt;
&lt;h4 id="orge87a585"&gt;Core Functions&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-orge87a585"&gt;
&lt;dl class="org-dl"&gt;
&lt;dt&gt;\(empty : m\)&lt;/dt&gt;&lt;dd&gt;\(empty = concat \, []\)&lt;/dd&gt;
&lt;dt&gt;\(concat : [m] \rightarrow m\)&lt;/dt&gt;&lt;dd&gt;\(fold \, append \, empty\)&lt;/dd&gt;
&lt;dt&gt;\(append : m \rightarrow m \rightarrow m\)&lt;/dt&gt;&lt;dd&gt;\(op\)&lt;/dd&gt;
&lt;/dl&gt;


&lt;p&gt; Note that it's self-referential &lt;/p&gt;

&lt;p&gt; This is common &lt;/p&gt;

&lt;div class="notes" id="orgbae6f76"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8204644" class="outline-4"&gt;
&lt;h5 id="org8204644"&gt;From Haskell Prelude&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-org8204644"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-haskell" id="nil"&gt;&lt;span class="org-haskell-keyword"&gt;class&lt;/span&gt; &lt;span class="org-haskell-type"&gt;Semigroup&lt;/span&gt; a &lt;span class="org-haskell-operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="org-haskell-type"&gt;Monoid&lt;/span&gt; a &lt;span class="org-haskell-keyword"&gt;where&lt;/span&gt;
  mempty &lt;span class="org-haskell-operator"&gt;::&lt;/span&gt; a
  mempty &lt;span class="org-haskell-operator"&gt;=&lt;/span&gt; mconcat &lt;span class="org-haskell-constructor"&gt;[]&lt;/span&gt;

  mappend &lt;span class="org-haskell-operator"&gt;::&lt;/span&gt; a &lt;span class="org-haskell-operator"&gt;-&amp;gt;&lt;/span&gt; a &lt;span class="org-haskell-operator"&gt;-&amp;gt;&lt;/span&gt; a
  mappend &lt;span class="org-haskell-operator"&gt;=&lt;/span&gt; (&lt;span class="org-haskell-operator"&gt;&amp;lt;&amp;gt;&lt;/span&gt;)

  mconcat &lt;span class="org-haskell-operator"&gt;::&lt;/span&gt; [a] &lt;span class="org-haskell-operator"&gt;-&amp;gt;&lt;/span&gt; a
  mconcat &lt;span class="org-haskell-operator"&gt;=&lt;/span&gt; foldr mappend mempty
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="notes" id="org27faaae"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org58ba1f2" class="outline-3"&gt;
&lt;h4 id="org58ba1f2"&gt;Minimum Set&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org58ba1f2"&gt;
&lt;p&gt; \(empty \, | \, concat\) &lt;/p&gt;

&lt;div class="notes" id="orgc143f8b"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7fab3d4" class="outline-3"&gt;
&lt;h4 id="org7fab3d4"&gt;In C++&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org7fab3d4"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-C++" id="nil"&gt;&lt;span class="org-keyword"&gt;template&lt;/span&gt; &amp;lt;&lt;span class="org-keyword"&gt;typename&lt;/span&gt; &lt;span class="org-type"&gt;T&lt;/span&gt;, &lt;span class="org-keyword"&gt;typename&lt;/span&gt; &lt;span class="org-type"&gt;M&lt;/span&gt;&amp;gt;
&lt;span class="org-keyword"&gt;concept&lt;/span&gt; &lt;span class="org-type"&gt;MonoidRequirements&lt;/span&gt; =
    &lt;span class="org-keyword"&gt;requires&lt;/span&gt;(&lt;span class="org-type"&gt;T&lt;/span&gt; &lt;span class="org-variable-name"&gt;i&lt;/span&gt;) {
      { i.identity() } -&amp;gt; &lt;span class="org-constant"&gt;std&lt;/span&gt;::&lt;span class="org-type"&gt;same_as&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;M&lt;/span&gt;&amp;gt;;
    }
    ||
    &lt;span class="org-keyword"&gt;requires&lt;/span&gt;(&lt;span class="org-type"&gt;T&lt;/span&gt; &lt;span class="org-variable-name"&gt;i&lt;/span&gt;, &lt;span class="org-constant"&gt;std&lt;/span&gt;::&lt;span class="org-constant"&gt;ranges&lt;/span&gt;::&lt;span class="org-type"&gt;empty_view&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;M&lt;/span&gt;&amp;gt; &lt;span class="org-variable-name"&gt;r1&lt;/span&gt;) {
      { i.concat(r1) } -&amp;gt; &lt;span class="org-constant"&gt;std&lt;/span&gt;::&lt;span class="org-type"&gt;same_as&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;M&lt;/span&gt;&amp;gt;;
    };
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="notes" id="org2c61343"&gt;
&lt;p&gt; I am ignoring all sorts of const volatile reference issues here. &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org55db03e" class="outline-2"&gt;
&lt;h3 id="org55db03e"&gt;Implementing the other side&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org55db03e"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org94ca958" class="outline-3"&gt;
&lt;h4 id="org94ca958"&gt;The Map for a Monoid&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org94ca958"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="org-keyword"&gt;template&lt;/span&gt; &amp;lt;&lt;span class="org-keyword"&gt;class&lt;/span&gt; &lt;span class="org-type"&gt;Impl&lt;/span&gt;&amp;gt;
  &lt;span class="org-keyword"&gt;requires&lt;/span&gt; &lt;span class="org-type"&gt;MonoidRequirements&lt;/span&gt;&amp;lt;
      &lt;span class="org-type"&gt;Impl&lt;/span&gt;,
      &lt;span class="org-keyword"&gt;typename&lt;/span&gt; &lt;span class="org-constant"&gt;Impl&lt;/span&gt;::&lt;span class="org-type"&gt;value_type&lt;/span&gt;&amp;gt;
&lt;span class="org-keyword"&gt;struct&lt;/span&gt; &lt;span class="org-type"&gt;Monoid&lt;/span&gt; : &lt;span class="org-keyword"&gt;protected&lt;/span&gt; &lt;span class="org-type"&gt;Impl&lt;/span&gt; {
  &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;identity&lt;/span&gt;(&lt;span class="org-keyword"&gt;this&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt;&amp;amp;&amp;amp; self);

  &lt;span class="org-keyword"&gt;template&lt;/span&gt; &amp;lt;&lt;span class="org-keyword"&gt;typename&lt;/span&gt; &lt;span class="org-type"&gt;Range&lt;/span&gt;&amp;gt;
  &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;concat&lt;/span&gt;(&lt;span class="org-keyword"&gt;this&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt;&amp;amp;&amp;amp; self, &lt;span class="org-type"&gt;Range&lt;/span&gt; &lt;span class="org-variable-name"&gt;r&lt;/span&gt;);

  &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;op&lt;/span&gt;(&lt;span class="org-keyword"&gt;this&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt;&amp;amp;&amp;amp; self, &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;a1&lt;/span&gt;, &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;a2&lt;/span&gt;);
};
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="notes" id="org2cb36b8"&gt;
&lt;p&gt; empty is a terrible name, concat only a little better. empty becomes identity &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf2e4e66" class="outline-4"&gt;
&lt;h5 id="orgf2e4e66"&gt;&lt;code&gt;identity&lt;/code&gt;&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-orgf2e4e66"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;    &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;identity&lt;/span&gt;(&lt;span class="org-keyword"&gt;this&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &amp;amp;&amp;amp; self) {
        &lt;span class="org-constant"&gt;std&lt;/span&gt;::puts(&lt;span class="org-string"&gt;"Monoid::identity()"&lt;/span&gt;);
        &lt;span class="org-keyword"&gt;return&lt;/span&gt; self.concat(&lt;span class="org-constant"&gt;std&lt;/span&gt;::&lt;span class="org-constant"&gt;ranges&lt;/span&gt;::&lt;span class="org-type"&gt;empty_view&lt;/span&gt;&amp;lt;&lt;span class="org-keyword"&gt;typename&lt;/span&gt; &lt;span class="org-constant"&gt;Impl&lt;/span&gt;::&lt;span class="org-type"&gt;value_type&lt;/span&gt;&amp;gt;{});
    }

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4544cc8" class="outline-4"&gt;
&lt;h5 id="org4544cc8"&gt;&lt;code&gt;concat&lt;/code&gt;&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-org4544cc8"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;   &lt;span class="org-keyword"&gt;template&lt;/span&gt;&amp;lt;&lt;span class="org-keyword"&gt;typename&lt;/span&gt; &lt;span class="org-type"&gt;Range&lt;/span&gt;&amp;gt;
   &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;concat&lt;/span&gt;(&lt;span class="org-keyword"&gt;this&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt;&amp;amp;&amp;amp; self, &lt;span class="org-type"&gt;Range&lt;/span&gt; &lt;span class="org-variable-name"&gt;r&lt;/span&gt;) {
        &lt;span class="org-constant"&gt;std&lt;/span&gt;::puts(&lt;span class="org-string"&gt;"Monoid::concat()"&lt;/span&gt;);
        &lt;span class="org-keyword"&gt;return&lt;/span&gt; &lt;span class="org-constant"&gt;std&lt;/span&gt;::&lt;span class="org-constant"&gt;ranges&lt;/span&gt;::fold_right(r,
                    self.identity(),
                    [&amp;amp;](&lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;m1&lt;/span&gt;, &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;m2&lt;/span&gt;){&lt;span class="org-keyword"&gt;return&lt;/span&gt; self.op(m1, m2);});
    }

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7fb7987" class="outline-4"&gt;
&lt;h5 id="org7fb7987"&gt;&lt;code&gt;op&lt;/code&gt;&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-org7fb7987"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;   &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;op&lt;/span&gt;(&lt;span class="org-keyword"&gt;this&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt;&amp;amp;&amp;amp; self, &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;a1&lt;/span&gt;, &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;a2&lt;/span&gt;) {
        &lt;span class="org-constant"&gt;std&lt;/span&gt;::puts(&lt;span class="org-string"&gt;"Monoid::op"&lt;/span&gt;);
        &lt;span class="org-keyword"&gt;return&lt;/span&gt; self.op(a1, a2);
    }
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org433bfeb" class="outline-3"&gt;
&lt;h4 id="org433bfeb"&gt;Deducing &lt;code&gt;this&lt;/code&gt; &lt;b&gt;and&lt;/b&gt; CRTP&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org433bfeb"&gt;
&lt;p&gt; We'll see in a moment, but it's because we want to constraint the required implementation. &lt;/p&gt;

&lt;p&gt; We want to use the derived version which has all of the operations. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd365e33" class="outline-3"&gt;
&lt;h4 id="orgd365e33"&gt;&lt;code&gt;Plus&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-orgd365e33"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-C++" id="nil"&gt;&lt;span class="org-keyword"&gt;template&lt;/span&gt; &amp;lt;&lt;span class="org-keyword"&gt;typename&lt;/span&gt; &lt;span class="org-type"&gt;M&lt;/span&gt;&amp;gt;
&lt;span class="org-keyword"&gt;class&lt;/span&gt; &lt;span class="org-type"&gt;Plus&lt;/span&gt; {
&lt;span class="org-keyword"&gt;public&lt;/span&gt;:
  &lt;span class="org-keyword"&gt;using&lt;/span&gt; &lt;span class="org-type"&gt;value_type&lt;/span&gt; = M;
  &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;identity&lt;/span&gt;(&lt;span class="org-keyword"&gt;this&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt;&amp;amp;&amp;amp; self) -&amp;gt; &lt;span class="org-type"&gt;M&lt;/span&gt; {
    &lt;span class="org-constant"&gt;std&lt;/span&gt;::puts(&lt;span class="org-string"&gt;"Plus::identity()"&lt;/span&gt;);
    &lt;span class="org-keyword"&gt;return&lt;/span&gt; M{0};
  }

  &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;op&lt;/span&gt;(&lt;span class="org-keyword"&gt;this&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt;&amp;amp;&amp;amp; self, &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;s1&lt;/span&gt;, &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;s2&lt;/span&gt;) -&amp;gt; &lt;span class="org-type"&gt;M&lt;/span&gt; {
    &lt;span class="org-constant"&gt;std&lt;/span&gt;::puts(&lt;span class="org-string"&gt;"Plus::op()"&lt;/span&gt;);
    &lt;span class="org-keyword"&gt;return&lt;/span&gt; s1 + s2;
  }
};
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0a4f2c7" class="outline-3"&gt;
&lt;h4 id="org0a4f2c7"&gt;&lt;code&gt;PlusMonoidMap&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org0a4f2c7"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="org-keyword"&gt;template&lt;/span&gt;&amp;lt;&lt;span class="org-keyword"&gt;typename&lt;/span&gt; &lt;span class="org-type"&gt;M&lt;/span&gt;&amp;gt;
&lt;span class="org-keyword"&gt;struct&lt;/span&gt; &lt;span class="org-type"&gt;PlusMonoidMap&lt;/span&gt; : &lt;span class="org-keyword"&gt;public&lt;/span&gt; &lt;span class="org-type"&gt;Monoid&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;Plus&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;M&lt;/span&gt;&amp;gt;&amp;gt; {
    &lt;span class="org-keyword"&gt;using&lt;/span&gt; &lt;span class="org-constant"&gt;Plus&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;M&lt;/span&gt;&amp;gt;::identity;
    &lt;span class="org-keyword"&gt;using&lt;/span&gt; &lt;span class="org-constant"&gt;Plus&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;M&lt;/span&gt;&amp;gt;::op;
};
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="notes" id="orga6a3f61"&gt;
&lt;p&gt; Need to pull the operations from the Monoid instance into the Map, so we get the right ones being used by concat. &lt;/p&gt;

&lt;p&gt; This might be simpler if we didn't allow choice of the basis operations, but that's also overly restrictive. &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc757316" class="outline-3"&gt;
&lt;h4 id="orgc757316"&gt;The map instances&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-orgc757316"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="org-keyword"&gt;template&lt;/span&gt;&amp;lt;&lt;span class="org-keyword"&gt;class&lt;/span&gt; &lt;span class="org-type"&gt;T&lt;/span&gt;&amp;gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;monoid_concept_map&lt;/span&gt; = &lt;span class="org-constant"&gt;std&lt;/span&gt;::false_type{};

&lt;span class="org-keyword"&gt;template&lt;/span&gt;&amp;lt;&amp;gt;
&lt;span class="org-keyword"&gt;constexpr&lt;/span&gt; &lt;span class="org-keyword"&gt;inline&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-type"&gt;monoid_concept_map&lt;/span&gt;&lt;span class="org-variable-name"&gt;&amp;lt;int&amp;gt;&lt;/span&gt; = &lt;span class="org-type"&gt;PlusMonoidMap&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;int&lt;/span&gt;&amp;gt;{};

&lt;span class="org-keyword"&gt;template&lt;/span&gt;&amp;lt;&amp;gt;
&lt;span class="org-keyword"&gt;constexpr&lt;/span&gt; &lt;span class="org-keyword"&gt;inline&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-type"&gt;monoid_concept_map&lt;/span&gt;&lt;span class="org-variable-name"&gt;&amp;lt;long&amp;gt;&lt;/span&gt; = &lt;span class="org-type"&gt;PlusMonoidMap&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;long&lt;/span&gt;&amp;gt;{};

&lt;span class="org-keyword"&gt;template&lt;/span&gt;&amp;lt;&amp;gt;
&lt;span class="org-keyword"&gt;constexpr&lt;/span&gt; &lt;span class="org-keyword"&gt;inline&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-type"&gt;monoid_concept_map&lt;/span&gt;&lt;span class="org-variable-name"&gt;&amp;lt;char&amp;gt;&lt;/span&gt; = &lt;span class="org-type"&gt;PlusMonoidMap&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;char&lt;/span&gt;&amp;gt;{};
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4a87cf1" class="outline-3"&gt;
&lt;h4 id="org4a87cf1"&gt;Can we &lt;code&gt;concat&lt;/code&gt; instead?&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org4a87cf1"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="org-keyword"&gt;class&lt;/span&gt; &lt;span class="org-type"&gt;StringMonoid&lt;/span&gt; {
&lt;span class="org-keyword"&gt;public&lt;/span&gt;:
  &lt;span class="org-keyword"&gt;using&lt;/span&gt; &lt;span class="org-type"&gt;value_type&lt;/span&gt; = &lt;span class="org-constant"&gt;std&lt;/span&gt;::string;

  &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;op&lt;/span&gt;(&lt;span class="org-keyword"&gt;this&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt;&amp;amp;&amp;amp;, &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;s1&lt;/span&gt;, &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;s2&lt;/span&gt;) {
    &lt;span class="org-constant"&gt;std&lt;/span&gt;::puts(&lt;span class="org-string"&gt;"StringMonoid::op()"&lt;/span&gt;);
    &lt;span class="org-keyword"&gt;return&lt;/span&gt; s1 + s2;
  }

  &lt;span class="org-keyword"&gt;template&lt;/span&gt; &amp;lt;&lt;span class="org-keyword"&gt;typename&lt;/span&gt; &lt;span class="org-type"&gt;Range&lt;/span&gt;&amp;gt;
  &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;concat&lt;/span&gt;(&lt;span class="org-keyword"&gt;this&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt;&amp;amp;&amp;amp; self, &lt;span class="org-type"&gt;Range&lt;/span&gt; &lt;span class="org-variable-name"&gt;r&lt;/span&gt;) {
    &lt;span class="org-constant"&gt;std&lt;/span&gt;::puts(&lt;span class="org-string"&gt;"StringMonoid::concat()"&lt;/span&gt;);
    &lt;span class="org-keyword"&gt;return&lt;/span&gt; &lt;span class="org-constant"&gt;std&lt;/span&gt;::&lt;span class="org-constant"&gt;ranges&lt;/span&gt;::fold_right(
        r, &lt;span class="org-constant"&gt;std&lt;/span&gt;::string{}, [&amp;amp;](&lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;m1&lt;/span&gt;, &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;m2&lt;/span&gt;) {
          &lt;span class="org-keyword"&gt;return&lt;/span&gt; self.op(m1, m2);
        });
  }
};
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="notes" id="org1421b14"&gt;
&lt;p&gt; No, I'm not properly constraining Range here. No, I'm not actually recommending this as an implementation. &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3c488f3" class="outline-3"&gt;
&lt;h4 id="org3c488f3"&gt;The Map and instance&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org3c488f3"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="org-keyword"&gt;struct&lt;/span&gt; &lt;span class="org-type"&gt;StringMonoidMap&lt;/span&gt; : &lt;span class="org-keyword"&gt;public&lt;/span&gt; &lt;span class="org-type"&gt;Monoid&lt;/span&gt;&amp;lt;StringMonoid&amp;gt; {
    &lt;span class="org-keyword"&gt;using&lt;/span&gt; &lt;span class="org-constant"&gt;StringMonoid&lt;/span&gt;::op;
    &lt;span class="org-keyword"&gt;using&lt;/span&gt; &lt;span class="org-constant"&gt;StringMonoid&lt;/span&gt;::concat;
};

&lt;span class="org-keyword"&gt;template&lt;/span&gt;&amp;lt;&amp;gt;
&lt;span class="org-keyword"&gt;constexpr&lt;/span&gt; &lt;span class="org-keyword"&gt;inline&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-type"&gt;monoid_concept_map&lt;/span&gt;&amp;lt;&lt;span class="org-constant"&gt;std&lt;/span&gt;::&lt;span class="org-variable-name"&gt;string&amp;gt;&lt;/span&gt; = StringMonoidMap{};

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3a12eef" class="outline-2"&gt;
&lt;h3 id="org3a12eef"&gt;Some simple use&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org3a12eef"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd1b5091" class="outline-3"&gt;
&lt;h4 id="orgd1b5091"&gt;Exercise the functions&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-orgd1b5091"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-C++" id="nil"&gt;&lt;span class="org-keyword"&gt;template&lt;/span&gt;&amp;lt;&lt;span class="org-keyword"&gt;typename&lt;/span&gt; &lt;span class="org-type"&gt;P&lt;/span&gt;&amp;gt;
&lt;span class="org-type"&gt;void&lt;/span&gt; &lt;span class="org-function-name"&gt;testP&lt;/span&gt;()
{
    &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;d1&lt;/span&gt; = &lt;span class="org-type"&gt;monoid_concept_map&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;P&lt;/span&gt;&amp;gt;;

    &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;x&lt;/span&gt; = d1.identity();
    assert(P{} == x);

    &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;sum&lt;/span&gt; = d1.op(x, P{1});
    assert(P{1} == sum);

    &lt;span class="org-constant"&gt;std&lt;/span&gt;::&lt;span class="org-type"&gt;vector&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;P&lt;/span&gt;&amp;gt; &lt;span class="org-variable-name"&gt;v&lt;/span&gt; = {1,2,3,4};
    &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;k&lt;/span&gt; = d1.concat(v);
    assert(k == 10);
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd13d04e" class="outline-3"&gt;
&lt;h4 id="orgd13d04e"&gt;Some simple cases&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-orgd13d04e"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;    &lt;span class="org-constant"&gt;std&lt;/span&gt;::cout &amp;lt;&amp;lt; &lt;span class="org-string"&gt;"\ntest int\n"&lt;/span&gt;;
    testP&amp;lt;&lt;span class="org-type"&gt;int&lt;/span&gt;&amp;gt;();

    &lt;span class="org-constant"&gt;std&lt;/span&gt;::cout &amp;lt;&amp;lt; &lt;span class="org-string"&gt;"\ntest long\n"&lt;/span&gt;;
    testP&amp;lt;&lt;span class="org-type"&gt;long&lt;/span&gt;&amp;gt;();

   &lt;span class="org-constant"&gt;std&lt;/span&gt;::cout &amp;lt;&amp;lt; &lt;span class="org-string"&gt;"\ntest char\n"&lt;/span&gt;;
    testP&amp;lt;&lt;span class="org-type"&gt;char&lt;/span&gt;&amp;gt;();

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga5b5669" class="outline-3"&gt;
&lt;h4 id="orga5b5669"&gt;On &lt;code&gt;std::string&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-orga5b5669"&gt;
&lt;p&gt; This will use the StringMonoid we defined a few moments ago. &lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-C++" id="nil"&gt;    &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;d2&lt;/span&gt; = &lt;span class="org-type"&gt;monoid_concept_map&lt;/span&gt;&amp;lt;&lt;span class="org-constant"&gt;std&lt;/span&gt;::string&amp;gt;;

    &lt;span class="org-constant"&gt;std&lt;/span&gt;::cout &amp;lt;&amp;lt; &lt;span class="org-string"&gt;"\ntest string\n"&lt;/span&gt;;
    &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;x2&lt;/span&gt; = d2.identity();
    assert(&lt;span class="org-constant"&gt;std&lt;/span&gt;::string{} == x2);

    &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;sum2&lt;/span&gt; = d2.op(x2, &lt;span class="org-string"&gt;"1"&lt;/span&gt;);
    assert(&lt;span class="org-constant"&gt;std&lt;/span&gt;::string{&lt;span class="org-string"&gt;"1"&lt;/span&gt;} == sum2);

    &lt;span class="org-constant"&gt;std&lt;/span&gt;::&lt;span class="org-type"&gt;vector&lt;/span&gt;&amp;lt;&lt;span class="org-constant"&gt;std&lt;/span&gt;::string&amp;gt; &lt;span class="org-variable-name"&gt;vs&lt;/span&gt; = {&lt;span class="org-string"&gt;"1"&lt;/span&gt;,&lt;span class="org-string"&gt;"2"&lt;/span&gt;,&lt;span class="org-string"&gt;"3"&lt;/span&gt;,&lt;span class="org-string"&gt;"4"&lt;/span&gt;};
    &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;k2&lt;/span&gt; = d2.concat(vs);
    assert(k2 == &lt;span class="org-constant"&gt;std&lt;/span&gt;::string{&lt;span class="org-string"&gt;"1234"&lt;/span&gt;});
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt; Note that the map type is mostly invisible. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb719e3f" class="outline-3"&gt;
&lt;h4 id="orgb719e3f"&gt;Results&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-orgb719e3f"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org24e555f" class="outline-4"&gt;
&lt;h5 id="org24e555f"&gt;test int&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-org24e555f"&gt;
&lt;em&gt;&lt;/em&gt;
&lt;pre class="example" id="nil"&gt;
Plus::identity()
Plus::op()
Monoid::concat()
Plus::identity()
Plus::op()
Plus::op()
Plus::op()
Plus::op()
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge66a8b5" class="outline-4"&gt;
&lt;h5 id="orge66a8b5"&gt;test long&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-orge66a8b5"&gt;
&lt;em&gt;&lt;/em&gt;
&lt;pre class="example" id="nil"&gt;
Plus::identity()
Plus::op()
Monoid::concat()
Plus::identity()
Plus::op()
Plus::op()
Plus::op()
Plus::op()
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf7ae047" class="outline-4"&gt;
&lt;h5 id="orgf7ae047"&gt;test char&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-orgf7ae047"&gt;
&lt;em&gt;&lt;/em&gt;
&lt;pre class="example" id="nil"&gt;
Plus::identity()
Plus::op()
Monoid::concat()
Plus::identity()
Plus::op()
Plus::op()
Plus::op()
Plus::op()
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7390f2c" class="outline-4"&gt;
&lt;h5 id="org7390f2c"&gt;test string&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-org7390f2c"&gt;
&lt;em&gt;&lt;/em&gt;
&lt;pre class="example" id="nil"&gt;
Monoid::identity()
StringMonoid::concat()
StringMonoid::op()
StringMonoid::concat()
StringMonoid::op()
StringMonoid::op()
StringMonoid::op()
StringMonoid::op()
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga5cfe90" class="outline-2"&gt;
&lt;h3 id="orga5cfe90"&gt;Monoid in Trees&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orga5cfe90"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8d2fc90" class="outline-3"&gt;
&lt;h4 id="org8d2fc90"&gt;Foldable generalizes&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org8d2fc90"&gt;
&lt;p&gt; Folding is very much tied to Range like things. &lt;/p&gt;

&lt;p&gt; It can, and has, been generalized to things that can be traversed. &lt;/p&gt;

&lt;p&gt; &lt;code&gt;monoids&lt;/code&gt; are still critical for Traversables. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5737e19" class="outline-3"&gt;
&lt;h4 id="org5737e19"&gt;Summarizing Data in a tree&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org5737e19"&gt;
&lt;p&gt; If the summary type is monoidal, nodes can hold summaries of all the data below them. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org20d51eb" class="outline-3"&gt;
&lt;h4 id="org20d51eb"&gt;&lt;code&gt;fingertrees&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org20d51eb"&gt;
&lt;p&gt; Much of the flexibility of &lt;code&gt;fingertrees&lt;/code&gt; comes from the monoidal tags. &lt;/p&gt;

&lt;p&gt; They are also fairly complicated. &lt;/p&gt;

&lt;p&gt; Technique can be applied to other, simpler trees. &lt;/p&gt;

&lt;p&gt; P3200 (eventually) ((C++29)) &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgeea587e" class="outline-3"&gt;
&lt;h4 id="orgeea587e"&gt;fringe-tree&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-orgeea587e"&gt;
&lt;p&gt; Simplified tree with data at the edges &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgacbba9a" class="outline-3"&gt;
&lt;h4 id="orgacbba9a"&gt;Code&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-orgacbba9a"&gt;
&lt;p&gt; Show the monoid-map branch of &lt;/p&gt;

&lt;p&gt; &lt;a href="https://github.com/steve-downey/fringetree"&gt;steve-downey/fringetree.git&lt;/a&gt; &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgab7d8a2" class="outline-2"&gt;
&lt;h3 id="orgab7d8a2"&gt;Summary for Concept Maps&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orgab7d8a2"&gt;
&lt;p&gt; Tell you what I told you &lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Variable templates for map lookup&lt;/li&gt;
&lt;li&gt;Named operations on the map object&lt;/li&gt;
&lt;li&gt;Open for extension&lt;/li&gt;
&lt;li&gt;Concept checkable implementations&lt;/li&gt;
&lt;li&gt;Decoupled map use and implementation&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8395959" class="outline-2"&gt;
&lt;h3 id="org8395959"&gt;Questions?&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org8395959"&gt;
&lt;p&gt; Or comments &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3983c15" class="outline-2"&gt;
&lt;h3 id="org3983c15"&gt;Thank You&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org3983c15"&gt;
&lt;div class="notes" id="org4db291f"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://sdowney.org/posts/index.php/2024/05/19/concept-maps-using-c23-library-tech/</guid><pubDate>Sun, 19 May 2024 15:51:00 GMT</pubDate></item><item><title>Slides from C++Now 2023 Async Control Flow</title><link>https://sdowney.org/posts/index.php/2024/05/18/slides-from-cnow-2023-async-control-flow/</link><dc:creator>Steve Downey</dc:creator><description>&lt;div id="outline-container-org8b3a3c0" class="outline-2"&gt;
&lt;h3 id="org8b3a3c0"&gt;Using Sender/Receiver for Async Control Flow&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org8b3a3c0"&gt;
&lt;p&gt; Steve Downey &lt;/p&gt;

&lt;p&gt; These are the slides, slightly rerendered, from my presentation at C++Now 2023. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga88bc52" class="outline-2"&gt;
&lt;h3 id="orga88bc52"&gt;Abstract&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orga88bc52"&gt;
&lt;p&gt; How can P2300 Senders be composed using sender adapters and sender factories to provide arbitrary program control flow? &lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;How do I use these things?&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Where can I steal from?&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- TEASER_END --&gt;

&lt;div class="notes" id="org36cf365"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org236dff5" class="outline-2"&gt;
&lt;h3 id="org236dff5"&gt;&lt;code&gt;std::execution&lt;/code&gt;&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org236dff5"&gt;
&lt;p&gt; &lt;a href="https://wg21.link/P2300"&gt;P2300&lt;/a&gt; &lt;/p&gt;

&lt;p&gt; Recent version at &lt;a href="https://isocpp.org/files/papers/P2300R7.html"&gt;https://isocpp.org/files/papers/P2300R7.html&lt;/a&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt; A self-contained design for a Standard C++ framework for managing asynchronous execution on generic execution resources. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="notes" id="org8339640"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc5b1e38" class="outline-3"&gt;
&lt;h4 id="orgc5b1e38"&gt;Three Key Abstractions&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-orgc5b1e38"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;p&gt; Schedulers &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt; Senders &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Receivers&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6ffab16" class="outline-4"&gt;
&lt;h5 id="org6ffab16"&gt;Schedulers&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-org6ffab16"&gt;
&lt;p&gt; Responsible for scheduling work on execution resources. &lt;/p&gt;

&lt;p&gt; Execution resources are things like threads, GPUs, and so on. &lt;/p&gt;

&lt;p&gt; Sends work to be done in a place. &lt;/p&gt;

&lt;div class="notes" id="orga800408"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf878c5c" class="outline-4"&gt;
&lt;h5 id="orgf878c5c"&gt;Senders&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-orgf878c5c"&gt;
&lt;p&gt; Senders describe work. &lt;/p&gt;

&lt;div class="notes" id="org3d29294"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf5c2ed9" class="outline-4"&gt;
&lt;h5 id="orgf5c2ed9"&gt;Receivers&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-orgf5c2ed9"&gt;
&lt;p&gt; Receivers are where work terminates. &lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt; Value channel &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt; Error channel &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Stopped channel&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="notes" id="org5d9d478"&gt;
&lt;p&gt; Work can terminate in three different ways. &lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Return a value.&lt;/li&gt;
&lt;li&gt;Throw an exception&lt;/li&gt;
&lt;li&gt;Be canceled&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; It's been a few minutes. Lets see some simple code. &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd098f7f" class="outline-4"&gt;
&lt;h5 id="orgd098f7f"&gt;Hello Async World&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-orgd098f7f"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-C++" id="nil"&gt;&lt;span class="linenr"&gt; 1: &lt;/span&gt;
&lt;span class="linenr"&gt; 2: &lt;/span&gt;&lt;span class="org-preprocessor"&gt;#include&lt;/span&gt; &lt;span class="org-string"&gt;&amp;lt;stdexec/execution.hpp&amp;gt;&lt;/span&gt;
&lt;span class="linenr"&gt; 3: &lt;/span&gt;&lt;span class="org-preprocessor"&gt;#include&lt;/span&gt; &lt;span class="org-string"&gt;&amp;lt;exec/static_thread_pool.hpp&amp;gt;&lt;/span&gt;
&lt;span class="linenr"&gt; 4: &lt;/span&gt;&lt;span class="org-preprocessor"&gt;#include&lt;/span&gt; &lt;span class="org-string"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class="linenr"&gt; 5: &lt;/span&gt;
&lt;span class="linenr"&gt; 6: &lt;/span&gt;&lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-function-name"&gt;main&lt;/span&gt;() {
&lt;span class="linenr"&gt; 7: &lt;/span&gt;  &lt;span class="org-constant"&gt;exec&lt;/span&gt;::&lt;span class="org-type"&gt;static_thread_pool&lt;/span&gt; &lt;span class="org-variable-name"&gt;pool&lt;/span&gt;(8);
&lt;span class="linenr"&gt; 8: &lt;/span&gt;
&lt;span class="linenr"&gt; 9: &lt;/span&gt;  &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::&lt;span class="org-type"&gt;scheduler&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;sch&lt;/span&gt; = pool.get_scheduler();
&lt;span class="linenr"&gt;10: &lt;/span&gt;
&lt;span class="linenr"&gt;11: &lt;/span&gt;  &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::&lt;span class="org-type"&gt;sender&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;begin&lt;/span&gt; = &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::schedule(sch);
&lt;span class="linenr"&gt;12: &lt;/span&gt;  &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::&lt;span class="org-type"&gt;sender&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;hi&lt;/span&gt;    = &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::then(begin, [] {
&lt;span class="linenr"&gt;13: &lt;/span&gt;    &lt;span class="org-constant"&gt;std&lt;/span&gt;::cout &amp;lt;&amp;lt; &lt;span class="org-string"&gt;"Hello world! Have an int.\n"&lt;/span&gt;;
&lt;span class="linenr"&gt;14: &lt;/span&gt;    &lt;span class="org-keyword"&gt;return&lt;/span&gt; 13;
&lt;span class="linenr"&gt;15: &lt;/span&gt;  });
&lt;span class="linenr"&gt;16: &lt;/span&gt;
&lt;span class="linenr"&gt;17: &lt;/span&gt;  &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;add_42&lt;/span&gt; = &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::then(hi, [](&lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;arg&lt;/span&gt;) { &lt;span class="org-keyword"&gt;return&lt;/span&gt; arg + 42; });
&lt;span class="linenr"&gt;18: &lt;/span&gt;
&lt;span class="linenr"&gt;19: &lt;/span&gt;  &lt;span class="org-keyword"&gt;auto&lt;/span&gt; [i] = &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::sync_wait(add_42).value();
&lt;span class="linenr"&gt;20: &lt;/span&gt;
&lt;span class="linenr"&gt;21: &lt;/span&gt;  &lt;span class="org-constant"&gt;std&lt;/span&gt;::cout &amp;lt;&amp;lt; &lt;span class="org-string"&gt;"The int is "&lt;/span&gt; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &lt;span class="org-string"&gt;'\n'&lt;/span&gt;;
&lt;span class="linenr"&gt;22: &lt;/span&gt;
&lt;span class="linenr"&gt;23: &lt;/span&gt;  &lt;span class="org-keyword"&gt;return&lt;/span&gt; 0;
&lt;span class="linenr"&gt;24: &lt;/span&gt;}
&lt;span class="linenr"&gt;25: &lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt; &lt;a href="https://godbolt.org/z/1M5enroaE"&gt;Compiler Explorer&lt;/a&gt; &lt;/p&gt;

&lt;div class="notes" id="org2eb3f3f"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf7d68f0" class="outline-4"&gt;
&lt;h5 id="orgf7d68f0"&gt;Hello Async World Results&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-orgf7d68f0"&gt;
&lt;em&gt;&lt;/em&gt;
&lt;pre class="example" id="nil"&gt;
Hello world! Have an int.
The int is 55
&lt;/pre&gt;

&lt;div class="notes" id="orgbf13cfb"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd5015b3" class="outline-4"&gt;
&lt;h5 id="orgd5015b3"&gt;When All - Concurent Async&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-orgd5015b3"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="linenr"&gt; 1: &lt;/span&gt;&lt;span class="org-constant"&gt;exec&lt;/span&gt;::&lt;span class="org-type"&gt;static_thread_pool&lt;/span&gt; &lt;span class="org-variable-name"&gt;pool&lt;/span&gt;(3);
&lt;span class="linenr"&gt; 2: &lt;/span&gt;
&lt;span class="linenr"&gt; 3: &lt;/span&gt;&lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;sched&lt;/span&gt; = pool.get_scheduler();
&lt;span class="linenr"&gt; 4: &lt;/span&gt;
&lt;span class="linenr"&gt; 5: &lt;/span&gt;&lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;fun&lt;/span&gt; = [](&lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;i&lt;/span&gt;) { &lt;span class="org-keyword"&gt;return&lt;/span&gt; i * i; };
&lt;span class="linenr"&gt; 6: &lt;/span&gt;
&lt;span class="linenr"&gt; 7: &lt;/span&gt;&lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;work&lt;/span&gt; = &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::when_all(
&lt;span class="linenr"&gt; 8: &lt;/span&gt;    &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::on(sched, &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::just(0) | &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::then(fun)),
&lt;span class="linenr"&gt; 9: &lt;/span&gt;    &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::on(sched, &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::just(1) | &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::then(fun)),
&lt;span class="linenr"&gt;10: &lt;/span&gt;    &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::on(sched, &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::just(2) | &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::then(fun)));
&lt;span class="linenr"&gt;11: &lt;/span&gt;
&lt;span class="linenr"&gt;12: &lt;/span&gt;&lt;span class="org-keyword"&gt;auto&lt;/span&gt; [i, j, k] = &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::sync_wait(&lt;span class="org-constant"&gt;std&lt;/span&gt;::move(work)).value();
&lt;span class="linenr"&gt;13: &lt;/span&gt;
&lt;span class="linenr"&gt;14: &lt;/span&gt;&lt;span class="org-constant"&gt;std&lt;/span&gt;::printf(&lt;span class="org-string"&gt;"%d %d %d\n"&lt;/span&gt;, i, j, k);
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="notes" id="org5b2f4f0"&gt;
&lt;p&gt; Describe some work: &lt;/p&gt;

&lt;p&gt; Creates 3 sender pipelines that are executed concurrently by passing to `when_all` &lt;/p&gt;

&lt;p&gt; Each sender is scheduled on `sched` using `on` and starts with `just(n)` that creates a Sender that just forwards `n` to the next sender. &lt;/p&gt;

&lt;p&gt; After `just(n)`, we chain `then(fun)` which invokes `fun` using the value provided from `just()` &lt;/p&gt;

&lt;p&gt; Note: No work actually happens here. Everything is lazy and `work` is just an object that statically represents the work to later be executed &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8c3d7d7" class="outline-4"&gt;
&lt;h5 id="org8c3d7d7"&gt;When All - Concurent Async - Results&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-org8c3d7d7"&gt;
&lt;em&gt;&lt;/em&gt;
&lt;pre class="example" id="nil"&gt;
0 1 4
&lt;/pre&gt;

&lt;div class="notes" id="orgebda57b"&gt;
&lt;p&gt; Order of execution is by chance, order of results is determined. &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb1730fb" class="outline-4"&gt;
&lt;h5 id="orgb1730fb"&gt;Dynamic Choice of Sender&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-orgb1730fb"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="linenr"&gt; 1: &lt;/span&gt;&lt;span class="org-constant"&gt;exec&lt;/span&gt;::&lt;span class="org-type"&gt;static_thread_pool&lt;/span&gt; &lt;span class="org-variable-name"&gt;pool&lt;/span&gt;(3);
&lt;span class="linenr"&gt; 2: &lt;/span&gt;
&lt;span class="linenr"&gt; 3: &lt;/span&gt;&lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;sched&lt;/span&gt; = pool.get_scheduler();
&lt;span class="linenr"&gt; 4: &lt;/span&gt;
&lt;span class="linenr"&gt; 5: &lt;/span&gt;&lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;fun&lt;/span&gt; = [](&lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;i&lt;/span&gt;) -&amp;gt; &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::sender &lt;span class="org-keyword"&gt;auto&lt;/span&gt; {
&lt;span class="linenr"&gt; 6: &lt;/span&gt;  &lt;span class="org-keyword"&gt;using&lt;/span&gt; &lt;span class="org-keyword"&gt;namespace&lt;/span&gt; &lt;span class="org-constant"&gt;std&lt;/span&gt;::&lt;span class="org-constant"&gt;string_literals&lt;/span&gt;;
&lt;span class="linenr"&gt; 7: &lt;/span&gt;  &lt;span class="org-keyword"&gt;if&lt;/span&gt; ((i % 2) == 0) {
&lt;span class="linenr"&gt; 8: &lt;/span&gt;    &lt;span class="org-keyword"&gt;return&lt;/span&gt; &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::just(&lt;span class="org-string"&gt;"even"&lt;/span&gt;s);
&lt;span class="linenr"&gt; 9: &lt;/span&gt;  } &lt;span class="org-keyword"&gt;else&lt;/span&gt; {
&lt;span class="linenr"&gt;10: &lt;/span&gt;    &lt;span class="org-keyword"&gt;return&lt;/span&gt; &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::just(&lt;span class="org-string"&gt;"odd"&lt;/span&gt;s);
&lt;span class="linenr"&gt;11: &lt;/span&gt;  }
&lt;span class="linenr"&gt;12: &lt;/span&gt;};
&lt;span class="linenr"&gt;13: &lt;/span&gt;
&lt;span class="linenr"&gt;14: &lt;/span&gt;&lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;work&lt;/span&gt; = &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::when_all(
&lt;span class="linenr"&gt;15: &lt;/span&gt;    &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::on(sched, &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::just(0) | &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::let_value(fun)),
&lt;span class="linenr"&gt;16: &lt;/span&gt;    &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::on(sched, &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::just(1) | &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::let_value(fun)),
&lt;span class="linenr"&gt;17: &lt;/span&gt;    &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::on(sched, &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::just(2) | &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::let_value(fun)));
&lt;span class="linenr"&gt;18: &lt;/span&gt;
&lt;span class="linenr"&gt;19: &lt;/span&gt;&lt;span class="org-keyword"&gt;auto&lt;/span&gt; [i, j, k] = &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::sync_wait(&lt;span class="org-constant"&gt;std&lt;/span&gt;::move(work)).value();
&lt;span class="linenr"&gt;20: &lt;/span&gt;
&lt;span class="linenr"&gt;21: &lt;/span&gt;&lt;span class="org-constant"&gt;std&lt;/span&gt;::printf(&lt;span class="org-string"&gt;"%s %s %s"&lt;/span&gt;, i.c_str(), j.c_str(), k.c_str());
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt; &lt;a href="https://godbolt.org/z/7vx69cMj9"&gt;Compiler Explorer&lt;/a&gt; &lt;/p&gt;

&lt;div class="notes" id="org8b2f9b4"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb681eb0" class="outline-4"&gt;
&lt;h5 id="orgb681eb0"&gt;Enough API to talk about control flow&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-orgb681eb0"&gt;
&lt;p&gt; The minimal set being: &lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;stdexec::on&lt;/li&gt;
&lt;li&gt;stdexec::just&lt;/li&gt;
&lt;li&gt;stdexec::then&lt;/li&gt;
&lt;li&gt;stdexec::let_value&lt;/li&gt;
&lt;li&gt;stdexec::sync_wait&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; I will mostly ignore the error and stop channels &lt;/p&gt;

&lt;div class="notes" id="orgd3933b4"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org294db44" class="outline-2"&gt;
&lt;h3 id="org294db44"&gt;Vigorous Handwaving&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org294db44"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgaa994df" class="outline-3"&gt;
&lt;h4 id="orgaa994df"&gt;Some Theory&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-orgaa994df"&gt;
&lt;p&gt; Continuation Passing Style &lt;/p&gt;

&lt;div class="notes" id="orgfcb288c"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd5b64c5" class="outline-4"&gt;
&lt;h5 id="orgd5b64c5"&gt;Not At All New&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-orgd5b64c5"&gt;
&lt;p&gt; Sussman and Steele in 1975 &lt;/p&gt;

&lt;p&gt; &lt;a href="https://dspace.mit.edu/bitstream/handle/1721.1/5794/AIM-349.pdf"&gt;AI Memo 349: "Scheme: An Interpreter for Extended Lambda Calculus"&lt;/a&gt; &lt;/p&gt;

&lt;div class="notes" id="org4fc8969"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0871c6c" class="outline-4"&gt;
&lt;h5 id="org0871c6c"&gt;Pass a "Continuation"&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-org0871c6c"&gt;
&lt;p&gt; Where to go next rather than return the value. &lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-haskell" id="nil"&gt;&lt;span class="org-haskell-definition"&gt;add&lt;/span&gt; &lt;span class="org-haskell-operator"&gt;::&lt;/span&gt; &lt;span class="org-haskell-type"&gt;Float&lt;/span&gt; &lt;span class="org-haskell-operator"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="org-haskell-type"&gt;Float&lt;/span&gt; &lt;span class="org-haskell-operator"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="org-haskell-type"&gt;Float&lt;/span&gt;
&lt;span class="org-haskell-definition"&gt;add&lt;/span&gt; a b &lt;span class="org-haskell-operator"&gt;=&lt;/span&gt; a &lt;span class="org-haskell-operator"&gt;+&lt;/span&gt; b

&lt;span class="org-haskell-definition"&gt;add_cps&lt;/span&gt; &lt;span class="org-haskell-operator"&gt;::&lt;/span&gt; &lt;span class="org-haskell-type"&gt;Float&lt;/span&gt; &lt;span class="org-haskell-operator"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="org-haskell-type"&gt;Float&lt;/span&gt; &lt;span class="org-haskell-operator"&gt;-&amp;gt;&lt;/span&gt; (&lt;span class="org-haskell-type"&gt;Float&lt;/span&gt; &lt;span class="org-haskell-operator"&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class="org-haskell-operator"&gt;-&amp;gt;&lt;/span&gt; a
&lt;span class="org-haskell-definition"&gt;add_cps&lt;/span&gt; a b cont &lt;span class="org-haskell-operator"&gt;=&lt;/span&gt; cont (a &lt;span class="org-haskell-operator"&gt;+&lt;/span&gt; b)
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-function-name"&gt;add&lt;/span&gt;(&lt;span class="org-type"&gt;float&lt;/span&gt; &lt;span class="org-variable-name"&gt;a&lt;/span&gt;, &lt;span class="org-type"&gt;float&lt;/span&gt; &lt;span class="org-variable-name"&gt;b&lt;/span&gt;) -&amp;gt; &lt;span class="org-type"&gt;float&lt;/span&gt; {
    &lt;span class="org-keyword"&gt;return&lt;/span&gt; a + b;
}

&lt;span class="org-keyword"&gt;template&lt;/span&gt;&amp;lt;&lt;span class="org-keyword"&gt;typename&lt;/span&gt; &lt;span class="org-type"&gt;Cont&lt;/span&gt;&amp;gt;
&lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-function-name"&gt;add_cps&lt;/span&gt;(&lt;span class="org-type"&gt;float&lt;/span&gt; &lt;span class="org-variable-name"&gt;a&lt;/span&gt;, &lt;span class="org-type"&gt;float&lt;/span&gt; &lt;span class="org-variable-name"&gt;b&lt;/span&gt;, &lt;span class="org-type"&gt;Cont&lt;/span&gt; &lt;span class="org-variable-name"&gt;k&lt;/span&gt;) {
    &lt;span class="org-keyword"&gt;return&lt;/span&gt; k(a+b);
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="notes" id="org83586c7"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0559af1" class="outline-4"&gt;
&lt;h5 id="org0559af1"&gt;Inherently a tail call&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-org0559af1"&gt;
&lt;p&gt; In continuation passing style we never return. &lt;/p&gt;

&lt;p&gt; We send a value to the rest of the program. &lt;/p&gt;

&lt;p&gt; Hard to express in C++. &lt;/p&gt;

&lt;p&gt; Extra machinery necessary to do the plumbing. &lt;/p&gt;

&lt;p&gt; Also, some risk, so we don't always do TCO. &lt;/p&gt;

&lt;p&gt; We keep the sender "thunks" live so we don't dangle references. &lt;/p&gt;

&lt;div class="notes" id="org7ce856a"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1e75715" class="outline-4"&gt;
&lt;h5 id="org1e75715"&gt;Intermittently Popular as a Compiler Technique&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-org1e75715"&gt;
&lt;p&gt; The transformations of direct functions to CPS are mechanical. &lt;/p&gt;

&lt;p&gt; The result is easier to optimize and mechanically reason about. &lt;/p&gt;

&lt;p&gt; Equivalent to Single Static Assignment. &lt;/p&gt;

&lt;p&gt; Structured Programming can be converted to CPS. &lt;/p&gt;

&lt;div class="notes" id="org6493700"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9562d05" class="outline-4"&gt;
&lt;h5 id="org9562d05"&gt;Delimted Continuations&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-org9562d05"&gt;
&lt;p&gt; General continuations reified as a function. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt; Everyone knows that when a process executes a system call like ‘read’, it gets suspended. When the disk delivers the data, the process is resumed. That suspension of a process is its continuation. It is delimited: it is not the check-point of the whole OS, it is the check-point of a process only, from the invocation of main() up to the point main() returns. Normally these suspensions are resumed only once, but can be zero times (exit) or twice (fork). &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; Oleg Kiselyov &lt;a href="https://okmij.org/ftp/continuations/Fest2008-talk-notes.pdf"&gt;Fest2008-talk-notes.pdf&lt;/a&gt; &lt;/p&gt;

&lt;div class="notes" id="orgf6e78f9"&gt;
&lt;p&gt; If this qoute reminds you of coroutines, you are paying attention. &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9068f85" class="outline-4"&gt;
&lt;h5 id="org9068f85"&gt;Haskell's Cont Type&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-org9068f85"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-haskell" id="nil"&gt;&lt;span class="org-haskell-keyword"&gt;newtype&lt;/span&gt; &lt;span class="org-haskell-type"&gt;Cont&lt;/span&gt; r a &lt;span class="org-haskell-operator"&gt;=&lt;/span&gt; &lt;span class="org-haskell-constructor"&gt;Cont&lt;/span&gt; { runCont &lt;span class="org-haskell-operator"&gt;::&lt;/span&gt; (a &lt;span class="org-haskell-operator"&gt;-&amp;gt;&lt;/span&gt; r) &lt;span class="org-haskell-operator"&gt;-&amp;gt;&lt;/span&gt; r }
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt; This is &lt;u&gt;roughly&lt;/u&gt; equivalent to the sender value channel. A Cont takes a reciever, a function that consumes the value being sent, and produces an r, the result type. &lt;/p&gt;

&lt;p&gt; The &lt;code&gt;identity&lt;/code&gt; function is often used. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org172f559" class="outline-4"&gt;
&lt;h5 id="org172f559"&gt;Underlies &lt;code&gt;std::execution&lt;/code&gt;&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-org172f559"&gt;
&lt;p&gt; The plumbing is hidden. &lt;/p&gt;

&lt;p&gt; Senders "send" to their continuations, delimted by the Reciever. &lt;/p&gt;

&lt;div class="notes" id="orgd311a42"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf9763ec" class="outline-3"&gt;
&lt;h4 id="orgf9763ec"&gt;Another Level of Indirection&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-orgf9763ec"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org68f9649" class="outline-4"&gt;
&lt;h5 id="org68f9649"&gt;Solves all problems&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-org68f9649"&gt;
&lt;p&gt; Adds two more. &lt;/p&gt;

&lt;p&gt; At least &lt;/p&gt;

&lt;div class="notes" id="orgb13c3fd"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga29d66f" class="outline-4"&gt;
&lt;h5 id="orga29d66f"&gt;CPS Indirects Function Return&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-orga29d66f"&gt;
&lt;p&gt; Transform a function &lt;/p&gt;

&lt;p style="text-align:center"&gt; $latex   A  \rightarrow B   $ &lt;/p&gt;


&lt;p&gt; to &lt;/p&gt;

&lt;p style="text-align:center"&gt; $latex   A  \rightarrow B  \rightarrow ( B \rightarrow R ) \rightarrow R   $ &lt;/p&gt;


&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-haskell" id="nil"&gt;&lt;span class="org-haskell-definition"&gt;add&lt;/span&gt; &lt;span class="org-haskell-operator"&gt;::&lt;/span&gt; &lt;span class="org-haskell-type"&gt;Float&lt;/span&gt; &lt;span class="org-haskell-operator"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="org-haskell-type"&gt;Float&lt;/span&gt; &lt;span class="org-haskell-operator"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="org-haskell-type"&gt;Float&lt;/span&gt;
&lt;span class="org-haskell-definition"&gt;add&lt;/span&gt; a b &lt;span class="org-haskell-operator"&gt;=&lt;/span&gt; a &lt;span class="org-haskell-operator"&gt;+&lt;/span&gt; b

&lt;span class="org-haskell-definition"&gt;add_cps&lt;/span&gt; &lt;span class="org-haskell-operator"&gt;::&lt;/span&gt; &lt;span class="org-haskell-type"&gt;Float&lt;/span&gt; &lt;span class="org-haskell-operator"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="org-haskell-type"&gt;Float&lt;/span&gt; &lt;span class="org-haskell-operator"&gt;-&amp;gt;&lt;/span&gt; (&lt;span class="org-haskell-type"&gt;Float&lt;/span&gt; &lt;span class="org-haskell-operator"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="org-haskell-type"&gt;A&lt;/span&gt;) &lt;span class="org-haskell-operator"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="org-haskell-type"&gt;A&lt;/span&gt;
&lt;span class="org-haskell-definition"&gt;add_cps&lt;/span&gt; a b cont &lt;span class="org-haskell-operator"&gt;=&lt;/span&gt; cont (a &lt;span class="org-haskell-operator"&gt;+&lt;/span&gt; b)
&lt;/pre&gt;
&lt;/div&gt;


&lt;div class="notes" id="orgde3c0e9"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgaf9b3e1" class="outline-4"&gt;
&lt;h5 id="orgaf9b3e1"&gt;Sender Closes Over A&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-orgaf9b3e1"&gt;
&lt;p style="text-align:center"&gt; $latex   B  \rightarrow ( B \rightarrow R ) \rightarrow R   $ &lt;/p&gt;

&lt;p&gt; The $LATEX A$ is (mostly) erased from the Sender. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2621484" class="outline-4"&gt;
&lt;h5 id="org2621484"&gt;Reciever Is The Transform to Result&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-org2621484"&gt;
&lt;p style="text-align:center"&gt; $latex   ( B \rightarrow R ) \rightarrow R   $ &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4c55ea0" class="outline-3"&gt;
&lt;h4 id="org4c55ea0"&gt;Some Pictures&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org4c55ea0"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5e7ea49" class="outline-5"&gt;
&lt;h6 id="org5e7ea49"&gt;Sender&lt;/h6&gt;
&lt;div class="outline-text-5" id="text-org5e7ea49"&gt;
&lt;div id="org2d613b7" class="figure"&gt; &lt;p&gt;&lt;img src="https://sdowney.org/wp-content/uploads/2024/05/sender.png" alt="sender.png"&gt; &lt;/p&gt; &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb5de8b8" class="outline-5"&gt;
&lt;h6 id="orgb5de8b8"&gt;&lt;code&gt;just&lt;/code&gt;&lt;/h6&gt;
&lt;div class="outline-text-5" id="text-orgb5de8b8"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::just(0)
&lt;/pre&gt;
&lt;/div&gt;

&lt;div id="org23c38c7" class="figure"&gt; &lt;p&gt;&lt;img src="https://sdowney.org/wp-content/uploads/2024/05/just.png" alt="just.png"&gt; &lt;/p&gt; &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org533dd2e" class="outline-5"&gt;
&lt;h6 id="org533dd2e"&gt;&lt;code&gt;then&lt;/code&gt;&lt;/h6&gt;
&lt;div class="outline-text-5" id="text-org533dd2e"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-function-name"&gt;f&lt;/span&gt;(&lt;span class="org-type"&gt;A&lt;/span&gt; &lt;span class="org-variable-name"&gt;a&lt;/span&gt;) -&amp;gt; &lt;span class="org-type"&gt;B&lt;/span&gt;;
&lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;s&lt;/span&gt; = &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::just(a) | &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::then(f);
&lt;/pre&gt;
&lt;/div&gt;

&lt;div id="org7400c8c" class="figure"&gt; &lt;p&gt;&lt;img src="https://sdowney.org/wp-content/uploads/2024/05/then.png" alt="then.png"&gt; &lt;/p&gt; &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf0c5b3f" class="outline-5"&gt;
&lt;h6 id="orgf0c5b3f"&gt;&lt;code&gt;let_value&lt;/code&gt;&lt;/h6&gt;
&lt;div class="outline-text-5" id="text-orgf0c5b3f"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="org-type"&gt;sender_of&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;set_value_t&lt;/span&gt;(&lt;span class="org-variable-name"&gt;B&lt;/span&gt;)&amp;gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-function-name"&gt;snd&lt;/span&gt;(&lt;span class="org-type"&gt;A&lt;/span&gt; &lt;span class="org-variable-name"&gt;a&lt;/span&gt;);
&lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;s&lt;/span&gt; = &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::just(a) | &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::let_value(snd);
&lt;/pre&gt;
&lt;/div&gt;

&lt;div id="org8f34211" class="figure"&gt; &lt;p&gt;&lt;img src="https://sdowney.org/wp-content/uploads/2024/05/let_value.png" alt="let_value.png"&gt; &lt;/p&gt; &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5ac08ab" class="outline-3"&gt;
&lt;h4 id="org5ac08ab"&gt;In which we use the M word&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org5ac08ab"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org134a392" class="outline-4"&gt;
&lt;h5 id="org134a392"&gt;Sender is a Monad&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-org134a392"&gt;
&lt;p&gt; (surprise) &lt;/p&gt;

&lt;p&gt; (shock, dismay) &lt;/p&gt;

&lt;div class="notes" id="orgdbe487b"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8b69996" class="outline-4"&gt;
&lt;h5 id="org8b69996"&gt;Function Composition is the hint&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-org8b69996"&gt;
&lt;p&gt; Functions are units of work. &lt;/p&gt;

&lt;p&gt; We compose them into programs. &lt;/p&gt;

&lt;p&gt; The question is if the rules apply. &lt;/p&gt;

&lt;div class="notes" id="org981c41e"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge30880f" class="outline-4"&gt;
&lt;h5 id="orge30880f"&gt;Monadic Interface&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-orge30880f"&gt;
&lt;dl class="org-dl"&gt;
&lt;dt&gt;bind or and_then&lt;/dt&gt;&lt;dd&gt;&lt;p style="text-align:center"&gt; $latex   M \langle a \rangle \rightarrow (a \rightarrow M \langle b \rangle ) \rightarrow M \langle b \rangle   $ &lt;/p&gt;&lt;/dd&gt;

&lt;dt&gt;fish or kleisli arrow &lt;/dt&gt;&lt;dd&gt;&lt;p style="text-align:center"&gt; $latex   (a \rightarrow M \langle b \rangle ) \rightarrow (b \rightarrow M \langle c \rangle ) \rightarrow (a \rightarrow M \langle c \rangle )   $ &lt;/p&gt;&lt;/dd&gt;

&lt;dt&gt;join or flatten or mconcat&lt;/dt&gt;&lt;dd&gt;&lt;p style="text-align:center"&gt; $latex   M \langle M \langle a \rangle \rangle \rightarrow  M \langle a \rangle   $ &lt;/p&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;div class="notes" id="orgb4e34d8"&gt;
&lt;p&gt; Monad Interface &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgadd7e17" class="outline-4"&gt;
&lt;h5 id="orgadd7e17"&gt;Applicative and Functor parts&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-orgadd7e17"&gt;
&lt;dl class="org-dl"&gt;
&lt;dt&gt;make or pure or return&lt;/dt&gt;&lt;dd&gt;&lt;p style="text-align:center"&gt; $latex   a  \rightarrow  M \langle a \rangle   $ &lt;/p&gt;&lt;/dd&gt;

&lt;dt&gt;fmap or transform&lt;/dt&gt;&lt;dd&gt;&lt;p style="text-align:center"&gt; $latex     (a \rightarrow b) \rightarrow M \langle a \rangle \rightarrow M \langle b \rangle    $ &lt;/p&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt; Any one of the first three and one of the second two can define the other three &lt;/p&gt;

&lt;div class="notes" id="org1ea8d66"&gt;
&lt;p&gt; Monad Interface &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8809cf7" class="outline-4"&gt;
&lt;h5 id="org8809cf7"&gt;Monad Laws&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-org8809cf7"&gt;
&lt;dl class="org-dl"&gt;
&lt;dt&gt;left identity&lt;/dt&gt;&lt;dd&gt;bind(pure(a), h) == h(a)&lt;/dd&gt;
&lt;dt&gt;right identity&lt;/dt&gt;&lt;dd&gt;bind(m, pure) == m&lt;/dd&gt;
&lt;dt&gt;associativity&lt;/dt&gt;&lt;dd&gt;bind(bind(m, g), h) == bind(m, bind((\x -&amp;gt; g(x), h))&lt;/dd&gt;
&lt;/dl&gt;

&lt;div class="notes" id="orgdeee1f4"&gt;
&lt;p&gt; Monad Laws &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4a2ed42" class="outline-4"&gt;
&lt;h5 id="org4a2ed42"&gt;Sender is Three Monads in a Trench-coat&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-org4a2ed42"&gt;
&lt;p&gt; Stacked up. &lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Value&lt;/li&gt;
&lt;li&gt;Error&lt;/li&gt;
&lt;li&gt;Stopped&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="notes" id="orge90651e"&gt;
&lt;p&gt; The three channels can be crossed, mixed, and remixed. Focus on the value channel for simplicity. &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd26dd21" class="outline-3"&gt;
&lt;h4 id="orgd26dd21"&gt;The Three Monadic Parts&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-orgd26dd21"&gt;
&lt;div class="notes" id="org2736585"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgec26678" class="outline-4"&gt;
&lt;h5 id="orgec26678"&gt;&lt;code&gt;just&lt;/code&gt;&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-orgec26678"&gt;
&lt;p&gt; Send a value. &lt;/p&gt;

&lt;p&gt; &lt;code&gt;pure&lt;/code&gt; &lt;/p&gt;

&lt;div class="notes" id="orga22f135"&gt;
&lt;p&gt; just lifts a value into the monad &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgfe3008d" class="outline-4"&gt;
&lt;h5 id="orgfe3008d"&gt;&lt;code&gt;then&lt;/code&gt;&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-orgfe3008d"&gt;
&lt;p&gt; Send a value returned from a function that takes its argument from a Sender. &lt;/p&gt;

&lt;p&gt; &lt;code&gt;fmap&lt;/code&gt; or &lt;code&gt;transform&lt;/code&gt; &lt;/p&gt;

&lt;div class="notes" id="org4ce6d5a"&gt;
&lt;p&gt; then is the functor fmap &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org19ddb5d" class="outline-4"&gt;
&lt;h5 id="org19ddb5d"&gt;&lt;code&gt;let_value&lt;/code&gt;&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-org19ddb5d"&gt;
&lt;p&gt; Send what is returned by a Sender returned from a function that takes its argument from a Sender. &lt;/p&gt;

&lt;p&gt; &lt;code&gt;bind&lt;/code&gt; &lt;/p&gt;

&lt;div class="notes" id="orga0ab095"&gt;
&lt;p&gt; let value is the monadic bind &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org65d75e4" class="outline-4"&gt;
&lt;h5 id="org65d75e4"&gt;Necessary and Sufficient&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-org65d75e4"&gt;
&lt;p&gt; The monadic bind gives us the runtime choices we need. &lt;/p&gt;

&lt;div class="notes" id="org3710183"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9a8af39" class="outline-3"&gt;
&lt;h4 id="org9a8af39"&gt;Basis of Control&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org9a8af39"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Sequence&lt;/li&gt;
&lt;li&gt;Decision&lt;/li&gt;
&lt;li&gt;Recursion&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="notes" id="org24383ab"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9ba54a2" class="outline-4"&gt;
&lt;h5 id="org9ba54a2"&gt;Sequence&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-org9ba54a2"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="linenr"&gt; 1: &lt;/span&gt;  &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::&lt;span class="org-type"&gt;sender&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;work&lt;/span&gt; =
&lt;span class="linenr"&gt; 2: &lt;/span&gt;      &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::schedule(sch)
&lt;span class="linenr"&gt; 3: &lt;/span&gt;      | &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::then([] {
&lt;span class="linenr"&gt; 4: &lt;/span&gt;          &lt;span class="org-constant"&gt;std&lt;/span&gt;::cout &amp;lt;&amp;lt; &lt;span class="org-string"&gt;"Hello world! Have an int."&lt;/span&gt;;
&lt;span class="linenr"&gt; 5: &lt;/span&gt;          &lt;span class="org-keyword"&gt;return&lt;/span&gt; 13;
&lt;span class="linenr"&gt; 6: &lt;/span&gt;      })
&lt;span class="linenr"&gt; 7: &lt;/span&gt;      | &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::then([](&lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;arg&lt;/span&gt;) { &lt;span class="org-keyword"&gt;return&lt;/span&gt; arg + 42; });
&lt;span class="linenr"&gt; 8: &lt;/span&gt;
&lt;span class="linenr"&gt; 9: &lt;/span&gt;  &lt;span class="org-keyword"&gt;auto&lt;/span&gt; [i] = &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::sync_wait(work).value();
&lt;span class="linenr"&gt;10: &lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="notes" id="org27c1c32"&gt;
&lt;p&gt; One thing after another. &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org72e7b8d" class="outline-4"&gt;
&lt;h5 id="org72e7b8d"&gt;Decision&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-org72e7b8d"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="linenr"&gt; 1: &lt;/span&gt;&lt;span class="org-constant"&gt;exec&lt;/span&gt;::&lt;span class="org-type"&gt;static_thread_pool&lt;/span&gt; &lt;span class="org-variable-name"&gt;pool&lt;/span&gt;(8);
&lt;span class="linenr"&gt; 2: &lt;/span&gt;
&lt;span class="linenr"&gt; 3: &lt;/span&gt;&lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::&lt;span class="org-type"&gt;scheduler&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;sch&lt;/span&gt; = pool.get_scheduler();
&lt;span class="linenr"&gt; 4: &lt;/span&gt;
&lt;span class="linenr"&gt; 5: &lt;/span&gt;&lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::&lt;span class="org-type"&gt;sender&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;begin&lt;/span&gt;  = &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::schedule(sch);
&lt;span class="linenr"&gt; 6: &lt;/span&gt;&lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::&lt;span class="org-type"&gt;sender&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;seven&lt;/span&gt;  = &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::just(7);
&lt;span class="linenr"&gt; 7: &lt;/span&gt;&lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::&lt;span class="org-type"&gt;sender&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;eleven&lt;/span&gt; = &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::just(11);
&lt;span class="linenr"&gt; 8: &lt;/span&gt;
&lt;span class="linenr"&gt; 9: &lt;/span&gt;&lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::&lt;span class="org-type"&gt;sender&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;branch&lt;/span&gt; =
&lt;span class="linenr"&gt;10: &lt;/span&gt;    begin
&lt;span class="linenr"&gt;11: &lt;/span&gt;    | &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::then([]() { &lt;span class="org-keyword"&gt;return&lt;/span&gt; &lt;span class="org-constant"&gt;std&lt;/span&gt;::make_tuple(5, 4); })
&lt;span class="linenr"&gt;12: &lt;/span&gt;    | &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::let_value(
&lt;span class="linenr"&gt;13: &lt;/span&gt;        [=](&lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;tpl&lt;/span&gt;) {
&lt;span class="linenr"&gt;14: &lt;/span&gt;        &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-keyword"&gt;const&lt;/span&gt;&amp;amp; [&lt;span class="org-constant"&gt;i&lt;/span&gt;, &lt;span class="org-constant"&gt;j&lt;/span&gt;] = tpl;
&lt;span class="linenr"&gt;15: &lt;/span&gt;
&lt;span class="linenr"&gt;16: &lt;/span&gt;        &lt;span class="org-keyword"&gt;return&lt;/span&gt; tst((i &amp;gt; j),
&lt;span class="linenr"&gt;17: &lt;/span&gt;                   seven | &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::then([&amp;amp;](&lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;k&lt;/span&gt;) &lt;span class="org-keyword"&gt;noexcept&lt;/span&gt; {
&lt;span class="linenr"&gt;18: &lt;/span&gt;                       &lt;span class="org-constant"&gt;std&lt;/span&gt;::cout &amp;lt;&amp;lt; &lt;span class="org-string"&gt;"true branch "&lt;/span&gt; &amp;lt;&amp;lt; k &amp;lt;&amp;lt; &lt;span class="org-string"&gt;'\n'&lt;/span&gt;;
&lt;span class="linenr"&gt;19: &lt;/span&gt;                   }),
&lt;span class="linenr"&gt;20: &lt;/span&gt;                   eleven | &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::then([&amp;amp;](&lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;k&lt;/span&gt;) &lt;span class="org-keyword"&gt;noexcept&lt;/span&gt; {
&lt;span class="linenr"&gt;21: &lt;/span&gt;                       &lt;span class="org-constant"&gt;std&lt;/span&gt;::cout &amp;lt;&amp;lt; &lt;span class="org-string"&gt;"false branch "&lt;/span&gt; &amp;lt;&amp;lt; k &amp;lt;&amp;lt; &lt;span class="org-string"&gt;'\n'&lt;/span&gt;;
&lt;span class="linenr"&gt;22: &lt;/span&gt;                   }));
&lt;span class="linenr"&gt;23: &lt;/span&gt;    });
&lt;span class="linenr"&gt;24: &lt;/span&gt;
&lt;span class="linenr"&gt;25: &lt;/span&gt;&lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::sync_wait(&lt;span class="org-constant"&gt;std&lt;/span&gt;::move(branch));
&lt;/pre&gt;
&lt;/div&gt;

&lt;em&gt;&lt;/em&gt;
&lt;pre class="example" id="nil"&gt;
true branch 7
&lt;/pre&gt;

&lt;div class="notes" id="org6433988"&gt;
&lt;p&gt; Control what sender is sent at rentime depending on the state of the program when the work is executing rather than in the structure of the senders. &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgbaa8db1" class="outline-5"&gt;
&lt;h6 id="orgbaa8db1"&gt;&lt;code&gt;tst&lt;/code&gt; function&lt;/h6&gt;
&lt;div class="outline-text-5" id="text-orgbaa8db1"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="linenr"&gt; 1: &lt;/span&gt;&lt;span class="org-keyword"&gt;inline&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;tst&lt;/span&gt; = [](&lt;span class="org-type"&gt;bool&lt;/span&gt;                 &lt;span class="org-variable-name"&gt;cond&lt;/span&gt;,
&lt;span class="linenr"&gt; 2: &lt;/span&gt;                     &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::&lt;span class="org-type"&gt;sender&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;left&lt;/span&gt;,
&lt;span class="linenr"&gt; 3: &lt;/span&gt;                     &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::&lt;span class="org-type"&gt;sender&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;right&lt;/span&gt;)
&lt;span class="linenr"&gt; 4: &lt;/span&gt;    -&amp;gt; &lt;span class="org-constant"&gt;exec&lt;/span&gt;::&lt;span class="org-type"&gt;variant_sender&lt;/span&gt;&amp;lt;&lt;span class="org-keyword"&gt;decltype&lt;/span&gt;(left),
&lt;span class="linenr"&gt; 5: &lt;/span&gt;                            &lt;span class="org-keyword"&gt;decltype&lt;/span&gt;(right)&amp;gt; {
&lt;span class="linenr"&gt; 6: &lt;/span&gt;  &lt;span class="org-keyword"&gt;if&lt;/span&gt; (cond)
&lt;span class="linenr"&gt; 7: &lt;/span&gt;    &lt;span class="org-keyword"&gt;return&lt;/span&gt; left;
&lt;span class="linenr"&gt; 8: &lt;/span&gt;  &lt;span class="org-keyword"&gt;else&lt;/span&gt;
&lt;span class="linenr"&gt; 9: &lt;/span&gt;    &lt;span class="org-keyword"&gt;return&lt;/span&gt; right;
&lt;span class="linenr"&gt;10: &lt;/span&gt;};
&lt;span class="linenr"&gt;11: &lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org84e1bd6" class="outline-4"&gt;
&lt;h5 id="org84e1bd6"&gt;Recursion&lt;/h5&gt;
&lt;div class="outline-text-4" id="text-org84e1bd6"&gt;
&lt;div class="notes" id="org5757047"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org64da46e" class="outline-5"&gt;
&lt;h6 id="org64da46e"&gt;Simple Recursion&lt;/h6&gt;
&lt;div class="outline-text-5" id="text-org64da46e"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="linenr"&gt; 1: &lt;/span&gt;
&lt;span class="linenr"&gt; 2: &lt;/span&gt;&lt;span class="org-keyword"&gt;using&lt;/span&gt; &lt;span class="org-type"&gt;any_int_sender&lt;/span&gt; =
&lt;span class="linenr"&gt; 3: &lt;/span&gt;    &lt;span class="org-type"&gt;any_sender_of&lt;/span&gt;&amp;lt;&lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::set_value_t(&lt;span class="org-type"&gt;int&lt;/span&gt;),
&lt;span class="linenr"&gt; 4: &lt;/span&gt;                  &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::set_stopped_t(),
&lt;span class="linenr"&gt; 5: &lt;/span&gt;                  &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::set_error_t(&lt;span class="org-constant"&gt;std&lt;/span&gt;::exception_ptr)&amp;gt;;
&lt;span class="linenr"&gt; 6: &lt;/span&gt;
&lt;span class="linenr"&gt; 7: &lt;/span&gt;&lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-function-name"&gt;fac&lt;/span&gt;(&lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;n&lt;/span&gt;) -&amp;gt; &lt;span class="org-type"&gt;any_int_sender&lt;/span&gt; {
&lt;span class="linenr"&gt; 8: &lt;/span&gt;    &lt;span class="org-constant"&gt;std&lt;/span&gt;::cout &amp;lt;&amp;lt; &lt;span class="org-string"&gt;"factorial of "&lt;/span&gt; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &lt;span class="org-string"&gt;"\n"&lt;/span&gt;;
&lt;span class="linenr"&gt; 9: &lt;/span&gt;    &lt;span class="org-keyword"&gt;if&lt;/span&gt; (n == 0)
&lt;span class="linenr"&gt;10: &lt;/span&gt;        &lt;span class="org-keyword"&gt;return&lt;/span&gt; &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::just(1);
&lt;span class="linenr"&gt;11: &lt;/span&gt;
&lt;span class="linenr"&gt;12: &lt;/span&gt;    &lt;span class="org-keyword"&gt;return&lt;/span&gt; &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::just(n - 1)
&lt;span class="linenr"&gt;13: &lt;/span&gt;        | &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::let_value([](&lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;k&lt;/span&gt;) { &lt;span class="org-keyword"&gt;return&lt;/span&gt; fac(k); })
&lt;span class="linenr"&gt;14: &lt;/span&gt;        | &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::then([&lt;span class="org-constant"&gt;n&lt;/span&gt;](&lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;k&lt;/span&gt;) { &lt;span class="org-keyword"&gt;return&lt;/span&gt; k * n; });
&lt;span class="linenr"&gt;15: &lt;/span&gt;}
&lt;span class="linenr"&gt;16: &lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="linenr"&gt; 1: &lt;/span&gt;
&lt;span class="linenr"&gt; 2: &lt;/span&gt;    &lt;span class="org-type"&gt;int&lt;/span&gt;                  &lt;span class="org-variable-name"&gt;k&lt;/span&gt; = 10;
&lt;span class="linenr"&gt; 3: &lt;/span&gt;    &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::&lt;span class="org-type"&gt;sender&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;factorial&lt;/span&gt; =
&lt;span class="linenr"&gt; 4: &lt;/span&gt;        begin
&lt;span class="linenr"&gt; 5: &lt;/span&gt;        | &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::then([=]() { &lt;span class="org-keyword"&gt;return&lt;/span&gt; k; })
&lt;span class="linenr"&gt; 6: &lt;/span&gt;        | &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::let_value([](&lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;k&lt;/span&gt;) { &lt;span class="org-keyword"&gt;return&lt;/span&gt; fac(k); });
&lt;span class="linenr"&gt; 7: &lt;/span&gt;
&lt;span class="linenr"&gt; 8: &lt;/span&gt;    &lt;span class="org-constant"&gt;std&lt;/span&gt;::cout &amp;lt;&amp;lt; &lt;span class="org-string"&gt;"factorial built\n\n"&lt;/span&gt;;
&lt;span class="linenr"&gt; 9: &lt;/span&gt;
&lt;span class="linenr"&gt;10: &lt;/span&gt;    &lt;span class="org-keyword"&gt;auto&lt;/span&gt; [i] = &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::sync_wait(&lt;span class="org-constant"&gt;std&lt;/span&gt;::move(factorial)).value();
&lt;span class="linenr"&gt;11: &lt;/span&gt;    &lt;span class="org-constant"&gt;std&lt;/span&gt;::cout &amp;lt;&amp;lt; &lt;span class="org-string"&gt;"factorial "&lt;/span&gt; &amp;lt;&amp;lt; k &amp;lt;&amp;lt; &lt;span class="org-string"&gt;" = "&lt;/span&gt; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &lt;span class="org-string"&gt;'\n'&lt;/span&gt;;
&lt;span class="linenr"&gt;12: &lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;em&gt;&lt;/em&gt;
&lt;pre class="example" id="nil"&gt;
factorial built

factorial of 10
factorial of 9
factorial of 8
factorial of 7
factorial of 6
factorial of 5
factorial of 4
factorial of 3
factorial of 2
factorial of 1
factorial of 0
factorial 10 = 3628800
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgfc40dd9" class="outline-5"&gt;
&lt;h6 id="orgfc40dd9"&gt;General Recursion&lt;/h6&gt;
&lt;div class="outline-text-5" id="text-orgfc40dd9"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="linenr"&gt; 1: &lt;/span&gt;&lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-function-name"&gt;fib&lt;/span&gt;(&lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;n&lt;/span&gt;) -&amp;gt; &lt;span class="org-type"&gt;any_int_sender&lt;/span&gt; {
&lt;span class="linenr"&gt; 2: &lt;/span&gt;    &lt;span class="org-keyword"&gt;if&lt;/span&gt; (n == 0)
&lt;span class="linenr"&gt; 3: &lt;/span&gt;        &lt;span class="org-keyword"&gt;return&lt;/span&gt; &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::on(getDefaultScheduler(),  &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::just(0));
&lt;span class="linenr"&gt; 4: &lt;/span&gt;
&lt;span class="linenr"&gt; 5: &lt;/span&gt;    &lt;span class="org-keyword"&gt;if&lt;/span&gt; (n == 1)
&lt;span class="linenr"&gt; 6: &lt;/span&gt;        &lt;span class="org-keyword"&gt;return&lt;/span&gt; &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::on(getDefaultScheduler(), &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::just(1));
&lt;span class="linenr"&gt; 7: &lt;/span&gt;
&lt;span class="linenr"&gt; 8: &lt;/span&gt;    &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;work&lt;/span&gt; = &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::when_all(
&lt;span class="linenr"&gt; 9: &lt;/span&gt;                    &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::on(getDefaultScheduler(), &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::just(n - 1)) |
&lt;span class="linenr"&gt;10: &lt;/span&gt;                        &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::let_value([](&lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;k&lt;/span&gt;) { &lt;span class="org-keyword"&gt;return&lt;/span&gt; fib(k); }),
&lt;span class="linenr"&gt;11: &lt;/span&gt;                    &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::on(getDefaultScheduler(), &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::just(n - 2)) |
&lt;span class="linenr"&gt;12: &lt;/span&gt;                        &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::let_value([](&lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;k&lt;/span&gt;) { &lt;span class="org-keyword"&gt;return&lt;/span&gt; fib(k); })) |
&lt;span class="linenr"&gt;13: &lt;/span&gt;                &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::then([](&lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;i&lt;/span&gt;, &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;j&lt;/span&gt;) { &lt;span class="org-keyword"&gt;return&lt;/span&gt; i + j; });
&lt;span class="linenr"&gt;14: &lt;/span&gt;
&lt;span class="linenr"&gt;15: &lt;/span&gt;    &lt;span class="org-keyword"&gt;return&lt;/span&gt; work;
&lt;span class="linenr"&gt;16: &lt;/span&gt;}
&lt;span class="linenr"&gt;17: &lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="linenr"&gt; 1: &lt;/span&gt;
&lt;span class="linenr"&gt; 2: &lt;/span&gt;&lt;span class="org-type"&gt;int&lt;/span&gt;                  &lt;span class="org-variable-name"&gt;k&lt;/span&gt; = 30;
&lt;span class="linenr"&gt; 3: &lt;/span&gt;    &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::&lt;span class="org-type"&gt;sender&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;fibonacci&lt;/span&gt; =
&lt;span class="linenr"&gt; 4: &lt;/span&gt;        begin | &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::then([=]() { &lt;span class="org-keyword"&gt;return&lt;/span&gt; k; }) |
&lt;span class="linenr"&gt; 5: &lt;/span&gt;        &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::let_value([](&lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;k&lt;/span&gt;) { &lt;span class="org-keyword"&gt;return&lt;/span&gt; fib(k); });
&lt;span class="linenr"&gt; 6: &lt;/span&gt;
&lt;span class="linenr"&gt; 7: &lt;/span&gt;    &lt;span class="org-constant"&gt;std&lt;/span&gt;::cout &amp;lt;&amp;lt; &lt;span class="org-string"&gt;"fibonacci built\n"&lt;/span&gt;;
&lt;span class="linenr"&gt; 8: &lt;/span&gt;
&lt;span class="linenr"&gt; 9: &lt;/span&gt;    &lt;span class="org-keyword"&gt;auto&lt;/span&gt; [i] = &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::sync_wait(&lt;span class="org-constant"&gt;std&lt;/span&gt;::move(fibonacci)).value();
&lt;span class="linenr"&gt;10: &lt;/span&gt;    &lt;span class="org-constant"&gt;std&lt;/span&gt;::cout &amp;lt;&amp;lt; &lt;span class="org-string"&gt;"fibonacci "&lt;/span&gt; &amp;lt;&amp;lt; k &amp;lt;&amp;lt; &lt;span class="org-string"&gt;" = "&lt;/span&gt; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &lt;span class="org-string"&gt;'\n'&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;

&lt;em&gt;&lt;/em&gt;
&lt;pre class="example" id="nil"&gt;
fibonacci built
fibonacci 30 = 832040
fibonacci 30 = 832040
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5fd882c" class="outline-5"&gt;
&lt;h6 id="org5fd882c"&gt;Fold&lt;/h6&gt;
&lt;div class="outline-text-5" id="text-org5fd882c"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="linenr"&gt; 1: &lt;/span&gt;
&lt;span class="linenr"&gt; 2: &lt;/span&gt;        &lt;span class="org-keyword"&gt;if&lt;/span&gt; (first == last) {
&lt;span class="linenr"&gt; 3: &lt;/span&gt;            &lt;span class="org-keyword"&gt;return&lt;/span&gt; &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::just(U{&lt;span class="org-constant"&gt;std&lt;/span&gt;::move(init)});
&lt;span class="linenr"&gt; 4: &lt;/span&gt;        }
&lt;span class="linenr"&gt; 5: &lt;/span&gt;
&lt;span class="linenr"&gt; 6: &lt;/span&gt;        &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;nxt&lt;/span&gt; =
&lt;span class="linenr"&gt; 7: &lt;/span&gt;            &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::just(&lt;span class="org-constant"&gt;std&lt;/span&gt;::invoke(f, &lt;span class="org-constant"&gt;std&lt;/span&gt;::move(init), *first)) |
&lt;span class="linenr"&gt; 8: &lt;/span&gt;            &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::let_value([&lt;span class="org-keyword"&gt;this&lt;/span&gt;,
&lt;span class="linenr"&gt; 9: &lt;/span&gt;                                &lt;span class="org-variable-name"&gt;first&lt;/span&gt; = first,
&lt;span class="linenr"&gt;10: &lt;/span&gt;                                &lt;span class="org-variable-name"&gt;last&lt;/span&gt; = last,
&lt;span class="linenr"&gt;11: &lt;/span&gt;                                &lt;span class="org-variable-name"&gt;f&lt;/span&gt; = f
&lt;span class="linenr"&gt;12: &lt;/span&gt;                                ](&lt;span class="org-type"&gt;U&lt;/span&gt; &lt;span class="org-variable-name"&gt;u&lt;/span&gt;) {
&lt;span class="linenr"&gt;13: &lt;/span&gt;                &lt;span class="org-type"&gt;I&lt;/span&gt; &lt;span class="org-variable-name"&gt;i&lt;/span&gt; = first;
&lt;span class="linenr"&gt;14: &lt;/span&gt;                &lt;span class="org-keyword"&gt;return&lt;/span&gt; (*&lt;span class="org-keyword"&gt;this&lt;/span&gt;)(++i, last, u, f);
&lt;span class="linenr"&gt;15: &lt;/span&gt;            });
&lt;span class="linenr"&gt;16: &lt;/span&gt;        &lt;span class="org-keyword"&gt;return&lt;/span&gt; &lt;span class="org-constant"&gt;std&lt;/span&gt;::move(nxt);
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="linenr"&gt; 1: &lt;/span&gt;
&lt;span class="linenr"&gt; 2: &lt;/span&gt;    &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;v&lt;/span&gt; = &lt;span class="org-constant"&gt;std&lt;/span&gt;::&lt;span class="org-constant"&gt;ranges&lt;/span&gt;::iota_view{1, 10'000};
&lt;span class="linenr"&gt; 3: &lt;/span&gt;
&lt;span class="linenr"&gt; 4: &lt;/span&gt;    &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::&lt;span class="org-type"&gt;sender&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;work&lt;/span&gt; =
&lt;span class="linenr"&gt; 5: &lt;/span&gt;        begin
&lt;span class="linenr"&gt; 6: &lt;/span&gt;        | &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::let_value([&lt;span class="org-variable-name"&gt;i&lt;/span&gt; = &lt;span class="org-constant"&gt;std&lt;/span&gt;::&lt;span class="org-constant"&gt;ranges&lt;/span&gt;::begin(v),
&lt;span class="linenr"&gt; 7: &lt;/span&gt;                              &lt;span class="org-variable-name"&gt;s&lt;/span&gt; = &lt;span class="org-constant"&gt;std&lt;/span&gt;::&lt;span class="org-constant"&gt;ranges&lt;/span&gt;::end(v)]() {
&lt;span class="linenr"&gt; 8: &lt;/span&gt;            &lt;span class="org-keyword"&gt;return&lt;/span&gt; fold_left(i, s, 0, [](&lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;i&lt;/span&gt;, &lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;j&lt;/span&gt;) { &lt;span class="org-keyword"&gt;return&lt;/span&gt; i + j; });
&lt;span class="linenr"&gt; 9: &lt;/span&gt;        });
&lt;span class="linenr"&gt;10: &lt;/span&gt;
&lt;span class="linenr"&gt;11: &lt;/span&gt;    &lt;span class="org-keyword"&gt;auto&lt;/span&gt; [i] = &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::sync_wait(&lt;span class="org-constant"&gt;std&lt;/span&gt;::move(work)).value();
&lt;span class="linenr"&gt;12: &lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;em&gt;&lt;/em&gt;
&lt;pre class="example" id="nil"&gt;
work  = 49995000
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgcb782a7" class="outline-5"&gt;
&lt;h6 id="orgcb782a7"&gt;Backtrack&lt;/h6&gt;
&lt;div class="outline-text-5" id="text-orgcb782a7"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="org-keyword"&gt;using&lt;/span&gt; &lt;span class="org-type"&gt;any_node_sender&lt;/span&gt; =
    &lt;span class="org-type"&gt;any_sender_of&lt;/span&gt;&amp;lt;&lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::set_value_t(&lt;span class="org-constant"&gt;tree&lt;/span&gt;::&lt;span class="org-type"&gt;NodePtr&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;int&lt;/span&gt;&amp;gt;),
                  &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::set_stopped_t(),
                  &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::set_error_t(&lt;span class="org-constant"&gt;std&lt;/span&gt;::exception_ptr)&amp;gt;;

&lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-function-name"&gt;search_tree&lt;/span&gt;(&lt;span class="org-keyword"&gt;auto&lt;/span&gt;                    &lt;span class="org-variable-name"&gt;test&lt;/span&gt;,
                 &lt;span class="org-constant"&gt;tree&lt;/span&gt;::&lt;span class="org-type"&gt;NodePtr&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;int&lt;/span&gt;&amp;gt;      &lt;span class="org-variable-name"&gt;tree&lt;/span&gt;,
                 &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::&lt;span class="org-type"&gt;scheduler&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;sch&lt;/span&gt;,
                 &lt;span class="org-type"&gt;any_node_sender&lt;/span&gt;&amp;amp;&amp;amp;       &lt;span class="org-variable-name"&gt;fail&lt;/span&gt;) -&amp;gt; &lt;span class="org-type"&gt;any_node_sender&lt;/span&gt; {
    &lt;span class="org-keyword"&gt;if&lt;/span&gt; (tree == &lt;span class="org-constant"&gt;nullptr&lt;/span&gt;) {
        &lt;span class="org-keyword"&gt;return&lt;/span&gt; &lt;span class="org-constant"&gt;std&lt;/span&gt;::move(fail);
    }
    &lt;span class="org-keyword"&gt;if&lt;/span&gt; (test(tree)) {
        &lt;span class="org-keyword"&gt;return&lt;/span&gt; &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::just(tree);
    }
    &lt;span class="org-keyword"&gt;return&lt;/span&gt; &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::on(sch, &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::just()) |
           &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::let_value([=, &lt;span class="org-variable-name"&gt;fail&lt;/span&gt; = &lt;span class="org-constant"&gt;std&lt;/span&gt;::move(fail)]() &lt;span class="org-keyword"&gt;mutable&lt;/span&gt; {
               &lt;span class="org-keyword"&gt;return&lt;/span&gt; search_tree(
                   test,
                   tree-&amp;gt;left(),
                   sch,
                   &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::on(sch, &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::just()) |
                       &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::let_value(
                           [=, &lt;span class="org-variable-name"&gt;fail&lt;/span&gt; = &lt;span class="org-constant"&gt;std&lt;/span&gt;::move(fail)]() &lt;span class="org-keyword"&gt;mutable&lt;/span&gt; {
                               &lt;span class="org-keyword"&gt;return&lt;/span&gt; search_tree(
                                   test, tree-&amp;gt;right(), sch, &lt;span class="org-constant"&gt;std&lt;/span&gt;::move(fail));
                           }));
           });
    &lt;span class="org-keyword"&gt;return&lt;/span&gt; fail;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;    &lt;span class="org-constant"&gt;tree&lt;/span&gt;::&lt;span class="org-type"&gt;NodePtr&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;int&lt;/span&gt;&amp;gt; &lt;span class="org-variable-name"&gt;t&lt;/span&gt;;
    &lt;span class="org-keyword"&gt;for&lt;/span&gt; (&lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;i&lt;/span&gt; : &lt;span class="org-constant"&gt;std&lt;/span&gt;::&lt;span class="org-constant"&gt;ranges&lt;/span&gt;::&lt;span class="org-constant"&gt;views&lt;/span&gt;::iota(1, 10'000)) {
        &lt;span class="org-constant"&gt;tree&lt;/span&gt;::&lt;span class="org-constant"&gt;Tree&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;int&lt;/span&gt;&amp;gt;::insert(i, t);
    }

    &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;test&lt;/span&gt; = [](&lt;span class="org-constant"&gt;tree&lt;/span&gt;::&lt;span class="org-type"&gt;NodePtr&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;int&lt;/span&gt;&amp;gt; &lt;span class="org-variable-name"&gt;t&lt;/span&gt;) -&amp;gt; &lt;span class="org-type"&gt;bool&lt;/span&gt; {
        &lt;span class="org-keyword"&gt;return&lt;/span&gt; t ? t-&amp;gt;data() == 500 : &lt;span class="org-constant"&gt;false&lt;/span&gt;;
    };

    &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;fail&lt;/span&gt; = begin | &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::then([]() { &lt;span class="org-keyword"&gt;return&lt;/span&gt; &lt;span class="org-constant"&gt;tree&lt;/span&gt;::&lt;span class="org-type"&gt;NodePtr&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;int&lt;/span&gt;&amp;gt;{}; });

    &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::&lt;span class="org-type"&gt;sender&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;work&lt;/span&gt; =
        begin | &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::let_value([=]() {
            &lt;span class="org-keyword"&gt;return&lt;/span&gt; search_tree(test, t, sch, &lt;span class="org-constant"&gt;std&lt;/span&gt;::move(fail));
        });

    &lt;span class="org-keyword"&gt;auto&lt;/span&gt; [n] = &lt;span class="org-constant"&gt;stdexec&lt;/span&gt;::sync_wait(&lt;span class="org-constant"&gt;std&lt;/span&gt;::move(work)).value();

    &lt;span class="org-constant"&gt;std&lt;/span&gt;::cout &amp;lt;&amp;lt; &lt;span class="org-string"&gt;"work "&lt;/span&gt;
              &amp;lt;&amp;lt; &lt;span class="org-string"&gt;" = "&lt;/span&gt; &amp;lt;&amp;lt; n-&amp;gt;data() &amp;lt;&amp;lt; &lt;span class="org-string"&gt;'\n'&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;

&lt;em&gt;&lt;/em&gt;
&lt;pre class="example" id="nil"&gt;
work  = 500
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org91abfba" class="outline-2"&gt;
&lt;h3 id="org91abfba"&gt;Don't Do That&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org91abfba"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1aa4228" class="outline-3"&gt;
&lt;h4 id="org1aa4228"&gt;Can is not Should&lt;/h4&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga3f48a3" class="outline-3"&gt;
&lt;h4 id="orga3f48a3"&gt;Write an Algorithm&lt;/h4&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgbea3c89" class="outline-3"&gt;
&lt;h4 id="orgbea3c89"&gt;Why You Might&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-orgbea3c89"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Throughput&lt;/li&gt;
&lt;li&gt;Interruptable&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="notes" id="orgd77b1a9"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org03d3e92" class="outline-2"&gt;
&lt;h3 id="org03d3e92"&gt;Thank You&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org03d3e92"&gt;
&lt;div class="notes" id="org76ec745"&gt;
&lt;p&gt;  &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://sdowney.org/posts/index.php/2024/05/18/slides-from-cnow-2023-async-control-flow/</guid><pubDate>Sat, 18 May 2024 22:27:00 GMT</pubDate></item><item><title>Some Informal Remarks Towards a New Theory of Trait Customization</title><link>https://sdowney.org/posts/index.php/2023/12/24/some-informal-remarks-towards-a-new-theory-of-trait-customization/</link><dc:creator>Steve Downey</dc:creator><description>&lt;div id="outline-container-org0a7dcc5" class="outline-2"&gt;
&lt;h3 id="org0a7dcc5"&gt;A Possible Technique&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org0a7dcc5"&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="org-keyword"&gt;constexpr&lt;/span&gt; &lt;span class="org-type"&gt;bool&lt;/span&gt; &lt;span class="org-function-name"&gt;g&lt;/span&gt;(&lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;lhs&lt;/span&gt;, &lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;rhs&lt;/span&gt;) {
    &lt;span class="org-keyword"&gt;auto&lt;/span&gt;&amp;amp; &lt;span class="org-variable-name"&gt;op&lt;/span&gt; = &lt;span class="org-type"&gt;partial_eq&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;int&lt;/span&gt;&amp;gt;;
    &lt;span class="org-keyword"&gt;return&lt;/span&gt; op.ne(lhs, rhs);
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;a href="https://godbolt.org/z/Ge43cWfn8"&gt;Compiler Explorer with Supporting Code&lt;/a&gt;

A trait is defined as a template variable that implements the required operations. Implementation of those operations is possible via a variety of techniques, but existence is concept checkable. It might prove useful to explicitly opt in to a sufficiently generic trait.

The technique satisfies the openness requirement, that the trait can be created independently of the type that models the trait. There can still only be one definition, but this enables opting std:: types into new traits, for example.

It also doesn't universally grab an operation name. The trait variable is namespaceable.

Syntax isn't really awesome, but not utterly unworkable.

&lt;/div&gt;
&lt;/div&gt;

&lt;!-- TEASER_END --&gt;

&lt;div id="outline-container-org5ad6709" class="outline-2"&gt;
&lt;h3 id="org5ad6709"&gt;Background&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org5ad6709"&gt;

 Several years ago, Barry Revzin in "&lt;a href="https://brevzin.github.io/c++/2020/12/01/tag-invoke/"&gt;Why tag_invoke is not the solution I want"&lt;/a&gt; outlined the characteristics that a good customization interface would have. Quoting
&lt;blockquote&gt;
&lt;ol class="org-ol"&gt;
    &lt;li&gt;The ability to see clearly, in code, what the interface is that can (or needs to) be customized.&lt;/li&gt;
    &lt;li&gt;The ability to provide default implementations that can be overridden, not just non-defaulted functions.&lt;/li&gt;
    &lt;li&gt;The ability to opt in explicitly to the interface.&lt;/li&gt;
    &lt;li&gt;The inability to incorrectly opt in to the interface (for instance, if the interface has a function that takes an int, you cannot opt in by accidentally taking an unsigned int).&lt;/li&gt;
    &lt;li&gt;The ability to easily invoke the customized implementation. Alternatively, the inability to accidentally invoke the base implementation.&lt;/li&gt;
    &lt;li&gt;The ability to easily verify that a type implements an interface.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
I believe that with some support on the implementation side, and some &lt;code&gt;concept&lt;/code&gt; definitions to assert correct usage, having an explicit object that implements the required traits for a concept can satisfy more of the requirements than &lt;code&gt;tag_invoke&lt;/code&gt; or &lt;code&gt;std::&lt;/code&gt; customization points. The trade-off is that usage of the trait is explicit and not dependent on arguments to the trait, which means that it is more verbose and possible to get wrong in both subtle and gross ways.

&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org87d886f" class="outline-2"&gt;
&lt;h3 id="org87d886f"&gt;&lt;code&gt;concept_map&lt;/code&gt;&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org87d886f"&gt;

 In the original proposal for C++ concepts, there was a facility called ~concept_map~s where
&lt;blockquote&gt; Concept maps describe how a set of template arguments satisfy the requirements stated in the body of a concept definition.&lt;/blockquote&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="org-keyword"&gt;class&lt;/span&gt; &lt;span class="org-type"&gt;student_record&lt;/span&gt; {
  &lt;span class="org-keyword"&gt;public&lt;/span&gt;:
    &lt;span class="org-type"&gt;string&lt;/span&gt; &lt;span class="org-variable-name"&gt;id&lt;/span&gt;;
    &lt;span class="org-type"&gt;string&lt;/span&gt; &lt;span class="org-variable-name"&gt;name&lt;/span&gt;;
    &lt;span class="org-type"&gt;string&lt;/span&gt; &lt;span class="org-variable-name"&gt;address&lt;/span&gt;;
};

&lt;span class="org-keyword"&gt;concept&lt;/span&gt; &lt;span class="org-type"&gt;EqualityComparable&lt;/span&gt;&amp;lt;&lt;span class="org-keyword"&gt;typename&lt;/span&gt; &lt;span class="org-type"&gt;T&lt;/span&gt;&amp;gt; {
    &lt;span class="org-type"&gt;bool&lt;/span&gt; &lt;span class="org-keyword"&gt;operator&lt;/span&gt;&lt;span class="org-variable-name"&gt;==&lt;/span&gt;(&lt;span class="org-type"&gt;T&lt;/span&gt;, &lt;span class="org-type"&gt;T&lt;/span&gt;);
}

&lt;span class="org-type"&gt;concept_map&lt;/span&gt; &lt;span class="org-type"&gt;EqualityComparable&lt;/span&gt;&lt;span class="org-variable-name"&gt;&amp;lt;student_record&amp;gt;&lt;/span&gt; {
    &lt;span class="org-type"&gt;bool&lt;/span&gt; &lt;span class="org-keyword"&gt;operator&lt;/span&gt;&lt;span class="org-variable-name"&gt;==&lt;/span&gt;(&lt;span class="org-keyword"&gt;const&lt;/span&gt; &lt;span class="org-type"&gt;student_record&lt;/span&gt;&amp;amp; &lt;span class="org-variable-name"&gt;a&lt;/span&gt;, &lt;span class="org-keyword"&gt;const&lt;/span&gt; &lt;span class="org-type"&gt;student_record&lt;/span&gt;&amp;amp; &lt;span class="org-variable-name"&gt;b&lt;/span&gt;) {
        &lt;span class="org-keyword"&gt;return&lt;/span&gt; a.id == b.id;
    }
};

&lt;span class="org-keyword"&gt;template&lt;/span&gt;&amp;lt;&lt;span class="org-keyword"&gt;typename&lt;/span&gt; &lt;span class="org-type"&gt;T&lt;/span&gt;&amp;gt; &lt;span class="org-keyword"&gt;requires&lt;/span&gt; &lt;span class="org-type"&gt;EqualityComparable&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;T&lt;/span&gt;&amp;gt;
&lt;span class="org-type"&gt;void&lt;/span&gt; &lt;span class="org-function-name"&gt;f&lt;/span&gt;(&lt;span class="org-type"&gt;T&lt;/span&gt;);

f(student_record()); &lt;span class="org-comment-delimiter"&gt;// &lt;/span&gt;&lt;span class="org-comment"&gt;okay, have concept_map EqualityComparable&amp;lt;student_record&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2617.pdf"&gt;n2617&lt;/a&gt;

This allowed for customizing how the various requirements for a concept were implemented for a particular type.

This was lost in Concepts Lite, a.k.a C++20 Concepts.

Other generic type systems have implemented something like this feature, as well as definition checking. In particular, Rust Traits are an analagous feature.

&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org71089d8" class="outline-2"&gt;
&lt;h3 id="org71089d8"&gt;Rust Traits&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org71089d8"&gt;
&lt;blockquote&gt; A trait is a collection of methods defined for an unknown type: &lt;code&gt;Self&lt;/code&gt;. They can access other methods declared in the same trait.&lt;/blockquote&gt;
An example that Revzin mentions, and that my first example alludes to is PartialEq:
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-rust" id="nil"&gt;&lt;span class="org-keyword"&gt;pub&lt;/span&gt; &lt;span class="org-keyword"&gt;trait&lt;/span&gt; &lt;span class="org-type"&gt;PartialEq&lt;/span&gt;&amp;lt;&lt;span class="org-variable-name"&gt;Rhs&lt;/span&gt;: &lt;span class="org-rust-question-mark"&gt;?&lt;/span&gt;&lt;span class="org-type"&gt;Sized&lt;/span&gt; = &lt;span class="org-type"&gt;Self&lt;/span&gt;&amp;gt; {
    &lt;span class="org-doc"&gt;/// This method tests for `self` and `other` values to be equal, and is used&lt;/span&gt;
    &lt;span class="org-doc"&gt;/// by `==`.&lt;/span&gt;
    &lt;span class="org-keyword"&gt;fn&lt;/span&gt; &lt;span class="org-function-name"&gt;eq&lt;/span&gt;(&lt;span class="org-rust-ampersand"&gt;&amp;amp;&lt;/span&gt;&lt;span class="org-keyword"&gt;self&lt;/span&gt;, &lt;span class="org-variable-name"&gt;other&lt;/span&gt;: &lt;span class="org-rust-ampersand"&gt;&amp;amp;&lt;/span&gt;&lt;span class="org-type"&gt;Rhs&lt;/span&gt;) -&amp;gt; &lt;span class="org-type"&gt;bool&lt;/span&gt;;

    &lt;span class="org-doc"&gt;/// This method tests for `!=`. The default implementation is almost always&lt;/span&gt;
    &lt;span class="org-doc"&gt;/// sufficient, and should not be overridden without very good reason.&lt;/span&gt;
    &lt;span class="org-keyword"&gt;fn&lt;/span&gt; &lt;span class="org-function-name"&gt;ne&lt;/span&gt;(&lt;span class="org-rust-ampersand"&gt;&amp;amp;&lt;/span&gt;&lt;span class="org-keyword"&gt;self&lt;/span&gt;, &lt;span class="org-variable-name"&gt;other&lt;/span&gt;: &lt;span class="org-rust-ampersand"&gt;&amp;amp;&lt;/span&gt;&lt;span class="org-type"&gt;Rhs&lt;/span&gt;) -&amp;gt; &lt;span class="org-type"&gt;bool&lt;/span&gt; {
        !&lt;span class="org-keyword"&gt;self&lt;/span&gt;.eq(other)
    }
}
&lt;/pre&gt;
&lt;/div&gt;
From &lt;a href="https://doc.rust-lang.org/src/core/cmp.rs.html#219"&gt;https://doc.rust-lang.org/src/core/cmp.rs.html#219&lt;/a&gt;

In Rust this is built into the language, and operators like == are automatically rewritten into &lt;code&gt;eq&lt;/code&gt; and &lt;code&gt;ne&lt;/code&gt;. At least that's my understanding. We're not going to get that in C++, ever. With both Rust and Concept Maps, though, we do get new named operations that can be used unqualified in generic code and the compiler will be directed to the correct implementation.

Giving up on that is key to a way forward in C++.

&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9dd42da" class="outline-2"&gt;
&lt;h3 id="org9dd42da"&gt;A trait object&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org9dd42da"&gt;

 The technique I'm considering and describing here is modeled loosly after the implementation of Haskell typeclasses in GHC. For a particular instance of a typeclass, a record holding the operations based on the actual type in use is created and made available, and the named operations are lifted into scope and the functions in the record called when used. It is as if a virtual function table was implemented with name lookup rather than index.

In C++, particularly in current post-C++20 C++, we can look up an object via a template variable. The implementations of different specializations of a template variable do not need to be connected in any way. We have to provide a definition, since to make it look like a declaration it's necessary to provide some type such as false_type. Alternatively, we could declare it as an int, but mark it as &lt;code&gt;extern&lt;/code&gt; and not define it. I'm still researching alternatives.
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-C++" id="nil"&gt;&lt;span class="org-keyword"&gt;template&lt;/span&gt;&amp;lt;&lt;span class="org-keyword"&gt;class&lt;/span&gt; &lt;span class="org-type"&gt;T&lt;/span&gt;&amp;gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;someTrait&lt;/span&gt; = &lt;span class="org-constant"&gt;std&lt;/span&gt;::false_type{};

&lt;span class="org-keyword"&gt;template&lt;/span&gt; &amp;lt;&lt;span class="org-keyword"&gt;typename&lt;/span&gt; &lt;span class="org-type"&gt;T&lt;/span&gt;&amp;gt;
&lt;span class="org-keyword"&gt;extern&lt;/span&gt; &lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;otherTrait&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;
These are useful if there is no good generic definition of the trait.

If there is a good generic definition of a trait, the trait variable is straightforward:
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="org-keyword"&gt;constexpr&lt;/span&gt; &lt;span class="org-keyword"&gt;inline&lt;/span&gt; &lt;span class="org-keyword"&gt;struct&lt;/span&gt; {
    &lt;span class="org-keyword"&gt;constexpr&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-function-name"&gt;eq&lt;/span&gt;(&lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;rhs&lt;/span&gt;, &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;lhs&lt;/span&gt;) &lt;span class="org-keyword"&gt;const&lt;/span&gt; {&lt;span class="org-keyword"&gt;return&lt;/span&gt; rhs == lhs;}
    &lt;span class="org-keyword"&gt;constexpr&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-function-name"&gt;ne&lt;/span&gt;(&lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;rhs&lt;/span&gt;, &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;lhs&lt;/span&gt;) &lt;span class="org-keyword"&gt;const&lt;/span&gt; {&lt;span class="org-keyword"&gt;return&lt;/span&gt; &lt;span class="org-negation-char"&gt;!&lt;/span&gt;eq(lhs, rhs);}
} &lt;span class="org-variable-name"&gt;partial_eq_default&lt;/span&gt;;

&lt;span class="org-keyword"&gt;template&lt;/span&gt;&amp;lt;&lt;span class="org-keyword"&gt;class&lt;/span&gt; &lt;span class="org-type"&gt;T&lt;/span&gt;&amp;gt;
&lt;span class="org-keyword"&gt;constexpr&lt;/span&gt; &lt;span class="org-keyword"&gt;inline&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;partial_eq&lt;/span&gt; = partial_eq_default;
&lt;/pre&gt;
&lt;/div&gt;
In this case, though, there probably ought to be an opt in so that the trait can be checked by concept.

An opt in mechanism is a bit verbose, but not necessarily complicated:
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-c++" id="nil"&gt;&lt;span class="org-keyword"&gt;template&lt;/span&gt;&amp;lt;&lt;span class="org-keyword"&gt;class&lt;/span&gt; &lt;span class="org-type"&gt;T&lt;/span&gt;&amp;gt; &lt;span class="org-keyword"&gt;constexpr&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;partial_eq_type&lt;/span&gt; = &lt;span class="org-constant"&gt;false&lt;/span&gt;;
&lt;span class="org-keyword"&gt;template&lt;/span&gt;&amp;lt;&amp;gt; &lt;span class="org-keyword"&gt;constexpr&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-type"&gt;partial_eq_type&lt;/span&gt;&lt;span class="org-variable-name"&gt;&amp;lt;int&amp;gt;&lt;/span&gt; = &lt;span class="org-constant"&gt;true&lt;/span&gt;;
&lt;span class="org-keyword"&gt;template&lt;/span&gt;&amp;lt;&amp;gt; &lt;span class="org-keyword"&gt;constexpr&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-type"&gt;partial_eq_type&lt;/span&gt;&lt;span class="org-variable-name"&gt;&amp;lt;double&amp;gt;&lt;/span&gt; = &lt;span class="org-constant"&gt;true&lt;/span&gt;;

&lt;span class="org-keyword"&gt;template&lt;/span&gt;&amp;lt;&lt;span class="org-keyword"&gt;typename&lt;/span&gt; &lt;span class="org-type"&gt;T&lt;/span&gt;&amp;gt;
&lt;span class="org-keyword"&gt;concept&lt;/span&gt; &lt;span class="org-type"&gt;is_partial_eq&lt;/span&gt; =
  &lt;span class="org-type"&gt;partial_eq_type&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;T&lt;/span&gt;&amp;gt; &amp;amp;&amp;amp;
    &lt;span class="org-keyword"&gt;requires&lt;/span&gt;(&lt;span class="org-type"&gt;T&lt;/span&gt; &lt;span class="org-variable-name"&gt;lhs&lt;/span&gt;, &lt;span class="org-type"&gt;T&lt;/span&gt; &lt;span class="org-variable-name"&gt;rhs&lt;/span&gt;) {
    &lt;span class="org-type"&gt;partial_eq&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;T&lt;/span&gt;&amp;gt;.eq(lhs, rhs);
    &lt;span class="org-type"&gt;partial_eq&lt;/span&gt;&amp;lt;&lt;span class="org-type"&gt;T&lt;/span&gt;&amp;gt;.ne(lhs, rhs);
};

&lt;span class="org-keyword"&gt;constexpr&lt;/span&gt; &lt;span class="org-type"&gt;bool&lt;/span&gt; &lt;span class="org-function-name"&gt;h&lt;/span&gt;(&lt;span class="org-type"&gt;is_partial_eq&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;lhs&lt;/span&gt;, &lt;span class="org-type"&gt;is_partial_eq&lt;/span&gt; &lt;span class="org-keyword"&gt;auto&lt;/span&gt; &lt;span class="org-variable-name"&gt;rhs&lt;/span&gt;) {
    &lt;span class="org-keyword"&gt;return&lt;/span&gt; &lt;span class="org-type"&gt;partial_eq&lt;/span&gt;&amp;lt;&lt;span class="org-keyword"&gt;decltype&lt;/span&gt;(lhs)&amp;gt;.eq(lhs, rhs);
}
&lt;/pre&gt;
&lt;/div&gt;
I have not done a good job at allocating names to the various bits and pieces. Please excuse this.

&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf6b19fc" class="outline-2"&gt;
&lt;h3 id="orgf6b19fc"&gt;What have I missed?&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orgf6b19fc"&gt;

 We've been making variable templates more capable in many ways, and the concept checks to ensure correctness are new, but has anyone else explored this and found insurmountable problems?

&lt;/div&gt;
&lt;/div&gt;</description><guid>https://sdowney.org/posts/index.php/2023/12/24/some-informal-remarks-towards-a-new-theory-of-trait-customization/</guid><pubDate>Sun, 24 Dec 2023 05:00:00 GMT</pubDate></item><item><title>Special Blocks and Emacs Org-mode Export</title><link>https://sdowney.org/posts/special-blocks-and-emacs-org-mode-export/</link><dc:creator>Steve Downey</dc:creator><description>&lt;nav id="table-of-contents" role="doc-toc"&gt;
&lt;h3&gt;Table of Contents&lt;/h3&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/special-blocks-and-emacs-org-mode-export/#orgf2bc23f"&gt;1. Delete blocks and text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/special-blocks-and-emacs-org-mode-export/#org76721e5"&gt;2. Insert blocks and text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sdowney.org/posts/special-blocks-and-emacs-org-mode-export/#org3c7f3fc"&gt;3. Comparison Table&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/nav&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Document number:&lt;/li&gt;
&lt;li&gt;Date:  2021-12-03&lt;/li&gt;
&lt;li&gt;Author: Steve Downey &amp;lt;sdowney2@bloomberg.net&amp;gt;, &amp;lt;sdowney@gmail.com&amp;gt;&lt;/li&gt;
&lt;li&gt;Audience: WG21 Emacs Authors&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="ABSTRACT" id="org257c800"&gt;
&lt;p&gt; Abstract: Making emacs org-mode more usable for writing WG21 papers. &lt;/p&gt;

&lt;/div&gt;

&lt;!-- TEASER_END --&gt;




&lt;div id="outline-container-orgf2bc23f" class="outline-2"&gt;
&lt;h3 id="orgf2bc23f"&gt;&lt;span class="section-number-2"&gt;1.&lt;/span&gt; Delete blocks and text&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
{\color{red}\bfseries
&lt;p&gt; Remove this terrible old stuff. &lt;/p&gt;

}
&lt;p&gt; And the bad &lt;del style="color: red;"&gt;word&lt;/del&gt; from this sentence. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org76721e5" class="outline-2"&gt;
&lt;h3 id="org76721e5"&gt;&lt;span class="section-number-2"&gt;2.&lt;/span&gt; Insert blocks and text&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ins style="color: green;"&gt;
&lt;p&gt; Add this wonderful new text &lt;/p&gt;

&lt;/ins&gt;
&lt;p&gt; And put this cool &lt;ins style="color: green;"&gt;word&lt;/ins&gt; in. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org3c7f3fc" class="outline-2"&gt;
&lt;h3 id="org3c7f3fc"&gt;&lt;span class="section-number-2"&gt;3.&lt;/span&gt; Comparison Table&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr class="header"&gt;&lt;th&gt;&lt;div style="text-align:center"&gt;&lt;strong&gt;Old Busted&lt;/strong&gt;&lt;/div&gt;&lt;/th&gt;&lt;th&gt;&lt;div style="text-align:center"&gt;&lt;strong&gt;New Hotness&lt;/strong&gt;&lt;/div&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr class="odd"&gt;
&lt;td&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-C++" id="nil"&gt;&lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;a&lt;/span&gt; = 3 + 2 + 1;
&lt;/pre&gt;
&lt;/div&gt;

&lt;/td&gt;
&lt;td&gt;
&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-C++" id="nil"&gt;&lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;a&lt;/span&gt; = cool_sum({1, 2, 3});
&lt;/pre&gt;
&lt;/div&gt;

&lt;/td&gt;

&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://sdowney.org/posts/special-blocks-and-emacs-org-mode-export/</guid><pubDate>Fri, 03 Dec 2021 05:00:00 GMT</pubDate></item><item><title>A local CMake workflow with Docker</title><link>https://sdowney.org/posts/index.php/2021/10/03/a-local-cmake-workflow-with-docker/</link><dc:creator>Steve Downey</dc:creator><description>&lt;p&gt; l#+BLOG: sdowney &lt;/p&gt;

&lt;p&gt; An outline of a template that provides an automated workflow driving a CMake project in a docker container. &lt;/p&gt;

&lt;p&gt; This post must be read in concert with &lt;a href="https://github.com/steve-downey/scratch"&gt;https://github.com/steve-downey/scratch&lt;/a&gt; of which it is part. &lt;/p&gt;

&lt;div id="outline-container-orge73d9dc" class="outline-2"&gt;
&lt;h3 id="orge73d9dc"&gt;Routine process should be automated&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orge73d9dc"&gt;
&lt;p&gt; Building a project that uses cmake runs through a predictable lifecycle that you should be able to pick up where you left off without remembering, and for which you should be able to state your goal, not the step you are on. &lt;code&gt;make&lt;/code&gt; is designed for this, and can drive the processs. &lt;/p&gt;
&lt;/div&gt;

&lt;!-- TEASER_END --&gt;

&lt;div id="outline-container-org7268417" class="outline-3"&gt;
&lt;h4 id="org7268417"&gt;The workflow&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-org7268417"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Update any submodules&lt;/li&gt;
&lt;li&gt;Create a build area specific to the toolchain&lt;/li&gt;
&lt;li&gt;Run cmake with that toolchain in the build area&lt;/li&gt;
&lt;li&gt;Run the build in the build area&lt;/li&gt;
&lt;li&gt;Run tests, either dependent or independent of rebuild&lt;/li&gt;
&lt;li&gt;Run the intall&lt;/li&gt;
&lt;li&gt;(optionally) Clean the build&lt;/li&gt;
&lt;li&gt;(optionally) Clean the configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; All of the steps have recognizable filesystem artifacts, need to be run in order, and if there are any failures, the process should stop. &lt;/p&gt;

&lt;p&gt; So we want a &lt;code&gt;make&lt;/code&gt; system on top of our meta-make build system. &lt;/p&gt;

&lt;p&gt; The one thing this system does, that plain cmake doesn't automate, is making sure that any changes are incorporated into a build before tests are run. CMake splits these, in order to provide the option of running tests without a recompile. I think that is a mistake to automate, but I do provide a target that just runs ctest. &lt;/p&gt;

&lt;p&gt; My normal target is &lt;code&gt;test&lt;/code&gt; &lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-bash" id="nil"&gt;make test
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt; This will run through all of the steps, but only those, necessary to compile and run tests. The core commands for the build driver are &lt;/p&gt;

&lt;dl class="org-dl"&gt;
&lt;dt&gt;compile&lt;/dt&gt;&lt;dd&gt;Compile all out of date source&lt;/dd&gt;
&lt;dt&gt;install&lt;/dt&gt;&lt;dd&gt;Install into the INSTALL_PREFIX&lt;/dd&gt;
&lt;dt&gt;ctest&lt;/dt&gt;&lt;dd&gt;Run the currently build test suite&lt;/dd&gt;
&lt;dt&gt;test&lt;/dt&gt;&lt;dd&gt;Build and run the test suite&lt;/dd&gt;
&lt;dt&gt;cmake&lt;/dt&gt;&lt;dd&gt;run cmake again in the build area&lt;/dd&gt;
&lt;dt&gt;clean&lt;/dt&gt;&lt;dd&gt;Clean the build area&lt;/dd&gt;
&lt;dt&gt;realclean&lt;/dt&gt;&lt;dd&gt;Delete the build area&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt; There are several makefile variables controlling the details of what toolchain is used and where things are located. By default the build and install are completely out of the source tree, in ../cmake.bld and ../install respectively, with the build directory further refined by the project name, which defaults to the current directory name, and the toolchain if that is overridden. &lt;/p&gt;

&lt;p&gt; The build is a Ninja Multi-config build, supporting RelWithDebInfo, Debug, Tsan, and Asan, with the particular flavor being selectable by the CONFIG variable. See &lt;code&gt;targets.mk&lt;/code&gt; for the variables and details, such as they are. &lt;/p&gt;

&lt;p&gt; Because other tools, unfortunately, rely on a &lt;code&gt;compile_commands.json&lt;/code&gt; this system symlinks one from the build area when reconfiguration is done. &lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-makefile" id="nil"&gt;&lt;span style="color: #f78fe7;"&gt;default&lt;/span&gt;: compile

&lt;span style="color: #f78fe7;"&gt;$(&lt;/span&gt;&lt;span style="color: #f78fe7;"&gt;_build_path&lt;/span&gt;&lt;span style="color: #f78fe7;"&gt;)&lt;/span&gt;:
    mkdir -p $(&lt;span style="color: #79a8ff;"&gt;_build_path&lt;/span&gt;)

&lt;span style="color: #f78fe7;"&gt;$(&lt;/span&gt;&lt;span style="color: #f78fe7;"&gt;_build_path&lt;/span&gt;&lt;span style="color: #f78fe7;"&gt;)/CMakeCache.txt&lt;/span&gt;: | $(&lt;span style="color: #79a8ff;"&gt;_build_path&lt;/span&gt;) .gitmodules
    cd $(&lt;span style="color: #79a8ff;"&gt;_build_path&lt;/span&gt;) &amp;amp;&amp;amp; $(&lt;span style="color: #79a8ff;"&gt;run_cmake&lt;/span&gt;)
    &lt;span style="color: #b6a0ff; font-weight: bold;"&gt;-&lt;/span&gt;rm compile_commands.json
    ln -s $(&lt;span style="color: #79a8ff;"&gt;_build_path&lt;/span&gt;)/compile_commands.json

&lt;span style="color: #f78fe7;"&gt;compile&lt;/span&gt;: $(&lt;span style="color: #79a8ff;"&gt;_build_path&lt;/span&gt;)/CMakeCache.txt &lt;span style="color: #a8a8a8; font-style: italic;"&gt;## &lt;/span&gt;&lt;span style="color: #a8a8a8; font-style: italic;"&gt;Compile the project&lt;/span&gt;
    cmake --build $(&lt;span style="color: #79a8ff;"&gt;_build_path&lt;/span&gt;)  --config $(&lt;span style="color: #79a8ff;"&gt;CONFIG&lt;/span&gt;) --target all -- -k 0

&lt;span style="color: #f78fe7;"&gt;install&lt;/span&gt;: $(&lt;span style="color: #79a8ff;"&gt;_build_path&lt;/span&gt;)/CMakeCache.txt &lt;span style="color: #a8a8a8; font-style: italic;"&gt;## &lt;/span&gt;&lt;span style="color: #a8a8a8; font-style: italic;"&gt;Install the project&lt;/span&gt;
    &lt;span style="color: #79a8ff;"&gt;DESTDIR&lt;/span&gt;=$(&lt;span style="color: #79a8ff;"&gt;abspath&lt;/span&gt; $(&lt;span style="color: #79a8ff;"&gt;DEST&lt;/span&gt;)) ninja -C $(&lt;span style="color: #79a8ff;"&gt;_build_path&lt;/span&gt;) -k 0  install

&lt;span style="color: #f78fe7;"&gt;ctest&lt;/span&gt;: $(&lt;span style="color: #79a8ff;"&gt;_build_path&lt;/span&gt;)/CMakeCache.txt &lt;span style="color: #a8a8a8; font-style: italic;"&gt;## &lt;/span&gt;&lt;span style="color: #a8a8a8; font-style: italic;"&gt;Run CTest on current build&lt;/span&gt;
    cd $(&lt;span style="color: #79a8ff;"&gt;_build_path&lt;/span&gt;) &amp;amp;&amp;amp; ctest

&lt;span style="color: #f78fe7;"&gt;ctest_&lt;/span&gt; : compile
    cd $(&lt;span style="color: #79a8ff;"&gt;_build_path&lt;/span&gt;) &amp;amp;&amp;amp; ctest

&lt;span style="color: #f78fe7;"&gt;test&lt;/span&gt;: ctest_ &lt;span style="color: #a8a8a8; font-style: italic;"&gt;## &lt;/span&gt;&lt;span style="color: #a8a8a8; font-style: italic;"&gt;Rebuild and run tests&lt;/span&gt;

&lt;span style="color: #f78fe7;"&gt;cmake&lt;/span&gt;: |  $(&lt;span style="color: #79a8ff;"&gt;_build_path&lt;/span&gt;)
    cd $(&lt;span style="color: #79a8ff;"&gt;_build_path&lt;/span&gt;) &amp;amp;&amp;amp; ${&lt;span style="color: #79a8ff;"&gt;run_cmake&lt;/span&gt;}

&lt;span style="color: #f78fe7;"&gt;clean&lt;/span&gt;: $(&lt;span style="color: #79a8ff;"&gt;_build_path&lt;/span&gt;)/CMakeCache.txt &lt;span style="color: #a8a8a8; font-style: italic;"&gt;## &lt;/span&gt;&lt;span style="color: #a8a8a8; font-style: italic;"&gt;Clean the build artifacts&lt;/span&gt;
    cmake --build $(&lt;span style="color: #79a8ff;"&gt;_build_path&lt;/span&gt;)  --config $(&lt;span style="color: #79a8ff;"&gt;CONFIG&lt;/span&gt;) --target clean

&lt;span style="color: #f78fe7;"&gt;realclean&lt;/span&gt;: &lt;span style="color: #a8a8a8; font-style: italic;"&gt;## &lt;/span&gt;&lt;span style="color: #a8a8a8; font-style: italic;"&gt;Delete the build directory&lt;/span&gt;
    rm -rf $(&lt;span style="color: #79a8ff;"&gt;_build_path&lt;/span&gt;)

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd013026" class="outline-2"&gt;
&lt;h3 id="orgd013026"&gt;To Docker or Not to Docker&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orgd013026"&gt;
&lt;p&gt; The reason for the separate &lt;code&gt;targets.mk&lt;/code&gt; file is to simplify running the build purely locally in the host, or in a docker containter. The structure of the build is the same either way. In fact, before I dockerized this template project, there was a single makefile which was mostly the current contents of targets.mk. However, splitting does make the template easier, as project specific targets can naturally be placed in &lt;code&gt;targets&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt; Tha outer &lt;code&gt;Makefile&lt;/code&gt; is responsible for checking if Docker has been requested and for making sure the container is ready. The makefile has a handful of targets of its own, but otherwide defers everything to &lt;code&gt;targets.mk&lt;/code&gt;. &lt;/p&gt;

&lt;dl class="org-dl"&gt;
&lt;dt&gt;use-docker&lt;/dt&gt;&lt;dd&gt;set a flag file, USE_DOCKER_FILE, indicating to forward to docker&lt;/dd&gt;
&lt;dt&gt;remove-docker&lt;/dt&gt;&lt;dd&gt;remove the flag file&lt;/dd&gt;
&lt;dt&gt;docker-rebuild&lt;/dt&gt;&lt;dd&gt;rebuild the docker image&lt;/dd&gt;
&lt;dt&gt;docker-clean&lt;/dt&gt;&lt;dd&gt;Clean volumes and rebuild image&lt;/dd&gt;
&lt;dt&gt;docker-shell&lt;/dt&gt;&lt;dd&gt;Shell in the docker container&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt; The docker container is build via &lt;code&gt;docker-compose&lt;/code&gt; with the configuration &lt;code&gt;docker-compose.yml&lt;/code&gt;. It uses the &lt;code&gt;Dockerfile&lt;/code&gt; which uses &lt;code&gt;steve-downey/cxx-dev:latest&lt;/code&gt; as the base image, and mounts the current source directory as a bind mount and a volume for ../cmake.bld. &lt;/p&gt;

&lt;p&gt; I don't publish steve-downey/cxx-dev:latest and you should build your own BASE. I do provide the recipe for the base image as a subprojct in &lt;code&gt;docker-inf/docker-cxx-dev&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt; You running unknown things as root scares me. &lt;/p&gt;

&lt;p&gt; The image is assumed to provide current version of gcc and clang as c++ or gcc, or clang++ respectively. &lt;/p&gt;

&lt;p&gt; The intent of the image is to provide compilation services and operate as an lsp server using clangd. Mine doesn't provide X, editors, IDEs, etc. The intent isn't a VM, it's a controlled compiler installation. &lt;/p&gt;

&lt;p&gt; Compiler installations bleed in to each other. Mutliple compilers installed onto the same base system can't be assumed to behave the same way as a compier installed as the only compiler. The ABI libraries vary, as do the standard libaries. Deployment just makes this all an even worse problem. As a Rule I use for production Red Hat's DTS compilers and only deploy on later OSs than I've built on, with strict controls on OS deployments and statically linking everything I possibly can. &lt;/p&gt;

&lt;p&gt; The base image I am using here, steve-downey/cxx-dev, works for me, and is avaiable at &lt;a href="https://github.com/steve-downey/docker-cxx-dev"&gt;https://github.com/steve-downey/docker-cxx-dev&lt;/a&gt; as a definition as well. &lt;/p&gt;

&lt;p&gt; It is based on current Ubuntu (jammy), installs gcc-12 from the ubuntu repositories, adds the LLVM repos and installs clang-14 from them based on how &lt;a href="https://apt.llvm.org/llvm.sh"&gt;https://apt.llvm.org/llvm.sh&lt;/a&gt; does. &lt;/p&gt;

&lt;p&gt; It then installs the current release of cmake from &lt;a href="https://apt.kitware.com/ubuntu/"&gt;https://apt.kitware.com/ubuntu/&lt;/a&gt; because using out of date build tools is a bad idea all around. &lt;/p&gt;

&lt;p&gt; I also configure it to run as USER 1000, because running everything as root is strictly worse, and 1000 is a 99.99 percent solution/ &lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;label class="org-src-name"&gt;&lt;em&gt;&lt;/em&gt;&lt;/label&gt;
&lt;pre class="src src-makefile" id="nil"&gt;&lt;span style="color: #f78fe7;"&gt;.update-submodules&lt;/span&gt;:
    git submodule update --init --recursive
    touch .update-submodules

&lt;span style="color: #f78fe7;"&gt;.gitmodules&lt;/span&gt;: .update-submodules

&lt;span style="color: #f78fe7;"&gt;.PHONY&lt;/span&gt;: use-docker
&lt;span style="color: #f78fe7;"&gt;use-docker&lt;/span&gt;: &lt;span style="color: #a8a8a8; font-style: italic;"&gt;## &lt;/span&gt;&lt;span style="color: #a8a8a8; font-style: italic;"&gt;Create docker switch file so that subsequent `make` commands run inside docker container.&lt;/span&gt;
    touch $(&lt;span style="color: #79a8ff;"&gt;USE_DOCKER_FILE&lt;/span&gt;)

&lt;span style="color: #f78fe7;"&gt;.PHONY&lt;/span&gt;: remove-docker
&lt;span style="color: #f78fe7;"&gt;remove-docker&lt;/span&gt;: &lt;span style="color: #a8a8a8; font-style: italic;"&gt;## &lt;/span&gt;&lt;span style="color: #a8a8a8; font-style: italic;"&gt;Remove docker switch file so that subsequent `make` commands run locally.&lt;/span&gt;
    $(&lt;span style="color: #79a8ff;"&gt;RM&lt;/span&gt;) $(&lt;span style="color: #79a8ff;"&gt;USE_DOCKER_FILE&lt;/span&gt;)

&lt;span style="color: #f78fe7;"&gt;.PHONY&lt;/span&gt;: docker-rebuild
&lt;span style="color: #f78fe7;"&gt;docker-rebuild&lt;/span&gt;: &lt;span style="color: #a8a8a8; font-style: italic;"&gt;## &lt;/span&gt;&lt;span style="color: #a8a8a8; font-style: italic;"&gt;Rebuilds the docker file using the latest base image.&lt;/span&gt;
    docker-compose build

&lt;span style="color: #f78fe7;"&gt;.PHONY&lt;/span&gt;: docker-clean
&lt;span style="color: #f78fe7;"&gt;docker-clean&lt;/span&gt;: &lt;span style="color: #a8a8a8; font-style: italic;"&gt;## &lt;/span&gt;&lt;span style="color: #a8a8a8; font-style: italic;"&gt;Clean up the docker volumes and rebuilds the image from scratch.&lt;/span&gt;
    docker-compose down -v
    docker-compose build

&lt;span style="color: #f78fe7;"&gt;.PHONY&lt;/span&gt;: docker-shell
&lt;span style="color: #f78fe7;"&gt;docker-shell&lt;/span&gt;: &lt;span style="color: #a8a8a8; font-style: italic;"&gt;## &lt;/span&gt;&lt;span style="color: #a8a8a8; font-style: italic;"&gt;Shell in container&lt;/span&gt;
    docker-compose run --rm dev

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgcca1c34" class="outline-2"&gt;
&lt;h3 id="orgcca1c34"&gt;Work In Progress&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orgcca1c34"&gt;
&lt;p&gt; I expect I will make many changes to all of this. I'm providing no facilities for you to pick them up. Sorry. &lt;/p&gt;

&lt;p&gt; Please consider this as an exhibition of techniques rather than as a solution. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://sdowney.org/posts/index.php/2021/10/03/a-local-cmake-workflow-with-docker/</guid><pubDate>Sun, 03 Oct 2021 04:00:00 GMT</pubDate></item><item><title>std::execution, Sender/Receiver, and the Continuation Monad</title><link>https://sdowney.org/posts/index.php/2021/10/03/stdexecution-sender-receiver-and-the-continuation-monad/</link><dc:creator>Steve Downey</dc:creator><description>&lt;p&gt; Some thoughts on the &lt;a href="https://wg21.link/p2300"&gt;std::execution&lt;/a&gt; proposal and my understanding of the underlying theory. &lt;/p&gt;

&lt;div id="outline-container-org6280fb4" class="outline-2"&gt;
&lt;h3 id="org6280fb4"&gt;What's proposed&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org6280fb4"&gt;
&lt;p&gt; From the paper's &lt;a href="https://brycelelbach.github.io/wg21_p2300_std_execution/std_execution.html#intro"&gt;Introduction&lt;/a&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt; This paper proposes a self-contained design for a Standard C++ framework for managing asynchronous execution on generic execution contexts. It is based on the ideas in [P0443R14] and its companion papers. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; Which doesn't tell you much. &lt;/p&gt;

&lt;p&gt; It proposes a framework where the principle abstractions are Senders, Receivers, and Schedulers. &lt;/p&gt;

&lt;dl class="org-dl"&gt;
&lt;dt&gt;Sender&lt;/dt&gt;&lt;dd&gt;A composable unit of work.&lt;/dd&gt;
&lt;dt&gt;Receiver&lt;/dt&gt;&lt;dd&gt;Delimits work, handling completion, exceptions, or cancellation.&lt;/dd&gt;
&lt;dt&gt;Schedulers&lt;/dt&gt;&lt;dd&gt;Arranges for the context work is done in.&lt;/dd&gt;
&lt;/dl&gt;

&lt;!-- TEASER_END --&gt;

&lt;p&gt; The primary user facing concept is the sender. Values and functions can be lifted directly into senders. Senders can be stacked together, with a sender passing its value on to another function. Or stacking exception or cancellation handling the same way. &lt;/p&gt;

&lt;p&gt; Receivers handle the three ways a sender can complete, by returning a value, throwing an exception, or being canceled. As described, receivers are most likely to be implemented within particular algorithms that combine senders, such as &lt;a href="https://brycelelbach.github.io/wg21_p2300_std_execution/std_execution.html#example-then"&gt;`then`&lt;/a&gt; or &lt;a href="https://brycelelbach.github.io/wg21_p2300_std_execution/std_execution.html#example-retry"&gt;`retry`&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt; Schedulers provide access to execution contexts. Like inline, single thread, a thread pool, a GPU, and so on, would all have schedulers that provide for putting a sender into the context they manage. &lt;/p&gt;

&lt;p&gt; There's a fairly large API surface being proposed. But there's an underlying theory about this, governing what algorithms need to be there and how the pieces fit together. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8699f4f" class="outline-2"&gt;
&lt;h3 id="org8699f4f"&gt;Continuation Passing Style and the Continuation Monad&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org8699f4f"&gt;
&lt;p&gt; Continuation passing style is a transformation from a normal function and a call stack to a direction to send the result to the "continuation" without returning. This means the functions context can be cleaned up. Delimited continuations are a slight variation, where instead of an unbounded "rest of the program", the continuation has an end point and a value. It's essentially a function, and can be handled as such. There is a purely mechanical method for converting all of the lambda calculus transforms into CPS form, and this can be profitable for compilers based on lambda, or related logics, like system F. &lt;/p&gt;

&lt;p&gt; The mechanical transformation also means that all the control structures, like loops, gotos, coroutines, exceptions, have CPS equivalents. &lt;/p&gt;

&lt;p&gt; CPS is tedious, though. Having to explicitly add a continuation to everything is complicated. &lt;/p&gt;

&lt;p&gt; However, there's also a typeclass, or concept, that allows you to convert regular functions into continuation passing style, automatically. It's then rather straightforward to involve concerns like where work is being run for something that wraps up the entire work. Even being able to switch back and forth between contexts. That's the continuation monad. &lt;/p&gt;

&lt;p&gt; And unfortunately monads became an organizing principle in programming language theory one or two decades after most CS programs were standardized. So it's all complicated and involves things we weren't trained on. Fitting it into C++ has been an ongoing challenge, and until we had generic lambda was neither reasonbly concise nor idiomatic. &lt;/p&gt;

&lt;p&gt; See, however, the new monadic interface additions for std::optional for why you want this. Or Ranges, which are solidly based in the 'list' or non-deterministic monad. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org32f30b7" class="outline-2"&gt;
&lt;h3 id="org32f30b7"&gt;We have a poor relationship with Theory&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org32f30b7"&gt;
&lt;p&gt; There is no satisfactory PL theory for object oriented programming. There's lots of work, but it mostly ends up describing something that OO programmers don't think is quite the same as what they do. Even the ones who spend a lot of time doing theory. &lt;/p&gt;

&lt;p&gt; Yet OO was, and is, a successful discipline. Working with identity, behavior, and state has produced remarkable results. Temporal calculi, not so much. &lt;/p&gt;

&lt;p&gt; For a long while, we as a discipline thought that multi-threading was similar. There was poor theory, but we had hardware, and libraries that let us use that hardware to do concurrent work correctly. &lt;/p&gt;

&lt;p&gt; That turned out not to be the case. &lt;/p&gt;

&lt;p&gt; Concurrency can't be just a library, unfortunately. Concurrency models that hardware vendors will commit to won't promise not to violate causality. That makes producing a programming model programmers can use frighteningly difficult. &lt;/p&gt;

&lt;p&gt; Which is why having a sound theory for std::execution is a good thing, even if the theory is unfamiliar. &lt;/p&gt;

&lt;p&gt; But as a group, we learned the wrong lessons from the 80s and thought it was a researcher's job to take the successes of practitioners and put a sound basis to them. Ignoring that it is a feedback loop. In the 60s and 70s, those researchers were also the practitioners. It's not wrong to get out ahead of theory, but we do need to check back. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4d78be1" class="outline-2"&gt;
&lt;h3 id="org4d78be1"&gt;p2300 std::execution&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org4d78be1"&gt;
&lt;p&gt; Senders, via the Decorator pattern, lift ordinary functions into the continuation passing style. People writing functions only need to be concerned with handling the arguments they are passed, without concern for execution context or continuations. Functions used by senders act like, and are, normal functions. &lt;/p&gt;

&lt;p&gt; Senders manage a bundle of channels, representing normal return of a value, throwing an exception, or an error channel to handle cancellation, or other errors not within the bound of ordinary functions. All of these channels can be composed taking the result to another function, or monadically with a function returning a sender, where that function can determine the kind of sender based on the values of the arguments. The channels can be combined or rerouted, connecting one to another, or presenting a variant containing either result, exception, and/or error to the continuation function. &lt;/p&gt;

&lt;p&gt; Although senders form a logical graph of units of work, the physical type model is containment, much like expression templates. The result of binding senders together via an algorithm is a sender that contains the bound together senders. There are no nodes or allocations inherent to the model, just function calls. &lt;/p&gt;

&lt;p&gt; C++ coroutines fit into this model. C++ coroutines are, from the outside, functions with rules about the interaction patterns with the returned value. Making a coroutine owning type a sender, and a sender co_awaitable, is possible and has been demonstrated. &lt;/p&gt;

&lt;p&gt; std::execution takes the Continuation Monad and fits it to C++ control flow, return or exception, and adds cancellation, which incidentally allows a channel for failures from execution contexts. The thread pool can potentially signal failure via the error channel, without aliasing problems from application function code. However, for advanced users, these can be folded back into the normal function arguments and handled by application code. Policy decisions are not burned into the ROM of std::execution, but there are defaults that can be provided by application infrastructure authors. &lt;/p&gt;

&lt;p&gt; Those infrastructure authors do not have to be std library vendors. The protocols, rendered as concepts, are available to normal users. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2dd1cec" class="outline-2"&gt;
&lt;h3 id="org2dd1cec"&gt;Network TS&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org2dd1cec"&gt;
&lt;dl class="org-dl"&gt;
&lt;dt&gt;&lt;span class="underline"&gt;Eppur si muove&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;And yet it moves&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt; I do not believe ASIO's model is a firm foundation for all async programming. However, it is well proven, and exists. It works. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org5f111d1" class="outline-2"&gt;
&lt;h3 id="org5f111d1"&gt;And …&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org5f111d1"&gt;
&lt;p&gt; I have confidence that a networking library can and will be built using p2300. I am less confident that can be done in the timeframe for C++26. I do not believe for a moment we could have one for C++23, even with an existence proof a networking library appearing now. It's simply too late to review and agree. We're in the same place as coroutines. We can have the machinery, but without all of the application user facing infrastructure we should have. &lt;/p&gt;

&lt;p&gt; I think this was the right choice with coroutines, and I think providing the machinery for general continuation based async in the standard library so that we can build on top of it is the right choice. The authors have committed to making sure all the facilities are available for programmers, in particular the pipe syntax (an issue for ranges) as well as providing bases or adapters for coroutine promises and typed senders. We can experiment and add existing practice as we go. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgb7e8b70" class="outline-2"&gt;
&lt;h3 id="orgb7e8b70"&gt;Disclaimer&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orgb7e8b70"&gt;
&lt;p&gt; This is &lt;b&gt;all&lt;/b&gt; my personal opinion, based on my own understanding. I've been in the meetings, I've been in discussions, asked questions. But if I'm wrong about some aspect of the proposal, that's on me. Certainly not a formal opinion of Bloomberg, where I work. While we do lots of network services, and async programming, this isn't what our tech looks like at all. Getting from here to there is an open question, but it would be for ASIO, too. &lt;/p&gt;

&lt;p&gt; At least it isn't CORBA. &lt;/p&gt;

&lt;p&gt; &lt;a href="https://github.com/steve-downey/what-comes-to-mind/blob/master/send-rec.org"&gt;Source For Blog&lt;/a&gt; &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://sdowney.org/posts/index.php/2021/10/03/stdexecution-sender-receiver-and-the-continuation-monad/</guid><pubDate>Sun, 03 Oct 2021 04:00:00 GMT</pubDate></item></channel></rss>